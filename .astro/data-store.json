[["Map",1,2,9,10,114,115,162,163,239,240],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.10.1","content-config-digest","ac70fffc3aed40ef","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://sergio.io\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false},\"legacy\":{\"collections\":false}}","videos",["Map",11,12,38,39,64,65,89,90],"building-high-performance-teams",{"id":11,"data":13,"body":21,"filePath":22,"digest":23,"rendered":24,"legacyId":37},{"title":14,"description":15,"date":16,"type":17,"venue":18,"link":19,"featured":20},"Building High-Performance Engineering Teams","A deep dive into the strategies and practices that enable engineering teams to scale effectively while maintaining quality and velocity.",["Date","2024-03-15T00:00:00.000Z"],"Conference","ReactConf 2024","https://www.youtube.com/watch?v=example",true,"In this conference talk, I share lessons learned from scaling engineering teams from startup size to enterprise scale. The presentation covers practical strategies for maintaining team velocity, code quality, and culture during periods of rapid growth.\n\n## Key Topics Covered\n\n- Building sustainable development processes\n- Implementing effective code review practices\n- Creating mentorship and growth opportunities\n- Balancing autonomy with alignment\n- Measuring and optimizing team performance\n- Maintaining culture during scaling\n\nThis talk was rated as the highest-scoring presentation at ReactConf 2024, with attendees praising its practical, actionable advice.","src/content/videos/building-high-performance-teams.md","a7758b18bd67ade5",{"html":25,"metadata":26},"\u003Cp>In this conference talk, I share lessons learned from scaling engineering teams from startup size to enterprise scale. The presentation covers practical strategies for maintaining team velocity, code quality, and culture during periods of rapid growth.\u003C/p>\n\u003Ch2 id=\"key-topics-covered\">Key Topics Covered\u003C/h2>\n\u003Cul>\n\u003Cli>Building sustainable development processes\u003C/li>\n\u003Cli>Implementing effective code review practices\u003C/li>\n\u003Cli>Creating mentorship and growth opportunities\u003C/li>\n\u003Cli>Balancing autonomy with alignment\u003C/li>\n\u003Cli>Measuring and optimizing team performance\u003C/li>\n\u003Cli>Maintaining culture during scaling\u003C/li>\n\u003C/ul>\n\u003Cp>This talk was rated as the highest-scoring presentation at ReactConf 2024, with attendees praising its practical, actionable advice.\u003C/p>",{"headings":27,"localImagePaths":32,"remoteImagePaths":33,"frontmatter":34,"imagePaths":36},[28],{"depth":29,"slug":30,"text":31},2,"key-topics-covered","Key Topics Covered",[],[],{"title":14,"description":15,"date":35,"type":17,"venue":18,"link":19,"featured":20},["Date","2024-03-15T00:00:00.000Z"],[],"building-high-performance-teams.md","engineering-leadership-workshop",{"id":38,"data":40,"body":48,"filePath":49,"digest":50,"rendered":51,"legacyId":63},{"title":41,"description":42,"date":43,"type":44,"venue":45,"link":46,"featured":47},"Engineering Leadership Workshop","A hands-on workshop covering the transition from individual contributor to engineering leader, including team dynamics and technical decision-making.",["Date","2023-11-10T00:00:00.000Z"],"Workshop","TechLeaders Summit","https://techleaderssummit.com/workshops/engineering-leadership",false,"An intensive half-day workshop designed for engineers making the transition into leadership roles. Participants work through real-world scenarios and develop practical skills for leading technical teams.\n\n## Workshop Format\n\n- Interactive exercises and group discussions\n- Case study analysis\n- Role-playing scenarios\n- Peer learning and networking\n- Actionable takeaway framework\n\nThe workshop received excellent feedback, with 95% of participants rating it as \"extremely valuable\" for their career development.","src/content/videos/engineering-leadership-workshop.md","168b94648d644429",{"html":52,"metadata":53},"\u003Cp>An intensive half-day workshop designed for engineers making the transition into leadership roles. Participants work through real-world scenarios and develop practical skills for leading technical teams.\u003C/p>\n\u003Ch2 id=\"workshop-format\">Workshop Format\u003C/h2>\n\u003Cul>\n\u003Cli>Interactive exercises and group discussions\u003C/li>\n\u003Cli>Case study analysis\u003C/li>\n\u003Cli>Role-playing scenarios\u003C/li>\n\u003Cli>Peer learning and networking\u003C/li>\n\u003Cli>Actionable takeaway framework\u003C/li>\n\u003C/ul>\n\u003Cp>The workshop received excellent feedback, with 95% of participants rating it as “extremely valuable” for their career development.\u003C/p>",{"headings":54,"localImagePaths":58,"remoteImagePaths":59,"frontmatter":60,"imagePaths":62},[55],{"depth":29,"slug":56,"text":57},"workshop-format","Workshop Format",[],[],{"title":41,"description":42,"date":61,"type":44,"venue":45,"link":46,"featured":47},["Date","2023-11-10T00:00:00.000Z"],[],"engineering-leadership-workshop.md","future-of-web-development",{"id":64,"data":66,"body":73,"filePath":74,"digest":75,"rendered":76,"legacyId":88},{"title":67,"description":68,"date":69,"type":70,"venue":71,"link":72,"featured":20},"The Future of Web Development","Keynote presentation exploring emerging trends in web development, from edge computing to AI-powered development tools.",["Date","2023-09-08T00:00:00.000Z"],"Keynote","WebDev Conference","https://webdevconf.com/keynotes/future-of-web-development","Opening keynote exploring the rapidly evolving landscape of web development and what the next 5 years might bring for developers, teams, and the industry as a whole.\n\n## Key Themes\n\n- The rise of edge computing and distributed architectures\n- AI-powered development tools and their impact on productivity\n- The evolution of JavaScript frameworks and the meta-framework trend\n- WebAssembly and its growing ecosystem\n- The changing role of full-stack developers\n- Sustainability and performance in web development\n\nThis keynote sparked significant discussion in the developer community and was featured in several industry publications.","src/content/videos/future-of-web-development.md","4dafd5b3476a68a1",{"html":77,"metadata":78},"\u003Cp>Opening keynote exploring the rapidly evolving landscape of web development and what the next 5 years might bring for developers, teams, and the industry as a whole.\u003C/p>\n\u003Ch2 id=\"key-themes\">Key Themes\u003C/h2>\n\u003Cul>\n\u003Cli>The rise of edge computing and distributed architectures\u003C/li>\n\u003Cli>AI-powered development tools and their impact on productivity\u003C/li>\n\u003Cli>The evolution of JavaScript frameworks and the meta-framework trend\u003C/li>\n\u003Cli>WebAssembly and its growing ecosystem\u003C/li>\n\u003Cli>The changing role of full-stack developers\u003C/li>\n\u003Cli>Sustainability and performance in web development\u003C/li>\n\u003C/ul>\n\u003Cp>This keynote sparked significant discussion in the developer community and was featured in several industry publications.\u003C/p>",{"headings":79,"localImagePaths":83,"remoteImagePaths":84,"frontmatter":85,"imagePaths":87},[80],{"depth":29,"slug":81,"text":82},"key-themes","Key Themes",[],[],{"title":67,"description":68,"date":86,"type":70,"venue":71,"link":72,"featured":20},["Date","2023-09-08T00:00:00.000Z"],[],"future-of-web-development.md","modern-react-patterns",{"id":89,"data":91,"body":98,"filePath":99,"digest":100,"rendered":101,"legacyId":113},{"title":92,"description":93,"date":94,"type":95,"venue":96,"link":97,"featured":47},"Modern React Patterns and Performance","Exploring the latest React patterns, hooks, and performance optimization techniques for building scalable applications.",["Date","2024-02-20T00:00:00.000Z"],"Meetup","Nashville JS","https://slides.com/sergiocruz/modern-react-patterns","A technical deep-dive into modern React development patterns, focusing on the latest features and performance optimization techniques that every React developer should know.\n\n## What We Covered\n\n- Advanced React hooks patterns\n- Performance optimization with Suspense and concurrent features\n- Server Components and the future of React\n- Best practices for large-scale React applications\n- Real-world performance case studies\n\nThe talk included live coding demonstrations and Q&A session covering common React performance pitfalls and how to avoid them.","src/content/videos/modern-react-patterns.md","f07c8185d89ce1eb",{"html":102,"metadata":103},"\u003Cp>A technical deep-dive into modern React development patterns, focusing on the latest features and performance optimization techniques that every React developer should know.\u003C/p>\n\u003Ch2 id=\"what-we-covered\">What We Covered\u003C/h2>\n\u003Cul>\n\u003Cli>Advanced React hooks patterns\u003C/li>\n\u003Cli>Performance optimization with Suspense and concurrent features\u003C/li>\n\u003Cli>Server Components and the future of React\u003C/li>\n\u003Cli>Best practices for large-scale React applications\u003C/li>\n\u003Cli>Real-world performance case studies\u003C/li>\n\u003C/ul>\n\u003Cp>The talk included live coding demonstrations and Q&#x26;A session covering common React performance pitfalls and how to avoid them.\u003C/p>",{"headings":104,"localImagePaths":108,"remoteImagePaths":109,"frontmatter":110,"imagePaths":112},[105],{"depth":29,"slug":106,"text":107},"what-we-covered","What We Covered",[],[],{"title":92,"description":93,"date":111,"type":95,"venue":96,"link":97,"featured":47},["Date","2024-02-20T00:00:00.000Z"],[],"modern-react-patterns.md","courses",["Map",116,117,139,140],"engineering-management-processes",{"id":116,"data":118,"body":124,"filePath":125,"digest":126,"rendered":127,"legacyId":138},{"title":119,"description":120,"platform":121,"link":122,"featured":20,"icon":123},"Engineering Management Processes & Tools","Learn how to lead modern engineering teams—from CI/CD to observability, this course covers the essential processes and tools.","Pluralsight","https://www.pluralsight.com/courses/engineering-management-processes-tools","🎓","A comprehensive course for engineering managers covering the essential processes, tools, and practices needed to lead high-performing engineering teams in today's fast-paced development environment.\n\n## What You'll Learn\n\n- Modern CI/CD pipeline implementation and management\n- Observability and monitoring strategies\n- Team process optimization\n- Engineering metrics that matter\n- Tool selection and integration\n- Building scalable development workflows\n\nThis course bridges the gap between technical expertise and management skills, providing practical guidance for engineering leaders.","src/content/courses/engineering-management-processes.md","7d6f8a785ef756ab",{"html":128,"metadata":129},"\u003Cp>A comprehensive course for engineering managers covering the essential processes, tools, and practices needed to lead high-performing engineering teams in today’s fast-paced development environment.\u003C/p>\n\u003Ch2 id=\"what-youll-learn\">What You’ll Learn\u003C/h2>\n\u003Cul>\n\u003Cli>Modern CI/CD pipeline implementation and management\u003C/li>\n\u003Cli>Observability and monitoring strategies\u003C/li>\n\u003Cli>Team process optimization\u003C/li>\n\u003Cli>Engineering metrics that matter\u003C/li>\n\u003Cli>Tool selection and integration\u003C/li>\n\u003Cli>Building scalable development workflows\u003C/li>\n\u003C/ul>\n\u003Cp>This course bridges the gap between technical expertise and management skills, providing practical guidance for engineering leaders.\u003C/p>",{"headings":130,"localImagePaths":134,"remoteImagePaths":135,"frontmatter":136,"imagePaths":137},[131],{"depth":29,"slug":132,"text":133},"what-youll-learn","What You’ll Learn",[],[],{"title":119,"description":120,"platform":121,"link":122,"featured":20,"icon":123},[],"engineering-management-processes.md","ic-to-engineering-leader",{"id":139,"data":141,"body":147,"filePath":148,"digest":149,"rendered":150,"legacyId":161},{"title":142,"description":143,"platform":144,"link":145,"featured":20,"icon":146},"From IC to Engineering Leader","A comprehensive workshop series for engineers transitioning into leadership roles, covering team dynamics, technical decision-making, and more.","Workshop Series","https://sergio.io/workshops/ic-to-leader","🎯","An intensive workshop series designed specifically for individual contributors making the transition into engineering leadership roles.\n\n## Workshop Modules\n\n1. **Leadership Fundamentals**: Understanding the shift from doing to enabling\n2. **Team Dynamics**: Building and maintaining high-performing teams\n3. **Technical Decision Making**: Making architecture and technology choices at scale\n4. **Communication Skills**: Effective communication up, down, and across the organization\n5. **Performance Management**: Setting expectations and providing feedback\n6. **Career Development**: Helping your team members grow and succeed\n\nEach workshop includes hands-on exercises, real-world case studies, and actionable takeaways you can implement immediately.","src/content/courses/ic-to-engineering-leader.md","86b1d4316dbcc834",{"html":151,"metadata":152},"\u003Cp>An intensive workshop series designed specifically for individual contributors making the transition into engineering leadership roles.\u003C/p>\n\u003Ch2 id=\"workshop-modules\">Workshop Modules\u003C/h2>\n\u003Col>\n\u003Cli>\u003Cstrong>Leadership Fundamentals\u003C/strong>: Understanding the shift from doing to enabling\u003C/li>\n\u003Cli>\u003Cstrong>Team Dynamics\u003C/strong>: Building and maintaining high-performing teams\u003C/li>\n\u003Cli>\u003Cstrong>Technical Decision Making\u003C/strong>: Making architecture and technology choices at scale\u003C/li>\n\u003Cli>\u003Cstrong>Communication Skills\u003C/strong>: Effective communication up, down, and across the organization\u003C/li>\n\u003Cli>\u003Cstrong>Performance Management\u003C/strong>: Setting expectations and providing feedback\u003C/li>\n\u003Cli>\u003Cstrong>Career Development\u003C/strong>: Helping your team members grow and succeed\u003C/li>\n\u003C/ol>\n\u003Cp>Each workshop includes hands-on exercises, real-world case studies, and actionable takeaways you can implement immediately.\u003C/p>",{"headings":153,"localImagePaths":157,"remoteImagePaths":158,"frontmatter":159,"imagePaths":160},[154],{"depth":29,"slug":155,"text":156},"workshop-modules","Workshop Modules",[],[],{"title":142,"description":143,"platform":144,"link":145,"featured":20,"icon":146},[],"ic-to-engineering-leader.md","publications",["Map",164,165,189,190,214,215],"engineering-leadership-book-chapter",{"id":164,"data":166,"body":173,"filePath":174,"digest":175,"rendered":176,"legacyId":188},{"title":167,"description":168,"date":169,"type":170,"publisher":171,"link":172,"featured":20},"Engineering Leadership in the Digital Age","Contributing author to 'The Modern Engineering Manager' - a comprehensive guide covering the evolving role of engineering leadership.",["Date","2023-06-20T00:00:00.000Z"],"Book Chapter","O'Reilly Media","https://www.oreilly.com/library/view/modern-engineering-manager/9781098123456/","A contributing chapter to \"The Modern Engineering Manager\" focusing on the unique challenges and opportunities facing engineering leaders in today's rapidly evolving technology landscape.\n\n## Chapter Focus\n\nMy chapter, \"Leading Through Uncertainty,\" covers:\n\n- Adapting leadership styles for remote and hybrid teams\n- Making technical decisions with incomplete information\n- Building resilient teams that can handle change\n- Balancing innovation with operational excellence\n- Developing engineering talent in a competitive market\n\nThe book has become a essential resource for engineering managers and leaders, with my chapter being frequently cited for its practical approach to leadership challenges.","src/content/publications/engineering-leadership-book-chapter.md","157f8e78743f5c0b",{"html":177,"metadata":178},"\u003Cp>A contributing chapter to “The Modern Engineering Manager” focusing on the unique challenges and opportunities facing engineering leaders in today’s rapidly evolving technology landscape.\u003C/p>\n\u003Ch2 id=\"chapter-focus\">Chapter Focus\u003C/h2>\n\u003Cp>My chapter, “Leading Through Uncertainty,” covers:\u003C/p>\n\u003Cul>\n\u003Cli>Adapting leadership styles for remote and hybrid teams\u003C/li>\n\u003Cli>Making technical decisions with incomplete information\u003C/li>\n\u003Cli>Building resilient teams that can handle change\u003C/li>\n\u003Cli>Balancing innovation with operational excellence\u003C/li>\n\u003Cli>Developing engineering talent in a competitive market\u003C/li>\n\u003C/ul>\n\u003Cp>The book has become a essential resource for engineering managers and leaders, with my chapter being frequently cited for its practical approach to leadership challenges.\u003C/p>",{"headings":179,"localImagePaths":183,"remoteImagePaths":184,"frontmatter":185,"imagePaths":187},[180],{"depth":29,"slug":181,"text":182},"chapter-focus","Chapter Focus",[],[],{"title":167,"description":168,"date":186,"type":170,"publisher":171,"link":172,"featured":20},["Date","2023-06-20T00:00:00.000Z"],[],"engineering-leadership-book-chapter.md","modern-react-architecture-series",{"id":189,"data":191,"body":198,"filePath":199,"digest":200,"rendered":201,"legacyId":213},{"title":192,"description":193,"date":194,"type":195,"publisher":196,"link":197,"featured":47},"Modern React Architecture: A Complete Guide","A 10-part tutorial series covering modern React architecture patterns, state management, and performance optimization techniques.",["Date","2023-10-05T00:00:00.000Z"],"Tutorial Series","Dev.to","https://dev.to/sergiocruz/modern-react-architecture-series","A comprehensive tutorial series that takes developers through building scalable React applications using modern patterns and best practices.\n\n## Series Overview\n\n1. **Project Structure and Organization**\n2. **Advanced Component Patterns**\n3. **State Management Strategies**\n4. **Performance Optimization**\n5. **Testing Approaches**\n6. **Build and Deployment**\n7. **Monitoring and Debugging**\n8. **Accessibility and SEO**\n9. **Security Considerations**\n10. **Scaling and Maintenance**\n\nEach part includes practical examples, code samples, and real-world scenarios that developers face when building production React applications.","src/content/publications/modern-react-architecture-series.md","6203dac0c11e0a9a",{"html":202,"metadata":203},"\u003Cp>A comprehensive tutorial series that takes developers through building scalable React applications using modern patterns and best practices.\u003C/p>\n\u003Ch2 id=\"series-overview\">Series Overview\u003C/h2>\n\u003Col>\n\u003Cli>\u003Cstrong>Project Structure and Organization\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>Advanced Component Patterns\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>State Management Strategies\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>Performance Optimization\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>Testing Approaches\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>Build and Deployment\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>Monitoring and Debugging\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>Accessibility and SEO\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>Security Considerations\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>Scaling and Maintenance\u003C/strong>\u003C/li>\n\u003C/ol>\n\u003Cp>Each part includes practical examples, code samples, and real-world scenarios that developers face when building production React applications.\u003C/p>",{"headings":204,"localImagePaths":208,"remoteImagePaths":209,"frontmatter":210,"imagePaths":212},[205],{"depth":29,"slug":206,"text":207},"series-overview","Series Overview",[],[],{"title":192,"description":193,"date":211,"type":195,"publisher":196,"link":197,"featured":47},["Date","2023-10-05T00:00:00.000Z"],[],"modern-react-architecture-series.md","scaling-engineering-teams-ieee",{"id":214,"data":216,"body":223,"filePath":224,"digest":225,"rendered":226,"legacyId":238},{"title":217,"description":218,"date":219,"type":220,"publisher":221,"link":222,"featured":20},"Scaling Engineering Teams: Lessons from High-Growth Startups","A comprehensive analysis of scaling challenges and solutions based on real-world experience leading engineering teams through rapid growth phases.",["Date","2024-01-15T00:00:00.000Z"],"Technical Article","IEEE Software","https://ieeexplore.ieee.org/document/scaling-engineering-teams","This technical article explores the challenges and strategies involved in scaling engineering teams from small startup squads to large enterprise organizations. Based on real-world experience leading teams through multiple growth phases.\n\n## Key Areas Covered\n\n- Hiring and onboarding at scale\n- Maintaining code quality during rapid growth\n- Communication patterns and team structure\n- Technology choices for scalable systems\n- Culture preservation during organizational change\n- Metrics and measurement for team health\n\nThe article provides practical frameworks and actionable advice for engineering leaders facing similar scaling challenges, backed by data from multiple high-growth technology companies.","src/content/publications/scaling-engineering-teams-ieee.md","193158c355d75efe",{"html":227,"metadata":228},"\u003Cp>This technical article explores the challenges and strategies involved in scaling engineering teams from small startup squads to large enterprise organizations. Based on real-world experience leading teams through multiple growth phases.\u003C/p>\n\u003Ch2 id=\"key-areas-covered\">Key Areas Covered\u003C/h2>\n\u003Cul>\n\u003Cli>Hiring and onboarding at scale\u003C/li>\n\u003Cli>Maintaining code quality during rapid growth\u003C/li>\n\u003Cli>Communication patterns and team structure\u003C/li>\n\u003Cli>Technology choices for scalable systems\u003C/li>\n\u003Cli>Culture preservation during organizational change\u003C/li>\n\u003Cli>Metrics and measurement for team health\u003C/li>\n\u003C/ul>\n\u003Cp>The article provides practical frameworks and actionable advice for engineering leaders facing similar scaling challenges, backed by data from multiple high-growth technology companies.\u003C/p>",{"headings":229,"localImagePaths":233,"remoteImagePaths":234,"frontmatter":235,"imagePaths":237},[230],{"depth":29,"slug":231,"text":232},"key-areas-covered","Key Areas Covered",[],[],{"title":217,"description":218,"date":236,"type":220,"publisher":221,"link":222,"featured":20},["Date","2024-01-15T00:00:00.000Z"],[],"scaling-engineering-teams-ieee.md","blog",["Map",241,242,322,323,364,365,393,394,89,508,592,593,710,711,740,741,780,781,811,812,854,855],"building-scalable-teams",{"id":241,"data":243,"body":253,"filePath":254,"digest":255,"rendered":256,"legacyId":321},{"title":244,"description":245,"date":246,"tags":247,"draft":47,"author":251,"readingTime":252},"Building Scalable Engineering Teams","Lessons learned from scaling engineering teams from 5 to 50+ engineers while maintaining velocity and culture.",["Date","2024-01-15T00:00:00.000Z"],[248,249,250],"leadership","engineering-management","scaling","Sergio Cruz","5 min read","# Building Scalable Engineering Teams\n\nScaling an engineering team is one of the most challenging aspects of growing a technology company. Over the past several years, I've had the privilege of leading teams through rapid growth phases, from small startup squads to large enterprise organizations. Here are the key lessons I've learned about building and scaling high-performing engineering teams.\n\n## The Foundation: Culture First\n\nBefore you hire your first engineer or implement any process, you need to establish a strong engineering culture. Culture isn't something you can retrofit—it needs to be intentional from day one.\n\n### Define Your Engineering Values\n\nStart by clearly defining what your engineering organization stands for:\n\n- **Quality**: We ship code we're proud of\n- **Collaboration**: We succeed together or fail together  \n- **Growth**: We invest in continuous learning and improvement\n- **Impact**: We build things that matter to users and the business\n\n### Hire for Culture Add, Not Just Culture Fit\n\nAs you scale, resist the temptation to hire people who are exactly like your existing team. Instead, look for candidates who will add to your culture while sharing your core values.\n\n## The Process: Systems That Scale\n\n### 1. Establish Clear Engineering Standards\n\nDocument your coding standards, review processes, and technical guidelines early. This includes:\n\n- Code style guides and linting rules\n- Testing requirements and coverage goals\n- Security and performance standards\n- Documentation expectations\n\n### 2. Implement Effective Code Review\n\nCode review is your quality gate and knowledge sharing mechanism. Establish clear expectations:\n\n- All code must be reviewed by at least one other engineer\n- Reviews should focus on correctness, maintainability, and learning\n- Use automated tools to catch style and basic issues\n- Keep review cycles short (ideally \u003C 24 hours)\n\n### 3. Build Robust CI/CD Pipelines\n\nAutomation becomes critical as teams grow. Invest in:\n\n- Automated testing at all levels (unit, integration, e2e)\n- Automated deployments with rollback capabilities\n- Feature flags for safe, gradual rollouts\n- Monitoring and alerting that catches issues early\n\n## The People: Growing Leaders at Every Level\n\n### Mentorship Programs\n\nCreate formal and informal mentorship opportunities:\n\n- Pair junior engineers with senior team members\n- Encourage cross-team knowledge sharing\n- Provide resources for technical and career growth\n\n### Career Progression Paths\n\nBe transparent about career advancement:\n\n- Create clear job ladders for both IC and management tracks\n- Provide regular feedback and growth opportunities\n- Support engineers who want to try different roles or specializations\n\n### Psychological Safety\n\nFoster an environment where people feel safe to:\n\n- Ask questions without judgment\n- Admit mistakes and learn from them\n- Propose new ideas and challenge existing approaches\n- Take calculated risks\n\n## The Challenges: What to Watch Out For\n\n### Communication Overhead\n\nAs teams grow, communication becomes exponentially more complex. Combat this with:\n\n- Clear documentation and decision logs\n- Regular all-hands and team sync meetings\n- Cross-functional embedded teams\n- Transparent planning and prioritization processes\n\n### Technical Debt\n\nRapid growth often leads to shortcuts. Manage technical debt by:\n\n- Allocating time in each sprint for refactoring\n- Tracking technical debt as you would customer-facing features\n- Making architectural decisions that support future growth\n- Regular architecture reviews and tech talks\n\n### Maintaining Innovation\n\nDon't let process kill creativity. Preserve innovation through:\n\n- Hack days and exploration time\n- 20% time for experimental projects\n- Innovation challenges and internal conferences\n- Encouraging experimentation with new technologies\n\n## Key Metrics to Track\n\nAs you scale, measure what matters:\n\n- **Developer Velocity**: Lead time from commit to production\n- **Quality**: Bug rates, customer-reported issues, uptime\n- **Engagement**: Employee satisfaction, retention rates\n- **Learning**: Internal mobility, skill development\n\n## Conclusion\n\nScaling engineering teams is as much about people and process as it is about technology. The most successful organizations I've seen focus on building strong foundations early, then evolving their practices as they grow.\n\nRemember that scaling is not just about adding more people—it's about building systems, processes, and culture that enable teams to be effective at any size. Start with strong foundations, measure what matters, and always prioritize the growth and well-being of your team members.\n\nThe investment you make in scaling thoughtfully will pay dividends as your organization continues to grow and tackle increasingly complex challenges.","src/content/blog/building-scalable-teams.md","aa23dfb380148d41",{"html":257,"metadata":258},"\u003Ch1 id=\"building-scalable-engineering-teams\">Building Scalable Engineering Teams\u003C/h1>\n\u003Cp>Scaling an engineering team is one of the most challenging aspects of growing a technology company. Over the past several years, I’ve had the privilege of leading teams through rapid growth phases, from small startup squads to large enterprise organizations. Here are the key lessons I’ve learned about building and scaling high-performing engineering teams.\u003C/p>\n\u003Ch2 id=\"the-foundation-culture-first\">The Foundation: Culture First\u003C/h2>\n\u003Cp>Before you hire your first engineer or implement any process, you need to establish a strong engineering culture. Culture isn’t something you can retrofit—it needs to be intentional from day one.\u003C/p>\n\u003Ch3 id=\"define-your-engineering-values\">Define Your Engineering Values\u003C/h3>\n\u003Cp>Start by clearly defining what your engineering organization stands for:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Quality\u003C/strong>: We ship code we’re proud of\u003C/li>\n\u003Cli>\u003Cstrong>Collaboration\u003C/strong>: We succeed together or fail together\u003C/li>\n\u003Cli>\u003Cstrong>Growth\u003C/strong>: We invest in continuous learning and improvement\u003C/li>\n\u003Cli>\u003Cstrong>Impact\u003C/strong>: We build things that matter to users and the business\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"hire-for-culture-add-not-just-culture-fit\">Hire for Culture Add, Not Just Culture Fit\u003C/h3>\n\u003Cp>As you scale, resist the temptation to hire people who are exactly like your existing team. Instead, look for candidates who will add to your culture while sharing your core values.\u003C/p>\n\u003Ch2 id=\"the-process-systems-that-scale\">The Process: Systems That Scale\u003C/h2>\n\u003Ch3 id=\"1-establish-clear-engineering-standards\">1. Establish Clear Engineering Standards\u003C/h3>\n\u003Cp>Document your coding standards, review processes, and technical guidelines early. This includes:\u003C/p>\n\u003Cul>\n\u003Cli>Code style guides and linting rules\u003C/li>\n\u003Cli>Testing requirements and coverage goals\u003C/li>\n\u003Cli>Security and performance standards\u003C/li>\n\u003Cli>Documentation expectations\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"2-implement-effective-code-review\">2. Implement Effective Code Review\u003C/h3>\n\u003Cp>Code review is your quality gate and knowledge sharing mechanism. Establish clear expectations:\u003C/p>\n\u003Cul>\n\u003Cli>All code must be reviewed by at least one other engineer\u003C/li>\n\u003Cli>Reviews should focus on correctness, maintainability, and learning\u003C/li>\n\u003Cli>Use automated tools to catch style and basic issues\u003C/li>\n\u003Cli>Keep review cycles short (ideally &#x3C; 24 hours)\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"3-build-robust-cicd-pipelines\">3. Build Robust CI/CD Pipelines\u003C/h3>\n\u003Cp>Automation becomes critical as teams grow. Invest in:\u003C/p>\n\u003Cul>\n\u003Cli>Automated testing at all levels (unit, integration, e2e)\u003C/li>\n\u003Cli>Automated deployments with rollback capabilities\u003C/li>\n\u003Cli>Feature flags for safe, gradual rollouts\u003C/li>\n\u003Cli>Monitoring and alerting that catches issues early\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"the-people-growing-leaders-at-every-level\">The People: Growing Leaders at Every Level\u003C/h2>\n\u003Ch3 id=\"mentorship-programs\">Mentorship Programs\u003C/h3>\n\u003Cp>Create formal and informal mentorship opportunities:\u003C/p>\n\u003Cul>\n\u003Cli>Pair junior engineers with senior team members\u003C/li>\n\u003Cli>Encourage cross-team knowledge sharing\u003C/li>\n\u003Cli>Provide resources for technical and career growth\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"career-progression-paths\">Career Progression Paths\u003C/h3>\n\u003Cp>Be transparent about career advancement:\u003C/p>\n\u003Cul>\n\u003Cli>Create clear job ladders for both IC and management tracks\u003C/li>\n\u003Cli>Provide regular feedback and growth opportunities\u003C/li>\n\u003Cli>Support engineers who want to try different roles or specializations\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"psychological-safety\">Psychological Safety\u003C/h3>\n\u003Cp>Foster an environment where people feel safe to:\u003C/p>\n\u003Cul>\n\u003Cli>Ask questions without judgment\u003C/li>\n\u003Cli>Admit mistakes and learn from them\u003C/li>\n\u003Cli>Propose new ideas and challenge existing approaches\u003C/li>\n\u003Cli>Take calculated risks\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"the-challenges-what-to-watch-out-for\">The Challenges: What to Watch Out For\u003C/h2>\n\u003Ch3 id=\"communication-overhead\">Communication Overhead\u003C/h3>\n\u003Cp>As teams grow, communication becomes exponentially more complex. Combat this with:\u003C/p>\n\u003Cul>\n\u003Cli>Clear documentation and decision logs\u003C/li>\n\u003Cli>Regular all-hands and team sync meetings\u003C/li>\n\u003Cli>Cross-functional embedded teams\u003C/li>\n\u003Cli>Transparent planning and prioritization processes\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"technical-debt\">Technical Debt\u003C/h3>\n\u003Cp>Rapid growth often leads to shortcuts. Manage technical debt by:\u003C/p>\n\u003Cul>\n\u003Cli>Allocating time in each sprint for refactoring\u003C/li>\n\u003Cli>Tracking technical debt as you would customer-facing features\u003C/li>\n\u003Cli>Making architectural decisions that support future growth\u003C/li>\n\u003Cli>Regular architecture reviews and tech talks\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"maintaining-innovation\">Maintaining Innovation\u003C/h3>\n\u003Cp>Don’t let process kill creativity. Preserve innovation through:\u003C/p>\n\u003Cul>\n\u003Cli>Hack days and exploration time\u003C/li>\n\u003Cli>20% time for experimental projects\u003C/li>\n\u003Cli>Innovation challenges and internal conferences\u003C/li>\n\u003Cli>Encouraging experimentation with new technologies\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"key-metrics-to-track\">Key Metrics to Track\u003C/h2>\n\u003Cp>As you scale, measure what matters:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Developer Velocity\u003C/strong>: Lead time from commit to production\u003C/li>\n\u003Cli>\u003Cstrong>Quality\u003C/strong>: Bug rates, customer-reported issues, uptime\u003C/li>\n\u003Cli>\u003Cstrong>Engagement\u003C/strong>: Employee satisfaction, retention rates\u003C/li>\n\u003Cli>\u003Cstrong>Learning\u003C/strong>: Internal mobility, skill development\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>Scaling engineering teams is as much about people and process as it is about technology. The most successful organizations I’ve seen focus on building strong foundations early, then evolving their practices as they grow.\u003C/p>\n\u003Cp>Remember that scaling is not just about adding more people—it’s about building systems, processes, and culture that enable teams to be effective at any size. Start with strong foundations, measure what matters, and always prioritize the growth and well-being of your team members.\u003C/p>\n\u003Cp>The investment you make in scaling thoughtfully will pay dividends as your organization continues to grow and tackle increasingly complex challenges.\u003C/p>",{"headings":259,"localImagePaths":315,"remoteImagePaths":316,"frontmatter":317,"imagePaths":320},[260,263,266,270,273,276,279,282,285,288,291,294,297,300,303,306,309,312],{"depth":261,"slug":262,"text":244},1,"building-scalable-engineering-teams",{"depth":29,"slug":264,"text":265},"the-foundation-culture-first","The Foundation: Culture First",{"depth":267,"slug":268,"text":269},3,"define-your-engineering-values","Define Your Engineering Values",{"depth":267,"slug":271,"text":272},"hire-for-culture-add-not-just-culture-fit","Hire for Culture Add, Not Just Culture Fit",{"depth":29,"slug":274,"text":275},"the-process-systems-that-scale","The Process: Systems That Scale",{"depth":267,"slug":277,"text":278},"1-establish-clear-engineering-standards","1. Establish Clear Engineering Standards",{"depth":267,"slug":280,"text":281},"2-implement-effective-code-review","2. Implement Effective Code Review",{"depth":267,"slug":283,"text":284},"3-build-robust-cicd-pipelines","3. Build Robust CI/CD Pipelines",{"depth":29,"slug":286,"text":287},"the-people-growing-leaders-at-every-level","The People: Growing Leaders at Every Level",{"depth":267,"slug":289,"text":290},"mentorship-programs","Mentorship Programs",{"depth":267,"slug":292,"text":293},"career-progression-paths","Career Progression Paths",{"depth":267,"slug":295,"text":296},"psychological-safety","Psychological Safety",{"depth":29,"slug":298,"text":299},"the-challenges-what-to-watch-out-for","The Challenges: What to Watch Out For",{"depth":267,"slug":301,"text":302},"communication-overhead","Communication Overhead",{"depth":267,"slug":304,"text":305},"technical-debt","Technical Debt",{"depth":267,"slug":307,"text":308},"maintaining-innovation","Maintaining Innovation",{"depth":29,"slug":310,"text":311},"key-metrics-to-track","Key Metrics to Track",{"depth":29,"slug":313,"text":314},"conclusion","Conclusion",[],[],{"title":244,"description":245,"date":318,"tags":319,"readingTime":252},["Date","2024-01-15T00:00:00.000Z"],[248,249,250],[],"building-scalable-teams.md","angularjs-how-to-generate-code-coverage-for-yeoman-scaffolded-apps",{"id":322,"data":324,"body":335,"filePath":336,"digest":337,"rendered":338,"legacyId":363},{"title":325,"description":326,"date":327,"tags":328,"draft":47,"author":251,"readingTime":252},"AngularJS unit test and code coverage with Yeoman, Karma, Jasmine and PhantomJS","Learn how to generate code coverage reports for AngularJS apps scaffolded with Yeoman. This step-by-step guide helps developers improve test quality and maintainability using tools like Karma and Istanbul.",["Date","2014-05-22T00:00:00.000Z"],[329,330,331,332,333,334],"angularjs","unit-testing","karma","jasmine","phantomjs","yeoman","# Using Karma, Jasmine and PhantomJS to run tests on your AngularJS projects\n\nI shamefully admit that the first time I ever tested my frontend code was after I started using \u003Ca href=\"https://angularjs.org\" target=\"_blank\">AngularJS\u003C/a>. Before I had all kinds of excuses, however AngularJS was built with testing in mind and that definitely made a huge difference.\n\nFor the sake of simplicity I will be using \u003Ca href=\"http://yeoman.io\" target=\"_blank\">Yeoman\u003C/a> for this tutorial. The \u003Ca href=\"https://github.com/yeoman/generator-angular\" target=\"_blank\">Yeoman generator for AngularJS\u003C/a> definitely makes *testing AngularJS applications a breeze*. For example every time a controller is generated through the command line tool, this controller's test file is also generated automatically.\n\n## Scaffolding a new application\n\nLet's get started! First things first, make sure you have \u003Ca href=\"http://gruntjs.com\" target=\"_blank\">GruntJS\u003C/a>, \u003Ca href=\"http://yeoman.io\" target=\"_blank\">Yeoman\u003C/a> and the \u003Ca href=\"https://github.com/yeoman/generator-angular\" target=\"_blank\">AngularJS Generator\u003C/a> all installed globally:\n\n```shell\nnpm install -g grunt-cli\nnpm install -g yo\nnpm install -g generator-angular\n```\n\nOnce you are certain these three guys are installed, let's go ahead and scaffold a new AngularJS project:\n\n```shell\nmkdir angularjs-unit-test && cd $_\nyo angular angularjs-unit-test\n```\n\nThe AngularJS Genetator scaffolds a new application, it creates a `Main Controller` and its test by default. The controller file is located under `app/scripts/controllers/main.js` and its test file should be under `test/spec/controllers/main.js`.\n\nSince everything is already in place we should be able to start testing and generating code coverage reports right away, right? *Wrong!* We need to teak our app's configuration a little bit before we are able to sucessfuly run `grunt test`.\n\n## Setting up testing environment\n\nNow that we have our application laid out, let's just tweak a couple of files:\n\n**Step 1:**\nAdd `npm` dependencies that will allow `karma` to run tests and generate the code coverage report:\n\n```shell\nnpm install karma-jasmine --save-dev\nnpm install karma-phantomjs-launcher --save-dev\nnpm install karma-coverage --save-dev\n```\n\n*Attention: We are using \u003Ca href=\"http://jasmine.github.io\" target=\"_blank\">Jasmine\u003C/a> as our testing framework and \u003Ca href=\"http://phantomjs.org\" target=\"_blank\">PhantomJS\u003C/a> as the default browser to run our tests. Don't worry about installing PhantomJS though, as the \u003Ca href=\"https://github.com/karma-runner/karma-phantomjs-launcher\">karma-phantomjs-launcher\u003C/a> package includes a standalone executable `PhanthomJS` binary. Lastly, we are using \u003Ca href=\"https://github.com/karma-runner/karma-coverage\" target=\"_blank\">karma-coverage\u003C/a> to generate our code coverage.*\n\n\u003Cbr />\n\n**Step 2:**\nStart by modifying the `browsers` flag within the `karma.conf.js` file, which should be located right on the root directory of your application.\n\n\n```javascript\n// Located on line 49 on my local version of karma.conf.js\nbrowsers: ['PhantomJS'],\n```\n\nIn this same file, add the following lines right after the `browsers` flag to make sure code coverage reports are generated every time the code is tested:\n\n```javascript\n// Code coverage report\nreporters: ['progress', 'coverage'],\npreprocessors: {\n  'app/scripts/**/*.js': ['coverage']\n},\ncoverageReporter: {\n  type: 'html',\n  dir: 'coverage'\n},\n\n// Don't forget to add 'karma-coverage' to your list of plugins\nplugins: [\n  'karma-jasmine',\n  'karma-coverage' // required for coverage\n]\n```\n\n\u003Cbr />\n\n**Step 3:**\nBy now we should be able to run our test and see the code coverage report!\n\nGo to your terminal and execute the following:\n\n```shell\ngrunt test\n```\n\nYou should see the following feedback on your screen:\n\n```shell\nRunning \"clean:server\" (clean) task\nCleaning .tmp...OK\n\nRunning \"concurrent:test\" (concurrent) task\n    \n    Running \"copy:styles\" (copy) task\n    Copied 1 files\n    \n    Done, without errors.\n    \n    \n    Execution Time (2014-05-22 20:22:18 UTC)\n    loading tasks  4ms  ▇▇▇▇▇▇▇▇▇▇▇▇ 29%\n    copy:styles ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 64%\n    Total 14ms\n    \nRunning \"autoprefixer:dist\" (autoprefixer) task\nPrefixed file \".tmp/styles/main.css\" created.\n\nRunning \"connect:test\" (connect) task\nStarted connect web server on 127.0.0.1:9001.\n\nRunning \"karma:unit\" (karma) task\nINFO [karma]: Karma v0.12.16 server started at http://localhost:8080/\nINFO [launcher]: Starting browser PhantomJS\nWARN [watcher]: Pattern \"/Users/scruz/Sites/angularjs-unit-test/test/mock/**/*.js\" does not match any file.\nINFO [PhantomJS 1.9.7 (Mac OS X)]: Connected on socket WYv3ZzsuYUZWChR9mUGF with id 42383299\nPhantomJS 1.9.7 (Mac OS X): Executed 0 of 1 SUCCESS (0 secs / PhantomJS 1.9.7 (Mac OS X): Executed 1 of 1 SUCCESS (0 secs / PhantomJS 1.9.7 (Mac OS X): Executed 1 of 1 SUCCESS (0.015 secs / 0.011 secs)\n\nDone, without errors.\n\n\nExecution Time (2014-05-22 20:22:17 UTC)\nconcurrent:test    1.6s  ▇▇▇▇▇▇▇▇▇▇ 39%\nautoprefixer:dist  45ms  ▇ 1%\nkarma:unit         2.5s  ▇▇▇▇▇▇▇▇▇▇▇▇ 59%\nTotal 4.1s\n```\n\n\u003Cbr />\n\n## Finally! View your code coverage report\n\nIf everything ran successfuly for you as it did for me, you will notice that a directory called `coverage` was generated in the root of your application. Open the html file that was generated in your browser and it should look something like this:\n\n![](/images/blog/2014-05-22-04-49-33-pm.png)\n\u003Cbr />\n*File location: `coverage/PhantomJS(...)/index.html`*\n\nAnd that's it for now! I wish I had this guide when I first had to generate a code coverage report in my Yeoman scaffolded application. So I hope this helps you as much as it did me.\n\n### Demo\nIf you are a code sample kind of person, don't worry I've got you covered! Everything we covered on this tutorial is available on my GitHub account: \u003Cbr />\u003Ca href=\"https://github.com/sergiocruz/angularjs-code-coverage\" target=\"_blank\">https://github.com/sergiocruz/angularjs-code-coverage\u003C/a>","src/content/blog/2014-05-22-unit-test-angularjs.md","a018ef6cee38c4e5",{"html":339,"metadata":340},"\u003Ch1 id=\"using-karma-jasmine-and-phantomjs-to-run-tests-on-your-angularjs-projects\">Using Karma, Jasmine and PhantomJS to run tests on your AngularJS projects\u003C/h1>\n\u003Cp>I shamefully admit that the first time I ever tested my frontend code was after I started using \u003Ca href=\"https://angularjs.org\" target=\"_blank\">AngularJS\u003C/a>. Before I had all kinds of excuses, however AngularJS was built with testing in mind and that definitely made a huge difference.\u003C/p>\n\u003Cp>For the sake of simplicity I will be using \u003Ca href=\"http://yeoman.io\" target=\"_blank\">Yeoman\u003C/a> for this tutorial. The \u003Ca href=\"https://github.com/yeoman/generator-angular\" target=\"_blank\">Yeoman generator for AngularJS\u003C/a> definitely makes \u003Cem>testing AngularJS applications a breeze\u003C/em>. For example every time a controller is generated through the command line tool, this controller’s test file is also generated automatically.\u003C/p>\n\u003Ch2 id=\"scaffolding-a-new-application\">Scaffolding a new application\u003C/h2>\n\u003Cp>Let’s get started! First things first, make sure you have \u003Ca href=\"http://gruntjs.com\" target=\"_blank\">GruntJS\u003C/a>, \u003Ca href=\"http://yeoman.io\" target=\"_blank\">Yeoman\u003C/a> and the \u003Ca href=\"https://github.com/yeoman/generator-angular\" target=\"_blank\">AngularJS Generator\u003C/a> all installed globally:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -g\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> grunt-cli\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -g\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> yo\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -g\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> generator-angular\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Once you are certain these three guys are installed, let’s go ahead and scaffold a new AngularJS project:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">mkdir\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> angularjs-unit-test\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x26;&#x26; \u003C/span>\u003Cspan style=\"color:#79B8FF\">cd\u003C/span>\u003Cspan style=\"color:#79B8FF\"> $_\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">yo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> angular\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> angularjs-unit-test\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The AngularJS Genetator scaffolds a new application, it creates a \u003Ccode>Main Controller\u003C/code> and its test by default. The controller file is located under \u003Ccode>app/scripts/controllers/main.js\u003C/code> and its test file should be under \u003Ccode>test/spec/controllers/main.js\u003C/code>.\u003C/p>\n\u003Cp>Since everything is already in place we should be able to start testing and generating code coverage reports right away, right? \u003Cem>Wrong!\u003C/em> We need to teak our app’s configuration a little bit before we are able to sucessfuly run \u003Ccode>grunt test\u003C/code>.\u003C/p>\n\u003Ch2 id=\"setting-up-testing-environment\">Setting up testing environment\u003C/h2>\n\u003Cp>Now that we have our application laid out, let’s just tweak a couple of files:\u003C/p>\n\u003Cp>\u003Cstrong>Step 1:\u003C/strong>\nAdd \u003Ccode>npm\u003C/code> dependencies that will allow \u003Ccode>karma\u003C/code> to run tests and generate the code coverage report:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> karma-jasmine\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --save-dev\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> karma-phantomjs-launcher\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --save-dev\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> karma-coverage\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --save-dev\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cem>Attention: We are using \u003Ca href=\"http://jasmine.github.io\" target=\"_blank\">Jasmine\u003C/a> as our testing framework and \u003Ca href=\"http://phantomjs.org\" target=\"_blank\">PhantomJS\u003C/a> as the default browser to run our tests. Don’t worry about installing PhantomJS though, as the \u003Ca href=\"https://github.com/karma-runner/karma-phantomjs-launcher\">karma-phantomjs-launcher\u003C/a> package includes a standalone executable \u003Ccode>PhanthomJS\u003C/code> binary. Lastly, we are using \u003Ca href=\"https://github.com/karma-runner/karma-coverage\" target=\"_blank\">karma-coverage\u003C/a> to generate our code coverage.\u003C/em>\u003C/p>\n\u003Cbr>\n\u003Cp>\u003Cstrong>Step 2:\u003C/strong>\nStart by modifying the \u003Ccode>browsers\u003C/code> flag within the \u003Ccode>karma.conf.js\u003C/code> file, which should be located right on the root directory of your application.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Located on line 49 on my local version of karma.conf.js\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">browsers: ['PhantomJS'],\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>In this same file, add the following lines right after the \u003Ccode>browsers\u003C/code> flag to make sure code coverage reports are generated every time the code is tested:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Code coverage report\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">reporters\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'progress'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'coverage'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">preprocessors\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  'app/scripts/**/*.js'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'coverage'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">},\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">coverageReporter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  type\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'html'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  dir\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'coverage'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">},\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Don't forget to add 'karma-coverage' to your list of plugins\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">plugins\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  'karma-jasmine'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  'karma-coverage'\u003C/span>\u003Cspan style=\"color:#6A737D\"> // required for coverage\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cbr>\n\u003Cp>\u003Cstrong>Step 3:\u003C/strong>\nBy now we should be able to run our test and see the code coverage report!\u003C/p>\n\u003Cp>Go to your terminal and execute the following:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">grunt\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> test\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>You should see the following feedback on your screen:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Running\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"clean:server\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (clean) task\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Cleaning\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> .tmp...OK\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Running\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"concurrent:test\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (concurrent) task\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    Running\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"copy:styles\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (copy) task\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    Copied\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> files\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    Done,\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> without\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> errors.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    Execution\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Time\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (2014-05-22 \u003C/span>\u003Cspan style=\"color:#9ECBFF\">20:22:18\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> UTC\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    loading\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> tasks\u003C/span>\u003Cspan style=\"color:#9ECBFF\">  4ms\u003C/span>\u003Cspan style=\"color:#9ECBFF\">  ▇▇▇▇▇▇▇▇▇▇▇▇\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 29%\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    copy:styles\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 64%\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    Total\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 14ms\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Running\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"autoprefixer:dist\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (autoprefixer) task\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Prefixed\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> file\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \".tmp/styles/main.css\"\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> created.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Running\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"connect:test\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (connect) task\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Started\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> connect\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> web\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> server\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> on\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 127.0.0.1:9001.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Running\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"karma:unit\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (karma) task\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">INFO\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [karma]: Karma v0.12.16 server started at http://localhost:8080/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">INFO\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [launcher]: Starting browser PhantomJS\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">WARN\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [watcher]: Pattern \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/Users/scruz/Sites/angularjs-unit-test/test/mock/**/*.js\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> does not match any file.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">INFO\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [PhantomJS \u003C/span>\u003Cspan style=\"color:#79B8FF\">1.9.7\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (Mac \u003C/span>\u003Cspan style=\"color:#9ECBFF\">OS\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> X\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)]: Connected on socket WYv3ZzsuYUZWChR9mUGF with id 42383299\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">PhantomJS\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1.9.7\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (Mac \u003C/span>\u003Cspan style=\"color:#9ECBFF\">OS\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> X\u003C/span>\u003Cspan style=\"color:#E1E4E8\">): Executed 0 of 1 SUCCESS (\u003C/span>\u003Cspan style=\"color:#B392F0\">0\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> secs\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> /\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> PhantomJS\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1.9.7\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (Mac \u003C/span>\u003Cspan style=\"color:#9ECBFF\">OS\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> X\u003C/span>\u003Cspan style=\"color:#E1E4E8\">): Executed 1 of 1 SUCCESS (\u003C/span>\u003Cspan style=\"color:#B392F0\">0\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> secs\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> /\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> PhantomJS\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1.9.7\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (Mac \u003C/span>\u003Cspan style=\"color:#9ECBFF\">OS\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> X\u003C/span>\u003Cspan style=\"color:#E1E4E8\">): Executed 1 of 1 SUCCESS (\u003C/span>\u003Cspan style=\"color:#B392F0\">0.015\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> secs\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> /\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0.011\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> secs\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Done,\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> without\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> errors.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Execution\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Time\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (2014-05-22 \u003C/span>\u003Cspan style=\"color:#9ECBFF\">20:22:17\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> UTC\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">concurrent:test\u003C/span>\u003Cspan style=\"color:#9ECBFF\">    1.6s\u003C/span>\u003Cspan style=\"color:#9ECBFF\">  ▇▇▇▇▇▇▇▇▇▇\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 39%\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">autoprefixer:dist\u003C/span>\u003Cspan style=\"color:#9ECBFF\">  45ms\u003C/span>\u003Cspan style=\"color:#9ECBFF\">  ▇\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 1%\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">karma:unit\u003C/span>\u003Cspan style=\"color:#9ECBFF\">         2.5s\u003C/span>\u003Cspan style=\"color:#9ECBFF\">  ▇▇▇▇▇▇▇▇▇▇▇▇\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 59%\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Total\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 4.1s\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cbr>\n\u003Ch2 id=\"finally-view-your-code-coverage-report\">Finally! View your code coverage report\u003C/h2>\n\u003Cp>If everything ran successfuly for you as it did for me, you will notice that a directory called \u003Ccode>coverage\u003C/code> was generated in the root of your application. Open the html file that was generated in your browser and it should look something like this:\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/blog/2014-05-22-04-49-33-pm.png\" alt=\"\">\n\u003Cbr>\n\u003Cem>File location: \u003Ccode>coverage/PhantomJS(...)/index.html\u003C/code>\u003C/em>\u003C/p>\n\u003Cp>And that’s it for now! I wish I had this guide when I first had to generate a code coverage report in my Yeoman scaffolded application. So I hope this helps you as much as it did me.\u003C/p>\n\u003Ch3 id=\"demo\">Demo\u003C/h3>\n\u003Cp>If you are a code sample kind of person, don’t worry I’ve got you covered! Everything we covered on this tutorial is available on my GitHub account: \u003Cbr>\u003Ca href=\"https://github.com/sergiocruz/angularjs-code-coverage\" target=\"_blank\">\u003C/a>\u003Ca href=\"https://github.com/sergiocruz/angularjs-code-coverage\">https://github.com/sergiocruz/angularjs-code-coverage\u003C/a>\u003C/p>",{"headings":341,"localImagePaths":357,"remoteImagePaths":358,"frontmatter":359,"imagePaths":362},[342,345,348,351,354],{"depth":261,"slug":343,"text":344},"using-karma-jasmine-and-phantomjs-to-run-tests-on-your-angularjs-projects","Using Karma, Jasmine and PhantomJS to run tests on your AngularJS projects",{"depth":29,"slug":346,"text":347},"scaffolding-a-new-application","Scaffolding a new application",{"depth":29,"slug":349,"text":350},"setting-up-testing-environment","Setting up testing environment",{"depth":29,"slug":352,"text":353},"finally-view-your-code-coverage-report","Finally! View your code coverage report",{"depth":267,"slug":355,"text":356},"demo","Demo",[],[],{"title":325,"description":326,"date":360,"tags":361,"readingTime":252,"slug":322},["Date","2014-05-22T00:00:00.000Z"],[329,330,331,332,333,334],[],"2014-05-22-unit-test-angularjs.md","unit-test-sailsjs-with-mocha-and-instanbul-for-code-coverage",{"id":364,"data":366,"body":373,"filePath":374,"digest":375,"rendered":376,"legacyId":392},{"title":367,"description":368,"date":369,"tags":370,"draft":47,"author":251,"readingTime":252},"Unit test SailsJS with Mocha and generate code coverage with Istanbul","Unit test your SailsJS applications using Mocha and generate code coverage reports with Istanbul. Step-by-step guide for JavaScript developers working with Node and SailsJS frameworks.",["Date","2014-05-21T00:00:00.000Z"],[371,330,372],"sailsjs","mocha","# Unit testing JavaScript is easy they said. It only takes a few seconds they said.\n\n*And they were right for the most part! Well, maybe seconds is an exaggeration but we can definitely achieve this with very few minutes*\n\nSo you fired up your first `hello world` app using \u003Ca href=\"https://sailsjs.org\" target=\"_blank\">SailsJS\u003C/a>, it was super simple and you started wondering if testing your app would be as simple. Soon after you realized this was not the case and much like everything else related to testing in JavaScript there is not just one right answer.\n\nPerhaps you may have much more experience with SailsJS and have way gone beyond the `hello world` phase and now is time to make sure your application is reliable. Unit testing is part of the solution when it comes to code reliability.\n\n***Before we start:** Are you a total SailsJS n00b? Follow the official \u003Ca href=\"https://sailsjs.org/#!getStarted\" target=\"_blank\">Getting Started\u003C/a> guide to get SailsJS installed before proceeding.*\n\n### Without further ado, let's get started:\n\n**Step 1:**\nAdd the following dependencies to your project:\n\n```bash\nnpm install mocha --save-dev\nnpm install assert --save-dev\nnpm install sinon --save-dev\nnpm install grunt-mocha-istanbul --save-dev\n```\n\n**Step 2:**\nAdd a `/test` directory to the root directory of your application that mimics the format of the `/api` directory. Your new root directory structure should look something like this:\n\n```\n/api\n/assets\n/config\n/test\n  /adapters\n  /controllers\n  /models\n  /policies\n  /services\n/views\n.gitignore\napp.js\nGruntfile.js\npackage.json\nREADME.md\n```\n\n**Step 3:**\nModify your `Gruntfile.js`\n\nFirst add the following snippet at the end of your `grunt.initConfig()` *(located around line 414 in my case)*\n\n```javascript\nmocha_istanbul: {\n  coverage: {\n    src: 'test', // the folder, not the files\n    options: {\n      coverageFolder: 'coverage',\n      mask: '**/*.spec.js',\n      root: 'api/'\n    }\n  }\n}\n```\n\nAnd add the two following snippet right before the file ends: *(again around line 496 in my case)*\n\n```javascript\n// Adds \"grunt-mocha-istanbul\" npm task\ngrunt.loadNpmTasks('grunt-mocha-istanbul');\n\n// Adding test task enabling \"grunt test\" command\ngrunt.registerTask('test', [\n  'mocha_istanbul:coverage'\n]);\n```\n\n**Step 4:**\nCreate your first test\n\nFor the sake of simplicity let's create a HelloController and its test:\n\n\n```javascript\n/**\n * Sails Controller: HelloController\n * File location: api/controllers/HelloController.js\n */\nmodule.exports = {\n\n  index: function(req, res) {\n    res.send('Hello World');\n  }\n  \n};\n```\n\n```javascript\n/**\n * Test File: Testing HelloController\n * File location: test/controllers/HelloController.spec.js\n */\nvar HelloController = require('../../api/controllers/HelloController'),\n    sinon = require('sinon'),\n    assert = require('assert');\n\ndescribe('The Hello Controller', function() {\n  describe('when we invoke the index action', function() {\n    it('should return hello world message', function() {\n\n      // Mocking res.send() method by using a sinon spy\n      var send = sinon.spy();\n\n      // Executes controller action\n      HelloController.index(null, {\n        'send': send\n      });\n\n      // Asserts send() method was called and that it was called\n      // with the correct arguments: 'Hello World'\n      assert(send.called);\n      assert(send.calledWith('Hello World'));\n    });\n  });\n});\n\n```\n\n**Step 5:**\nExecute test\n\nExecute the following command on your Terminal:\n\n```bash\ngrunt test\n```\n\nThe feedback you will receive should be similar to the following:\n\n```bash\nRunning \"mocha_istanbul:coverage\" (mocha_istanbul) task\n\n  ․\n\n  1 passing (6ms)\n\n===================================================================\nWriting coverage object [/Users/scruz/Sites/sails-unit-test/coverage/coverage.json]\nWriting coverage reports at [/Users/scruz/Sites/sails-unit-test/coverage]\n===================================================================\n\n======================== Coverage summary =========================\nStatements   : 100% ( 2/2 )\nBranches     : 100% ( 0/0 )\nFunctions    : 100% ( 1/1 )\nLines        : 100% ( 2/2 )\n===================================================================\n>> Done. Check coverage folder.\n\nDone, without errors.\n```\n\nAlso by now you may have realized the `/coverage` folder was generated on your application's root directory. Open the following html file on your browser to see your current code coverage: `/coverage/lcov-report/index.html`\n\n**And... we're all done!**\n\nI hope this helped you as much as it helped me!  Feel free to contact me with any questions.\n\n**Demo:** a working code sample for what we have accomplished in this tutorial is available on my GitHub account:\n\u003Ca href=\"https://github.com/sergiocruz/sails-unit-test\" target=\"_blank\">https://github.com/sergiocruz/sails-unit-test\u003C/a>\n\nEnjoy!","src/content/blog/2014-05-21-unit-test-sails.md","64ad0499a1e76b98",{"html":377,"metadata":378},"\u003Ch1 id=\"unit-testing-javascript-is-easy-they-said-it-only-takes-a-few-seconds-they-said\">Unit testing JavaScript is easy they said. It only takes a few seconds they said.\u003C/h1>\n\u003Cp>\u003Cem>And they were right for the most part! Well, maybe seconds is an exaggeration but we can definitely achieve this with very few minutes\u003C/em>\u003C/p>\n\u003Cp>So you fired up your first \u003Ccode>hello world\u003C/code> app using \u003Ca href=\"https://sailsjs.org\" target=\"_blank\">SailsJS\u003C/a>, it was super simple and you started wondering if testing your app would be as simple. Soon after you realized this was not the case and much like everything else related to testing in JavaScript there is not just one right answer.\u003C/p>\n\u003Cp>Perhaps you may have much more experience with SailsJS and have way gone beyond the \u003Ccode>hello world\u003C/code> phase and now is time to make sure your application is reliable. Unit testing is part of the solution when it comes to code reliability.\u003C/p>\n\u003Cp>\u003Cem>\u003Cstrong>Before we start:\u003C/strong> Are you a total SailsJS n00b? Follow the official \u003Ca href=\"https://sailsjs.org/#!getStarted\" target=\"_blank\">Getting Started\u003C/a> guide to get SailsJS installed before proceeding.\u003C/em>\u003C/p>\n\u003Ch3 id=\"without-further-ado-lets-get-started\">Without further ado, let’s get started:\u003C/h3>\n\u003Cp>\u003Cstrong>Step 1:\u003C/strong>\nAdd the following dependencies to your project:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> mocha\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --save-dev\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> assert\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --save-dev\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> sinon\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --save-dev\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> grunt-mocha-istanbul\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --save-dev\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Step 2:\u003C/strong>\nAdd a \u003Ccode>/test\u003C/code> directory to the root directory of your application that mimics the format of the \u003Ccode>/api\u003C/code> directory. Your new root directory structure should look something like this:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>/api\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>/assets\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>/config\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>/test\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  /adapters\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  /controllers\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  /models\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  /policies\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  /services\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>/views\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>.gitignore\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>app.js\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Gruntfile.js\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>package.json\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>README.md\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Step 3:\u003C/strong>\nModify your \u003Ccode>Gruntfile.js\u003C/code>\u003C/p>\n\u003Cp>First add the following snippet at the end of your \u003Ccode>grunt.initConfig()\u003C/code> \u003Cem>(located around line 414 in my case)\u003C/em>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">mocha_istanbul\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  coverage\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    src\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'test'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#6A737D\">// the folder, not the files\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    options\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      coverageFolder\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'coverage'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      mask\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'**/*.spec.js'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      root\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'api/'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>And add the two following snippet right before the file ends: \u003Cem>(again around line 496 in my case)\u003C/em>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Adds \"grunt-mocha-istanbul\" npm task\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">grunt.\u003C/span>\u003Cspan style=\"color:#B392F0\">loadNpmTasks\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'grunt-mocha-istanbul'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Adding test task enabling \"grunt test\" command\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">grunt.\u003C/span>\u003Cspan style=\"color:#B392F0\">registerTask\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'test'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  'mocha_istanbul:coverage'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">]);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Step 4:\u003C/strong>\nCreate your first test\u003C/p>\n\u003Cp>For the sake of simplicity let’s create a HelloController and its test:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">/**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"> * Sails Controller: HelloController\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"> * File location: api/controllers/HelloController.js\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"> */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">module\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">exports\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  index\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">req\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">res\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    res.\u003C/span>\u003Cspan style=\"color:#B392F0\">send\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Hello World'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">/**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"> * Test File: Testing HelloController\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"> * File location: test/controllers/HelloController.spec.js\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"> */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> HelloController \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> require\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'../../api/controllers/HelloController'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    sinon \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> require\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'sinon'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    assert \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> require\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'assert'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">describe\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'The Hello Controller'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  describe\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'when we invoke the index action'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    it\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'should return hello world message'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // Mocking res.send() method by using a sinon spy\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> send \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sinon.\u003C/span>\u003Cspan style=\"color:#B392F0\">spy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // Executes controller action\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      HelloController.\u003C/span>\u003Cspan style=\"color:#B392F0\">index\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        'send'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: send\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // Asserts send() method was called and that it was called\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // with the correct arguments: 'Hello World'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      assert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(send.called);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      assert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(send.\u003C/span>\u003Cspan style=\"color:#B392F0\">calledWith\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Hello World'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Step 5:\u003C/strong>\nExecute test\u003C/p>\n\u003Cp>Execute the following command on your Terminal:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">grunt\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> test\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The feedback you will receive should be similar to the following:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Running\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"mocha_istanbul:coverage\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (mocha_istanbul) task\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  ․\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  1\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> passing\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (6ms)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">===================================================================\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Writing\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> coverage\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> object\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [/Users/scruz/Sites/sails-unit-test/coverage/coverage.json]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Writing\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> coverage\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> reports\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> at\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [/Users/scruz/Sites/sails-unit-test/coverage]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">===================================================================\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">========================\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Coverage\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> summary\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> =========================\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Statements\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   :\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 100%\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ( \u003C/span>\u003Cspan style=\"color:#9ECBFF\">2/2\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Branches\u003C/span>\u003Cspan style=\"color:#9ECBFF\">     :\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 100%\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ( \u003C/span>\u003Cspan style=\"color:#9ECBFF\">0/0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Functions\u003C/span>\u003Cspan style=\"color:#9ECBFF\">    :\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 100%\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ( \u003C/span>\u003Cspan style=\"color:#9ECBFF\">1/1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Lines\u003C/span>\u003Cspan style=\"color:#9ECBFF\">        :\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 100%\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ( \u003C/span>\u003Cspan style=\"color:#9ECBFF\">2/2\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">===================================================================\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">>>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Done. Check coverage folder.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Done,\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> without\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> errors.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Also by now you may have realized the \u003Ccode>/coverage\u003C/code> folder was generated on your application’s root directory. Open the following html file on your browser to see your current code coverage: \u003Ccode>/coverage/lcov-report/index.html\u003C/code>\u003C/p>\n\u003Cp>\u003Cstrong>And… we’re all done!\u003C/strong>\u003C/p>\n\u003Cp>I hope this helped you as much as it helped me!  Feel free to contact me with any questions.\u003C/p>\n\u003Cp>\u003Cstrong>Demo:\u003C/strong> a working code sample for what we have accomplished in this tutorial is available on my GitHub account:\n\u003Ca href=\"https://github.com/sergiocruz/sails-unit-test\" target=\"_blank\">\u003C/a>\u003Ca href=\"https://github.com/sergiocruz/sails-unit-test\">https://github.com/sergiocruz/sails-unit-test\u003C/a>\u003C/p>\n\u003Cp>Enjoy!\u003C/p>",{"headings":379,"localImagePaths":386,"remoteImagePaths":387,"frontmatter":388,"imagePaths":391},[380,383],{"depth":261,"slug":381,"text":382},"unit-testing-javascript-is-easy-they-said-it-only-takes-a-few-seconds-they-said","Unit testing JavaScript is easy they said. It only takes a few seconds they said.",{"depth":267,"slug":384,"text":385},"without-further-ado-lets-get-started","Without further ado, let’s get started:",[],[],{"title":367,"description":368,"date":389,"tags":390,"readingTime":252,"slug":364},["Date","2014-05-21T00:00:00.000Z"],[371,330,372],[],"2014-05-21-unit-test-sails.md","microservices-lessons",{"id":393,"data":395,"body":404,"filePath":405,"digest":406,"rendered":407,"legacyId":507},{"title":396,"description":397,"date":398,"tags":399,"draft":47,"author":251,"readingTime":403},"Microservices: Lessons from the Trenches","Real-world experiences and lessons learned from implementing microservices architecture at scale.",["Date","2023-12-28T00:00:00.000Z"],[400,401,402],"microservices","architecture","distributed-systems","7 min read","# Microservices: Lessons from the Trenches\n\nAfter several years of building and maintaining microservices architectures across different organizations, I've learned that the journey from monolith to microservices is rarely straightforward. Here are the real-world lessons, hard-won insights, and practical advice from implementing microservices at scale.\n\n## When Microservices Make Sense (And When They Don't)\n\n### The Right Time for Microservices\n\nMicroservices aren't a silver bullet. They solve specific problems and create others. Consider microservices when:\n\n- **Team scaling**: You have multiple teams working on the same codebase and coordination overhead is slowing development\n- **Technology diversity**: Different parts of your system have fundamentally different technical requirements\n- **Independent scaling**: Different components have vastly different scaling needs\n- **Organizational boundaries**: Conway's Law suggests your architecture will mirror your organization structure\n\n### When to Stick with the Monolith\n\nStay monolithic when:\n\n- **Small teams**: You have fewer than 8-10 engineers\n- **Uncertain domain boundaries**: You're still figuring out your business domain\n- **Simple use cases**: Your application doesn't have complex scaling or technology requirements\n- **Limited operational expertise**: You don't have the DevOps maturity to handle distributed systems\n\n## The Migration Strategy That Actually Works\n\n### Start with the Database\n\nMost \"microservices\" projects fail because they split the application but keep a shared database. This creates distributed monoliths that have all the complexity of microservices with none of the benefits.\n\n```sql\n-- Wrong: Shared database with foreign key constraints across services\nCREATE TABLE users (id, name, email);\nCREATE TABLE orders (id, user_id REFERENCES users(id), amount);\n\n-- Right: Each service owns its data\n-- User Service Database\nCREATE TABLE users (id, name, email);\n\n-- Order Service Database  \nCREATE TABLE orders (id, user_id, amount); -- No foreign key!\n```\n\n### Strangler Fig Pattern\n\nGradually migrate functionality rather than attempting a big-bang rewrite:\n\n```javascript\n// API Gateway routing during migration\nconst routes = [\n  {\n    path: '/api/users/*',\n    service: 'user-service' // New microservice\n  },\n  {\n    path: '/api/orders/*', \n    service: 'order-service' // New microservice\n  },\n  {\n    path: '/api/*',\n    service: 'legacy-monolith' // Everything else\n  }\n]\n```\n\n### Extract Services Based on Business Capabilities\n\nDon't split along technical lines. Split along business capabilities:\n\n```\n❌ Bad: Technical splitting\n- Database Service\n- API Service  \n- UI Service\n\n✅ Good: Business capability splitting\n- User Management Service\n- Order Processing Service\n- Inventory Service\n- Notification Service\n```\n\n## Communication Patterns That Scale\n\n### Synchronous vs Asynchronous\n\nChoose your communication pattern carefully:\n\n**Synchronous (HTTP/gRPC)** for:\n- Real-time queries\n- Simple request-response patterns\n- When you need immediate consistency\n\n**Asynchronous (Message queues)** for:\n- Event-driven workflows\n- Eventual consistency scenarios\n- High-throughput scenarios\n\n### Event-Driven Architecture\n\nImplement event sourcing for complex workflows:\n\n```javascript\n// Order Service publishes events\nclass OrderService {\n  async createOrder(orderData) {\n    const order = await this.repository.save(orderData)\n    \n    // Publish event for other services\n    await this.eventBus.publish('order.created', {\n      orderId: order.id,\n      userId: order.userId,\n      amount: order.amount,\n      timestamp: new Date()\n    })\n    \n    return order\n  }\n}\n\n// Inventory Service reacts to events\nclass InventoryService {\n  async handleOrderCreated(event) {\n    await this.reserveItems(event.orderId, event.items)\n    \n    await this.eventBus.publish('inventory.reserved', {\n      orderId: event.orderId,\n      items: event.items\n    })\n  }\n}\n```\n\n### Circuit Breaker Pattern\n\nImplement circuit breakers to prevent cascade failures:\n\n```javascript\nclass CircuitBreaker {\n  constructor(threshold = 5, timeout = 60000) {\n    this.threshold = threshold\n    this.timeout = timeout\n    this.failureCount = 0\n    this.state = 'CLOSED' // CLOSED, OPEN, HALF_OPEN\n    this.nextAttempt = Date.now()\n  }\n  \n  async call(fn) {\n    if (this.state === 'OPEN') {\n      if (Date.now() \u003C this.nextAttempt) {\n        throw new Error('Circuit breaker is OPEN')\n      }\n      this.state = 'HALF_OPEN'\n    }\n    \n    try {\n      const result = await fn()\n      this.onSuccess()\n      return result\n    } catch (error) {\n      this.onFailure()\n      throw error\n    }\n  }\n  \n  onSuccess() {\n    this.failureCount = 0\n    this.state = 'CLOSED'\n  }\n  \n  onFailure() {\n    this.failureCount++\n    if (this.failureCount >= this.threshold) {\n      this.state = 'OPEN'\n      this.nextAttempt = Date.now() + this.timeout\n    }\n  }\n}\n```\n\n## Data Management Challenges\n\n### Distributed Transactions\n\nAvoid distributed transactions. Use the Saga pattern instead:\n\n```javascript\n// Order processing saga\nclass OrderSaga {\n  async execute(orderData) {\n    const compensations = []\n    \n    try {\n      // Step 1: Reserve inventory\n      const reservation = await this.inventoryService.reserve(orderData.items)\n      compensations.push(() => this.inventoryService.release(reservation.id))\n      \n      // Step 2: Process payment\n      const payment = await this.paymentService.charge(orderData.payment)\n      compensations.push(() => this.paymentService.refund(payment.id))\n      \n      // Step 3: Create order\n      const order = await this.orderService.create(orderData)\n      \n      return order\n    } catch (error) {\n      // Execute compensations in reverse order\n      for (const compensation of compensations.reverse()) {\n        try {\n          await compensation()\n        } catch (compensationError) {\n          console.error('Compensation failed:', compensationError)\n        }\n      }\n      throw error\n    }\n  }\n}\n```\n\n### Data Consistency Strategies\n\n**Eventual Consistency**: Accept that data won't always be immediately consistent across services.\n\n```javascript\n// Event-driven eventual consistency\nclass UserService {\n  async updateUser(userId, userData) {\n    const user = await this.repository.update(userId, userData)\n    \n    // Other services will eventually sync\n    await this.eventBus.publish('user.updated', {\n      userId: user.id,\n      email: user.email,\n      name: user.name\n    })\n    \n    return user\n  }\n}\n\nclass OrderService {\n  async handleUserUpdated(event) {\n    // Update local user cache\n    await this.userCache.update(event.userId, {\n      email: event.email,\n      name: event.name\n    })\n  }\n}\n```\n\n## Operational Complexity\n\n### Observability is Critical\n\nYou can't manage what you can't see. Implement comprehensive observability:\n\n```javascript\n// Distributed tracing\nconst opentelemetry = require('@opentelemetry/api')\n\nclass UserService {\n  async getUser(userId) {\n    const span = opentelemetry.trace.getActiveSpan()\n    span?.setAttributes({\n      'user.id': userId,\n      'service.name': 'user-service'\n    })\n    \n    try {\n      const user = await this.repository.findById(userId)\n      span?.setStatus({ code: opentelemetry.SpanStatusCode.OK })\n      return user\n    } catch (error) {\n      span?.setStatus({ \n        code: opentelemetry.SpanStatusCode.ERROR,\n        message: error.message \n      })\n      throw error\n    }\n  }\n}\n```\n\n### Service Mesh for Cross-Cutting Concerns\n\nUse service mesh (Istio, Linkerd) for:\n- Service-to-service authentication\n- Traffic management\n- Observability\n- Security policies\n\n```yaml\n# Istio virtual service for canary deployment\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: order-service\nspec:\n  hosts:\n  - order-service\n  http:\n  - match:\n    - headers:\n        canary:\n          exact: \"true\"\n    route:\n    - destination:\n        host: order-service\n        subset: v2\n  - route:\n    - destination:\n        host: order-service\n        subset: v1\n      weight: 90\n    - destination:\n        host: order-service\n        subset: v2\n      weight: 10\n```\n\n## Deployment and DevOps\n\n### CI/CD Per Service\n\nEach service should have its own deployment pipeline:\n\n```yaml\n# .github/workflows/user-service.yml\nname: User Service CI/CD\non:\n  push:\n    paths:\n      - 'services/user-service/**'\n      \njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run tests\n        run: |\n          cd services/user-service\n          npm test\n          \n  deploy:\n    needs: test\n    runs-on: ubuntu-latest\n    steps:\n      - name: Deploy to Kubernetes\n        run: |\n          kubectl apply -f services/user-service/k8s/\n```\n\n### Database Migrations\n\nHandle database migrations carefully in microservices:\n\n```javascript\n// Backward-compatible migrations\n// Phase 1: Add new column (optional)\nALTER TABLE users ADD COLUMN phone_number VARCHAR(20);\n\n// Phase 2: Deploy application code that writes to both columns\n\n// Phase 3: Migrate existing data\nUPDATE users SET phone_number = legacy_phone WHERE phone_number IS NULL;\n\n// Phase 4: Make new column required\nALTER TABLE users ALTER COLUMN phone_number SET NOT NULL;\n\n// Phase 5: Remove old column\nALTER TABLE users DROP COLUMN legacy_phone;\n```\n\n## Testing Strategies\n\n### Contract Testing\n\nUse contract testing to ensure service compatibility:\n\n```javascript\n// User service contract\nconst userServiceContract = {\n  request: {\n    method: 'GET',\n    path: '/users/123'\n  },\n  response: {\n    status: 200,\n    body: {\n      id: '123',\n      name: 'John Doe',\n      email: 'john@example.com'\n    }\n  }\n}\n\n// Order service consumer test\ndescribe('User Service Integration', () => {\n  it('should get user details', async () => {\n    // Mock based on contract\n    nock('http://user-service')\n      .get('/users/123')\n      .reply(200, userServiceContract.response.body)\n      \n    const user = await userClient.getUser('123')\n    expect(user.name).toBe('John Doe')\n  })\n})\n```\n\n### Integration Testing\n\nTest service interactions with test containers:\n\n```javascript\n// Integration test with real dependencies\ndescribe('Order Service Integration', () => {\n  let postgres, redis, userService\n  \n  beforeAll(async () => {\n    postgres = await new PostgreSqlContainer().start()\n    redis = await new RedisContainer().start()\n    userService = await new GenericContainer('user-service').start()\n  })\n  \n  afterAll(async () => {\n    await postgres.stop()\n    await redis.stop()\n    await userService.stop()\n  })\n  \n  it('should create order with user validation', async () => {\n    // Test with real dependencies\n  })\n})\n```\n\n## Common Pitfalls and How to Avoid Them\n\n### 1. Distributed Monolith\n\n**Problem**: Services that are too tightly coupled\n\n**Solution**: Design for independence. Each service should be deployable separately.\n\n### 2. Premature Optimization\n\n**Problem**: Starting with microservices from day one\n\n**Solution**: Start with a modular monolith, extract services when needed.\n\n### 3. Shared Databases\n\n**Problem**: Services sharing the same database\n\n**Solution**: Database per service. Use events for data synchronization.\n\n### 4. Synchronous Everything\n\n**Problem**: Using HTTP for all service communication\n\n**Solution**: Use async messaging for non-critical paths.\n\n### 5. Ignoring Network Partitions\n\n**Problem**: Not handling network failures gracefully\n\n**Solution**: Implement circuit breakers, timeouts, and bulkheads.\n\n## Conclusion\n\nMicroservices can solve real problems, but they're not free. They trade code complexity for operational complexity. Before adopting microservices, ensure you have:\n\n1. **Clear business justification**: Teams, scaling, or technology diversity needs\n2. **Operational maturity**: DevOps capabilities, monitoring, and automation\n3. **Domain understanding**: Clear service boundaries based on business capabilities\n4. **Gradual migration plan**: Strangler fig pattern rather than big-bang rewrite\n\nRemember: a well-designed monolith is better than a poorly designed microservices architecture. Start simple, and evolve when you have clear evidence that microservices will solve your specific problems.\n\nThe goal isn't to build microservices—it's to build systems that enable your teams to deliver value quickly and reliably. Sometimes that's a monolith, sometimes it's microservices, and often it's something in between.","src/content/blog/microservices-lessons.md","563ed504c2ba5281",{"html":408,"metadata":409},"\u003Ch1 id=\"microservices-lessons-from-the-trenches\">Microservices: Lessons from the Trenches\u003C/h1>\n\u003Cp>After several years of building and maintaining microservices architectures across different organizations, I’ve learned that the journey from monolith to microservices is rarely straightforward. Here are the real-world lessons, hard-won insights, and practical advice from implementing microservices at scale.\u003C/p>\n\u003Ch2 id=\"when-microservices-make-sense-and-when-they-dont\">When Microservices Make Sense (And When They Don’t)\u003C/h2>\n\u003Ch3 id=\"the-right-time-for-microservices\">The Right Time for Microservices\u003C/h3>\n\u003Cp>Microservices aren’t a silver bullet. They solve specific problems and create others. Consider microservices when:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Team scaling\u003C/strong>: You have multiple teams working on the same codebase and coordination overhead is slowing development\u003C/li>\n\u003Cli>\u003Cstrong>Technology diversity\u003C/strong>: Different parts of your system have fundamentally different technical requirements\u003C/li>\n\u003Cli>\u003Cstrong>Independent scaling\u003C/strong>: Different components have vastly different scaling needs\u003C/li>\n\u003Cli>\u003Cstrong>Organizational boundaries\u003C/strong>: Conway’s Law suggests your architecture will mirror your organization structure\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"when-to-stick-with-the-monolith\">When to Stick with the Monolith\u003C/h3>\n\u003Cp>Stay monolithic when:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Small teams\u003C/strong>: You have fewer than 8-10 engineers\u003C/li>\n\u003Cli>\u003Cstrong>Uncertain domain boundaries\u003C/strong>: You’re still figuring out your business domain\u003C/li>\n\u003Cli>\u003Cstrong>Simple use cases\u003C/strong>: Your application doesn’t have complex scaling or technology requirements\u003C/li>\n\u003Cli>\u003Cstrong>Limited operational expertise\u003C/strong>: You don’t have the DevOps maturity to handle distributed systems\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"the-migration-strategy-that-actually-works\">The Migration Strategy That Actually Works\u003C/h2>\n\u003Ch3 id=\"start-with-the-database\">Start with the Database\u003C/h3>\n\u003Cp>Most “microservices” projects fail because they split the application but keep a shared database. This creates distributed monoliths that have all the complexity of microservices with none of the benefits.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Wrong: Shared database with foreign key constraints across services\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">CREATE\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#B392F0\"> users\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (id, \u003C/span>\u003Cspan style=\"color:#F97583\">name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, email);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">CREATE\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#B392F0\"> orders\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (id, user_id \u003C/span>\u003Cspan style=\"color:#F97583\">REFERENCES\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users(id), amount);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Right: Each service owns its data\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- User Service Database\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">CREATE\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#B392F0\"> users\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (id, \u003C/span>\u003Cspan style=\"color:#F97583\">name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, email);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Order Service Database  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">CREATE\u003C/span>\u003Cspan style=\"color:#F97583\"> TABLE\u003C/span>\u003Cspan style=\"color:#B392F0\"> orders\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (id, user_id, amount); \u003C/span>\u003Cspan style=\"color:#6A737D\">-- No foreign key!\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"strangler-fig-pattern\">Strangler Fig Pattern\u003C/h3>\n\u003Cp>Gradually migrate functionality rather than attempting a big-bang rewrite:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// API Gateway routing during migration\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> routes\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    path: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'/api/users/*'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    service: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'user-service'\u003C/span>\u003Cspan style=\"color:#6A737D\"> // New microservice\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    path: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'/api/orders/*'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    service: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'order-service'\u003C/span>\u003Cspan style=\"color:#6A737D\"> // New microservice\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    path: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'/api/*'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    service: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'legacy-monolith'\u003C/span>\u003Cspan style=\"color:#6A737D\"> // Everything else\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"extract-services-based-on-business-capabilities\">Extract Services Based on Business Capabilities\u003C/h3>\n\u003Cp>Don’t split along technical lines. Split along business capabilities:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>❌ Bad: Technical splitting\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- Database Service\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- API Service  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- UI Service\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>✅ Good: Business capability splitting\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- User Management Service\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- Order Processing Service\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- Inventory Service\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>- Notification Service\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"communication-patterns-that-scale\">Communication Patterns That Scale\u003C/h2>\n\u003Ch3 id=\"synchronous-vs-asynchronous\">Synchronous vs Asynchronous\u003C/h3>\n\u003Cp>Choose your communication pattern carefully:\u003C/p>\n\u003Cp>\u003Cstrong>Synchronous (HTTP/gRPC)\u003C/strong> for:\u003C/p>\n\u003Cul>\n\u003Cli>Real-time queries\u003C/li>\n\u003Cli>Simple request-response patterns\u003C/li>\n\u003Cli>When you need immediate consistency\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Asynchronous (Message queues)\u003C/strong> for:\u003C/p>\n\u003Cul>\n\u003Cli>Event-driven workflows\u003C/li>\n\u003Cli>Eventual consistency scenarios\u003C/li>\n\u003Cli>High-throughput scenarios\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"event-driven-architecture\">Event-Driven Architecture\u003C/h3>\n\u003Cp>Implement event sourcing for complex workflows:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Order Service publishes events\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> OrderService\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  async\u003C/span>\u003Cspan style=\"color:#B392F0\"> createOrder\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">orderData\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> order\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.repository.\u003C/span>\u003Cspan style=\"color:#B392F0\">save\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(orderData)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Publish event for other services\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    await\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.eventBus.\u003C/span>\u003Cspan style=\"color:#B392F0\">publish\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'order.created'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      orderId: order.id,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      userId: order.userId,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      amount: order.amount,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      timestamp: \u003C/span>\u003Cspan style=\"color:#F97583\">new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Date\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> order\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Inventory Service reacts to events\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> InventoryService\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  async\u003C/span>\u003Cspan style=\"color:#B392F0\"> handleOrderCreated\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">event\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    await\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">reserveItems\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(event.orderId, event.items)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    await\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.eventBus.\u003C/span>\u003Cspan style=\"color:#B392F0\">publish\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'inventory.reserved'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      orderId: event.orderId,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      items: event.items\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"circuit-breaker-pattern\">Circuit Breaker Pattern\u003C/h3>\n\u003Cp>Implement circuit breakers to prevent cascade failures:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> CircuitBreaker\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">threshold\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">timeout\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 60000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.threshold \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> threshold\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.timeout \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> timeout\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.failureCount \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.state \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'CLOSED'\u003C/span>\u003Cspan style=\"color:#6A737D\"> // CLOSED, OPEN, HALF_OPEN\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.nextAttempt \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Date.\u003C/span>\u003Cspan style=\"color:#B392F0\">now\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  async\u003C/span>\u003Cspan style=\"color:#B392F0\"> call\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">fn\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.state \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'OPEN'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (Date.\u003C/span>\u003Cspan style=\"color:#B392F0\">now\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.nextAttempt) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        throw\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Circuit breaker is OPEN'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.state \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'HALF_OPEN'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> result\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> fn\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">onSuccess\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> result\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    } \u003C/span>\u003Cspan style=\"color:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (error) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">onFailure\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      throw\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  onSuccess\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.failureCount \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.state \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'CLOSED'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  onFailure\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.failureCount\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.failureCount \u003C/span>\u003Cspan style=\"color:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.threshold) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.state \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'OPEN'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.nextAttempt \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Date.\u003C/span>\u003Cspan style=\"color:#B392F0\">now\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.timeout\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"data-management-challenges\">Data Management Challenges\u003C/h2>\n\u003Ch3 id=\"distributed-transactions\">Distributed Transactions\u003C/h3>\n\u003Cp>Avoid distributed transactions. Use the Saga pattern instead:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Order processing saga\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> OrderSaga\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  async\u003C/span>\u003Cspan style=\"color:#B392F0\"> execute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">orderData\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> compensations\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> []\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // Step 1: Reserve inventory\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> reservation\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.inventoryService.\u003C/span>\u003Cspan style=\"color:#B392F0\">reserve\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(orderData.items)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      compensations.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.inventoryService.\u003C/span>\u003Cspan style=\"color:#B392F0\">release\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(reservation.id))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // Step 2: Process payment\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> payment\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.paymentService.\u003C/span>\u003Cspan style=\"color:#B392F0\">charge\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(orderData.payment)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      compensations.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.paymentService.\u003C/span>\u003Cspan style=\"color:#B392F0\">refund\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(payment.id))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // Step 3: Create order\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> order\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.orderService.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(orderData)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> order\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    } \u003C/span>\u003Cspan style=\"color:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (error) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // Execute compensations in reverse order\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> compensation\u003C/span>\u003Cspan style=\"color:#F97583\"> of\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> compensations.\u003C/span>\u003Cspan style=\"color:#B392F0\">reverse\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">          await\u003C/span>\u003Cspan style=\"color:#B392F0\"> compensation\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        } \u003C/span>\u003Cspan style=\"color:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (compensationError) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          console.\u003C/span>\u003Cspan style=\"color:#B392F0\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Compensation failed:'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, compensationError)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      throw\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"data-consistency-strategies\">Data Consistency Strategies\u003C/h3>\n\u003Cp>\u003Cstrong>Eventual Consistency\u003C/strong>: Accept that data won’t always be immediately consistent across services.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Event-driven eventual consistency\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> UserService\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  async\u003C/span>\u003Cspan style=\"color:#B392F0\"> updateUser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">userId\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">userData\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> user\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.repository.\u003C/span>\u003Cspan style=\"color:#B392F0\">update\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(userId, userData)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Other services will eventually sync\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    await\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.eventBus.\u003C/span>\u003Cspan style=\"color:#B392F0\">publish\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'user.updated'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      userId: user.id,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      email: user.email,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      name: user.name\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> user\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> OrderService\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  async\u003C/span>\u003Cspan style=\"color:#B392F0\"> handleUserUpdated\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">event\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Update local user cache\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    await\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.userCache.\u003C/span>\u003Cspan style=\"color:#B392F0\">update\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(event.userId, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      email: event.email,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      name: event.name\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"operational-complexity\">Operational Complexity\u003C/h2>\n\u003Ch3 id=\"observability-is-critical\">Observability is Critical\u003C/h3>\n\u003Cp>You can’t manage what you can’t see. Implement comprehensive observability:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Distributed tracing\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> opentelemetry\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> require\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'@opentelemetry/api'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> UserService\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  async\u003C/span>\u003Cspan style=\"color:#B392F0\"> getUser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">userId\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> span\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> opentelemetry.trace.\u003C/span>\u003Cspan style=\"color:#B392F0\">getActiveSpan\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    span?.\u003C/span>\u003Cspan style=\"color:#B392F0\">setAttributes\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      'user.id'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: userId,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      'service.name'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'user-service'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> user\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.repository.\u003C/span>\u003Cspan style=\"color:#B392F0\">findById\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(userId)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      span?.\u003C/span>\u003Cspan style=\"color:#B392F0\">setStatus\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ code: opentelemetry.SpanStatusCode.\u003C/span>\u003Cspan style=\"color:#79B8FF\">OK\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> user\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    } \u003C/span>\u003Cspan style=\"color:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (error) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      span?.\u003C/span>\u003Cspan style=\"color:#B392F0\">setStatus\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        code: opentelemetry.SpanStatusCode.\u003C/span>\u003Cspan style=\"color:#79B8FF\">ERROR\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        message: error.message \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      throw\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> error\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"service-mesh-for-cross-cutting-concerns\">Service Mesh for Cross-Cutting Concerns\u003C/h3>\n\u003Cp>Use service mesh (Istio, Linkerd) for:\u003C/p>\n\u003Cul>\n\u003Cli>Service-to-service authentication\u003C/li>\n\u003Cli>Traffic management\u003C/li>\n\u003Cli>Observability\u003C/li>\n\u003Cli>Security policies\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"yaml\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Istio virtual service for canary deployment\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">apiVersion\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">networking.istio.io/v1alpha3\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">kind\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">VirtualService\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">metadata\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">order-service\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">spec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  hosts\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">order-service\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  http\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  - \u003C/span>\u003Cspan style=\"color:#85E89D\">match\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    - \u003C/span>\u003Cspan style=\"color:#85E89D\">headers\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">        canary\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">          exact\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"true\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    route\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    - \u003C/span>\u003Cspan style=\"color:#85E89D\">destination\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">        host\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">order-service\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">        subset\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">v2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  - \u003C/span>\u003Cspan style=\"color:#85E89D\">route\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    - \u003C/span>\u003Cspan style=\"color:#85E89D\">destination\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">        host\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">order-service\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">        subset\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">v1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">      weight\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">90\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    - \u003C/span>\u003Cspan style=\"color:#85E89D\">destination\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">        host\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">order-service\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">        subset\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">v2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">      weight\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"deployment-and-devops\">Deployment and DevOps\u003C/h2>\n\u003Ch3 id=\"cicd-per-service\">CI/CD Per Service\u003C/h3>\n\u003Cp>Each service should have its own deployment pipeline:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"yaml\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># .github/workflows/user-service.yml\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">User Service CI/CD\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">on\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    paths\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'services/user-service/**'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">jobs\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  test\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    runs-on\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">ubuntu-latest\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    steps\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#85E89D\">uses\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">actions/checkout@v2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#85E89D\">name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">Run tests\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">        run\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">          cd services/user-service\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">          npm test\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">          \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  deploy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    needs\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">test\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    runs-on\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">ubuntu-latest\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    steps\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#85E89D\">name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">Deploy to Kubernetes\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">        run\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#F97583\">|\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">          kubectl apply -f services/user-service/k8s/\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"database-migrations\">Database Migrations\u003C/h3>\n\u003Cp>Handle database migrations carefully in microservices:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Backward-compatible migrations\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Phase 1: Add new column (optional)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">ALTER\u003C/span>\u003Cspan style=\"color:#79B8FF\"> TABLE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#79B8FF\">ADD\u003C/span>\u003Cspan style=\"color:#79B8FF\"> COLUMN\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> phone_number \u003C/span>\u003Cspan style=\"color:#B392F0\">VARCHAR\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">20\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Phase 2: Deploy application code that writes to both columns\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Phase 3: Migrate existing data\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">UPDATE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#79B8FF\">SET\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> phone_number \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> legacy_phone \u003C/span>\u003Cspan style=\"color:#79B8FF\">WHERE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> phone_number \u003C/span>\u003Cspan style=\"color:#79B8FF\">IS\u003C/span>\u003Cspan style=\"color:#79B8FF\"> NULL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Phase 4: Make new column required\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">ALTER\u003C/span>\u003Cspan style=\"color:#79B8FF\"> TABLE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#79B8FF\">ALTER\u003C/span>\u003Cspan style=\"color:#79B8FF\"> COLUMN\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> phone_number \u003C/span>\u003Cspan style=\"color:#79B8FF\">SET\u003C/span>\u003Cspan style=\"color:#79B8FF\"> NOT\u003C/span>\u003Cspan style=\"color:#79B8FF\"> NULL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Phase 5: Remove old column\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">ALTER\u003C/span>\u003Cspan style=\"color:#79B8FF\"> TABLE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#79B8FF\">DROP\u003C/span>\u003Cspan style=\"color:#79B8FF\"> COLUMN\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> legacy_phone;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"testing-strategies\">Testing Strategies\u003C/h2>\n\u003Ch3 id=\"contract-testing\">Contract Testing\u003C/h3>\n\u003Cp>Use contract testing to ensure service compatibility:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// User service contract\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> userServiceContract\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  request: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    method: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'GET'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    path: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'/users/123'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  response: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    status: \u003C/span>\u003Cspan style=\"color:#79B8FF\">200\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    body: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      id: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'123'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      name: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'John Doe'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      email: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'john@example.com'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Order service consumer test\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">describe\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'User Service Integration'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  it\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'should get user details'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Mock based on contract\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    nock\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'http://user-service'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      .\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'/users/123'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      .\u003C/span>\u003Cspan style=\"color:#B392F0\">reply\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">200\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, userServiceContract.response.body)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> user\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> userClient.\u003C/span>\u003Cspan style=\"color:#B392F0\">getUser\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'123'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(user.name).\u003C/span>\u003Cspan style=\"color:#B392F0\">toBe\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'John Doe'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"integration-testing\">Integration Testing\u003C/h3>\n\u003Cp>Test service interactions with test containers:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Integration test with real dependencies\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">describe\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Order Service Integration'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> postgres, redis, userService\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  beforeAll\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    postgres \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> PostgreSqlContainer\u003C/span>\u003Cspan style=\"color:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#B392F0\">start\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    redis \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> RedisContainer\u003C/span>\u003Cspan style=\"color:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#B392F0\">start\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    userService \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> GenericContainer\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'user-service'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">).\u003C/span>\u003Cspan style=\"color:#B392F0\">start\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  afterAll\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> postgres.\u003C/span>\u003Cspan style=\"color:#B392F0\">stop\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> redis.\u003C/span>\u003Cspan style=\"color:#B392F0\">stop\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> userService.\u003C/span>\u003Cspan style=\"color:#B392F0\">stop\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  it\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'should create order with user validation'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Test with real dependencies\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"common-pitfalls-and-how-to-avoid-them\">Common Pitfalls and How to Avoid Them\u003C/h2>\n\u003Ch3 id=\"1-distributed-monolith\">1. Distributed Monolith\u003C/h3>\n\u003Cp>\u003Cstrong>Problem\u003C/strong>: Services that are too tightly coupled\u003C/p>\n\u003Cp>\u003Cstrong>Solution\u003C/strong>: Design for independence. Each service should be deployable separately.\u003C/p>\n\u003Ch3 id=\"2-premature-optimization\">2. Premature Optimization\u003C/h3>\n\u003Cp>\u003Cstrong>Problem\u003C/strong>: Starting with microservices from day one\u003C/p>\n\u003Cp>\u003Cstrong>Solution\u003C/strong>: Start with a modular monolith, extract services when needed.\u003C/p>\n\u003Ch3 id=\"3-shared-databases\">3. Shared Databases\u003C/h3>\n\u003Cp>\u003Cstrong>Problem\u003C/strong>: Services sharing the same database\u003C/p>\n\u003Cp>\u003Cstrong>Solution\u003C/strong>: Database per service. Use events for data synchronization.\u003C/p>\n\u003Ch3 id=\"4-synchronous-everything\">4. Synchronous Everything\u003C/h3>\n\u003Cp>\u003Cstrong>Problem\u003C/strong>: Using HTTP for all service communication\u003C/p>\n\u003Cp>\u003Cstrong>Solution\u003C/strong>: Use async messaging for non-critical paths.\u003C/p>\n\u003Ch3 id=\"5-ignoring-network-partitions\">5. Ignoring Network Partitions\u003C/h3>\n\u003Cp>\u003Cstrong>Problem\u003C/strong>: Not handling network failures gracefully\u003C/p>\n\u003Cp>\u003Cstrong>Solution\u003C/strong>: Implement circuit breakers, timeouts, and bulkheads.\u003C/p>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>Microservices can solve real problems, but they’re not free. They trade code complexity for operational complexity. Before adopting microservices, ensure you have:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Clear business justification\u003C/strong>: Teams, scaling, or technology diversity needs\u003C/li>\n\u003Cli>\u003Cstrong>Operational maturity\u003C/strong>: DevOps capabilities, monitoring, and automation\u003C/li>\n\u003Cli>\u003Cstrong>Domain understanding\u003C/strong>: Clear service boundaries based on business capabilities\u003C/li>\n\u003Cli>\u003Cstrong>Gradual migration plan\u003C/strong>: Strangler fig pattern rather than big-bang rewrite\u003C/li>\n\u003C/ol>\n\u003Cp>Remember: a well-designed monolith is better than a poorly designed microservices architecture. Start simple, and evolve when you have clear evidence that microservices will solve your specific problems.\u003C/p>\n\u003Cp>The goal isn’t to build microservices—it’s to build systems that enable your teams to deliver value quickly and reliably. Sometimes that’s a monolith, sometimes it’s microservices, and often it’s something in between.\u003C/p>",{"headings":410,"localImagePaths":501,"remoteImagePaths":502,"frontmatter":503,"imagePaths":506},[411,413,416,419,422,425,428,431,434,437,440,443,446,449,452,455,458,461,464,467,470,473,476,479,482,485,488,491,494,497,500],{"depth":261,"slug":412,"text":396},"microservices-lessons-from-the-trenches",{"depth":29,"slug":414,"text":415},"when-microservices-make-sense-and-when-they-dont","When Microservices Make Sense (And When They Don’t)",{"depth":267,"slug":417,"text":418},"the-right-time-for-microservices","The Right Time for Microservices",{"depth":267,"slug":420,"text":421},"when-to-stick-with-the-monolith","When to Stick with the Monolith",{"depth":29,"slug":423,"text":424},"the-migration-strategy-that-actually-works","The Migration Strategy That Actually Works",{"depth":267,"slug":426,"text":427},"start-with-the-database","Start with the Database",{"depth":267,"slug":429,"text":430},"strangler-fig-pattern","Strangler Fig Pattern",{"depth":267,"slug":432,"text":433},"extract-services-based-on-business-capabilities","Extract Services Based on Business Capabilities",{"depth":29,"slug":435,"text":436},"communication-patterns-that-scale","Communication Patterns That Scale",{"depth":267,"slug":438,"text":439},"synchronous-vs-asynchronous","Synchronous vs Asynchronous",{"depth":267,"slug":441,"text":442},"event-driven-architecture","Event-Driven Architecture",{"depth":267,"slug":444,"text":445},"circuit-breaker-pattern","Circuit Breaker Pattern",{"depth":29,"slug":447,"text":448},"data-management-challenges","Data Management Challenges",{"depth":267,"slug":450,"text":451},"distributed-transactions","Distributed Transactions",{"depth":267,"slug":453,"text":454},"data-consistency-strategies","Data Consistency Strategies",{"depth":29,"slug":456,"text":457},"operational-complexity","Operational Complexity",{"depth":267,"slug":459,"text":460},"observability-is-critical","Observability is Critical",{"depth":267,"slug":462,"text":463},"service-mesh-for-cross-cutting-concerns","Service Mesh for Cross-Cutting Concerns",{"depth":29,"slug":465,"text":466},"deployment-and-devops","Deployment and DevOps",{"depth":267,"slug":468,"text":469},"cicd-per-service","CI/CD Per Service",{"depth":267,"slug":471,"text":472},"database-migrations","Database Migrations",{"depth":29,"slug":474,"text":475},"testing-strategies","Testing Strategies",{"depth":267,"slug":477,"text":478},"contract-testing","Contract Testing",{"depth":267,"slug":480,"text":481},"integration-testing","Integration Testing",{"depth":29,"slug":483,"text":484},"common-pitfalls-and-how-to-avoid-them","Common Pitfalls and How to Avoid Them",{"depth":267,"slug":486,"text":487},"1-distributed-monolith","1. Distributed Monolith",{"depth":267,"slug":489,"text":490},"2-premature-optimization","2. Premature Optimization",{"depth":267,"slug":492,"text":493},"3-shared-databases","3. Shared Databases",{"depth":267,"slug":495,"text":496},"4-synchronous-everything","4. Synchronous Everything",{"depth":267,"slug":498,"text":499},"5-ignoring-network-partitions","5. Ignoring Network Partitions",{"depth":29,"slug":313,"text":314},[],[],{"title":396,"description":397,"date":504,"tags":505,"readingTime":403},["Date","2023-12-28T00:00:00.000Z"],[400,401,402],[],"microservices-lessons.md",{"id":89,"data":509,"body":519,"filePath":520,"digest":521,"rendered":522,"legacyId":113},{"title":510,"description":511,"date":512,"tags":513,"draft":47,"author":251,"readingTime":518},"Modern React Patterns for 2024","Exploring the latest React patterns and best practices that are shaping how we build applications today.",["Date","2024-01-10T00:00:00.000Z"],[514,515,516,517],"react","javascript","frontend","patterns","8 min read","# Modern React Patterns for 2024\n\nReact continues to evolve rapidly, and with it, the patterns and best practices that define how we build modern applications. As we move through 2024, several key patterns have emerged that are shaping the future of React development. Let's explore these patterns and understand when and how to apply them effectively.\n\n## Server Components: The Game Changer\n\nReact Server Components represent one of the most significant shifts in how we think about React applications. They allow us to render components on the server, reducing the amount of JavaScript sent to the client.\n\n### Key Benefits\n\n- **Reduced Bundle Size**: Server components don't add to your client-side JavaScript bundle\n- **Direct Database Access**: Fetch data directly in your components without API routes\n- **Improved Performance**: Faster initial page loads and better Core Web Vitals\n\n### Example Pattern\n\n```jsx\n// app/posts/page.js (Server Component)\nimport { getPosts } from '@/lib/database'\nimport PostList from './PostList'\n\nexport default async function PostsPage() {\n  const posts = await getPosts() // Direct database access\n  \n  return (\n    \u003Cdiv>\n      \u003Ch1>Latest Posts\u003C/h1>\n      \u003CPostList posts={posts} />\n    \u003C/div>\n  )\n}\n```\n\n## Concurrent Features and Suspense\n\nReact's concurrent features, including Suspense boundaries and streaming, enable better user experiences through progressive loading.\n\n### Suspense for Data Fetching\n\n```jsx\nimport { Suspense } from 'react'\nimport PostList from './PostList'\nimport PostSkeleton from './PostSkeleton'\n\nfunction App() {\n  return (\n    \u003CSuspense fallback={\u003CPostSkeleton />}>\n      \u003CPostList />\n    \u003C/Suspense>\n  )\n}\n```\n\n### Error Boundaries with Suspense\n\n```jsx\nimport { ErrorBoundary } from 'react-error-boundary'\n\nfunction ErrorFallback({error, resetErrorBoundary}) {\n  return (\n    \u003Cdiv role=\"alert\">\n      \u003Ch2>Something went wrong:\u003C/h2>\n      \u003Cpre>{error.message}\u003C/pre>\n      \u003Cbutton onClick={resetErrorBoundary}>Try again\u003C/button>\n    \u003C/div>\n  )\n}\n\nfunction App() {\n  return (\n    \u003CErrorBoundary FallbackComponent={ErrorFallback}>\n      \u003CSuspense fallback={\u003CLoading />}>\n        \u003CDataComponent />\n      \u003C/Suspense>\n    \u003C/ErrorBoundary>\n  )\n}\n```\n\n## Advanced Hook Patterns\n\n### Custom Hooks for Data Fetching\n\n```jsx\nfunction usePost(id) {\n  const [post, setPost] = useState(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(null)\n  \n  useEffect(() => {\n    async function fetchPost() {\n      try {\n        setLoading(true)\n        const response = await fetch(`/api/posts/${id}`)\n        if (!response.ok) throw new Error('Failed to fetch')\n        const postData = await response.json()\n        setPost(postData)\n      } catch (err) {\n        setError(err.message)\n      } finally {\n        setLoading(false)\n      }\n    }\n    \n    fetchPost()\n  }, [id])\n  \n  return { post, loading, error }\n}\n```\n\n### Compound Component Pattern\n\n```jsx\nfunction Modal({ children, onClose }) {\n  return (\n    \u003Cdiv className=\"modal-overlay\" onClick={onClose}>\n      \u003Cdiv className=\"modal-content\" onClick={e => e.stopPropagation()}>\n        {children}\n      \u003C/div>\n    \u003C/div>\n  )\n}\n\nModal.Header = function ModalHeader({ children }) {\n  return \u003Cdiv className=\"modal-header\">{children}\u003C/div>\n}\n\nModal.Body = function ModalBody({ children }) {\n  return \u003Cdiv className=\"modal-body\">{children}\u003C/div>\n}\n\nModal.Footer = function ModalFooter({ children }) {\n  return \u003Cdiv className=\"modal-footer\">{children}\u003C/div>\n}\n\n// Usage\nfunction App() {\n  return (\n    \u003CModal onClose={handleClose}>\n      \u003CModal.Header>\n        \u003Ch2>Confirm Action\u003C/h2>\n      \u003C/Modal.Header>\n      \u003CModal.Body>\n        \u003Cp>Are you sure you want to proceed?\u003C/p>\n      \u003C/Modal.Body>\n      \u003CModal.Footer>\n        \u003Cbutton onClick={handleConfirm}>Confirm\u003C/button>\n        \u003Cbutton onClick={handleClose}>Cancel\u003C/button>\n      \u003C/Modal.Footer>\n    \u003C/Modal>\n  )\n}\n```\n\n## State Management Evolution\n\n### Zustand for Simple State\n\n```jsx\nimport { create } from 'zustand'\n\nconst useStore = create((set) => ({\n  count: 0,\n  increment: () => set((state) => ({ count: state.count + 1 })),\n  decrement: () => set((state) => ({ count: state.count - 1 })),\n  reset: () => set({ count: 0 }),\n}))\n\nfunction Counter() {\n  const { count, increment, decrement, reset } = useStore()\n  \n  return (\n    \u003Cdiv>\n      \u003Cspan>{count}\u003C/span>\n      \u003Cbutton onClick={increment}>+\u003C/button>\n      \u003Cbutton onClick={decrement}>-\u003C/button>\n      \u003Cbutton onClick={reset}>Reset\u003C/button>\n    \u003C/div>\n  )\n}\n```\n\n### useReducer for Complex State Logic\n\n```jsx\nfunction todoReducer(state, action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return {\n        ...state,\n        todos: [...state.todos, action.payload]\n      }\n    case 'TOGGLE_TODO':\n      return {\n        ...state,\n        todos: state.todos.map(todo =>\n          todo.id === action.payload\n            ? { ...todo, completed: !todo.completed }\n            : todo\n        )\n      }\n    case 'DELETE_TODO':\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.payload)\n      }\n    default:\n      return state\n  }\n}\n\nfunction TodoApp() {\n  const [state, dispatch] = useReducer(todoReducer, { todos: [] })\n  \n  const addTodo = (text) => {\n    dispatch({\n      type: 'ADD_TODO',\n      payload: { id: Date.now(), text, completed: false }\n    })\n  }\n  \n  return (\n    // JSX for todo app\n  )\n}\n```\n\n## Performance Optimization Patterns\n\n### useMemo and useCallback Strategic Usage\n\n```jsx\nfunction ExpensiveComponent({ items, onItemClick }) {\n  // Memoize expensive calculations\n  const expensiveValue = useMemo(() => {\n    return items.reduce((acc, item) => acc + item.value, 0)\n  }, [items])\n  \n  // Memoize callbacks to prevent unnecessary re-renders\n  const handleClick = useCallback((id) => {\n    onItemClick(id)\n  }, [onItemClick])\n  \n  return (\n    \u003Cdiv>\n      \u003Cp>Total: {expensiveValue}\u003C/p>\n      {items.map(item => (\n        \u003CItem \n          key={item.id} \n          item={item} \n          onClick={handleClick}\n        />\n      ))}\n    \u003C/div>\n  )\n}\n```\n\n### React.memo with Custom Comparison\n\n```jsx\nconst ListItem = React.memo(function ListItem({ item, onEdit }) {\n  return (\n    \u003Cdiv>\n      \u003Ch3>{item.title}\u003C/h3>\n      \u003Cp>{item.description}\u003C/p>\n      \u003Cbutton onClick={() => onEdit(item.id)}>Edit\u003C/button>\n    \u003C/div>\n  )\n}, (prevProps, nextProps) => {\n  // Custom comparison logic\n  return prevProps.item.id === nextProps.item.id &&\n         prevProps.item.title === nextProps.item.title &&\n         prevProps.item.description === nextProps.item.description\n})\n```\n\n## Form Handling with React Hook Form\n\n```jsx\nimport { useForm } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { z } from 'zod'\n\nconst schema = z.object({\n  email: z.string().email(),\n  password: z.string().min(8),\n  confirmPassword: z.string()\n}).refine(data => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"]\n})\n\nfunction SignupForm() {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isSubmitting }\n  } = useForm({\n    resolver: zodResolver(schema)\n  })\n  \n  const onSubmit = async (data) => {\n    await new Promise(resolve => setTimeout(resolve, 1000))\n    console.log(data)\n  }\n  \n  return (\n    \u003Cform onSubmit={handleSubmit(onSubmit)}>\n      \u003Cinput\n        {...register('email')}\n        type=\"email\"\n        placeholder=\"Email\"\n      />\n      {errors.email && \u003Cspan>{errors.email.message}\u003C/span>}\n      \n      \u003Cinput\n        {...register('password')}\n        type=\"password\"\n        placeholder=\"Password\"\n      />\n      {errors.password && \u003Cspan>{errors.password.message}\u003C/span>}\n      \n      \u003Cbutton type=\"submit\" disabled={isSubmitting}>\n        {isSubmitting ? 'Creating Account...' : 'Sign Up'}\n      \u003C/button>\n    \u003C/form>\n  )\n}\n```\n\n## Testing Modern React Applications\n\n### Testing Custom Hooks\n\n```jsx\nimport { renderHook, act } from '@testing-library/react'\nimport { useCounter } from './useCounter'\n\ntest('should increment counter', () => {\n  const { result } = renderHook(() => useCounter())\n  \n  act(() => {\n    result.current.increment()\n  })\n  \n  expect(result.current.count).toBe(1)\n})\n```\n\n### Testing Components with Suspense\n\n```jsx\nimport { render, screen } from '@testing-library/react'\nimport { Suspense } from 'react'\nimport AsyncComponent from './AsyncComponent'\n\ntest('shows loading state then content', async () => {\n  render(\n    \u003CSuspense fallback={\u003Cdiv>Loading...\u003C/div>}>\n      \u003CAsyncComponent />\n    \u003C/Suspense>\n  )\n  \n  expect(screen.getByText('Loading...')).toBeInTheDocument()\n  \n  await waitFor(() => {\n    expect(screen.getByText('Content loaded')).toBeInTheDocument()\n  })\n})\n```\n\n## Conclusion\n\nThe React ecosystem continues to evolve rapidly, with patterns that emphasize performance, developer experience, and maintainability. Server Components are reshaping how we think about data fetching and rendering, while concurrent features enable better user experiences through progressive loading.\n\nKey takeaways for 2024:\n\n1. **Embrace Server Components** for better performance and simpler data fetching\n2. **Use Suspense strategically** to improve perceived performance\n3. **Choose state management tools** based on complexity needs\n4. **Optimize performance** with memoization and careful re-render management\n5. **Invest in testing** patterns that work with modern React features\n\nAs React continues to evolve, staying current with these patterns will help you build applications that are performant, maintainable, and provide excellent user experiences.","src/content/blog/modern-react-patterns.md","8ea9507fdff72da8",{"html":523,"metadata":524},"\u003Ch1 id=\"modern-react-patterns-for-2024\">Modern React Patterns for 2024\u003C/h1>\n\u003Cp>React continues to evolve rapidly, and with it, the patterns and best practices that define how we build modern applications. As we move through 2024, several key patterns have emerged that are shaping the future of React development. Let’s explore these patterns and understand when and how to apply them effectively.\u003C/p>\n\u003Ch2 id=\"server-components-the-game-changer\">Server Components: The Game Changer\u003C/h2>\n\u003Cp>React Server Components represent one of the most significant shifts in how we think about React applications. They allow us to render components on the server, reducing the amount of JavaScript sent to the client.\u003C/p>\n\u003Ch3 id=\"key-benefits\">Key Benefits\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Reduced Bundle Size\u003C/strong>: Server components don’t add to your client-side JavaScript bundle\u003C/li>\n\u003Cli>\u003Cstrong>Direct Database Access\u003C/strong>: Fetch data directly in your components without API routes\u003C/li>\n\u003Cli>\u003Cstrong>Improved Performance\u003C/strong>: Faster initial page loads and better Core Web Vitals\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"example-pattern\">Example Pattern\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// app/posts/page.js (Server Component)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { getPosts } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '@/lib/database'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> PostList \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> './PostList'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> default\u003C/span>\u003Cspan style=\"color:#F97583\"> async\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> PostsPage\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> posts\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> getPosts\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#6A737D\">// Direct database access\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">h1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>Latest Posts&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">h1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">PostList\u003C/span>\u003Cspan style=\"color:#B392F0\"> posts\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{posts} />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"concurrent-features-and-suspense\">Concurrent Features and Suspense\u003C/h2>\n\u003Cp>React’s concurrent features, including Suspense boundaries and streaming, enable better user experiences through progressive loading.\u003C/p>\n\u003Ch3 id=\"suspense-for-data-fetching\">Suspense for Data Fetching\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { Suspense } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'react'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> PostList \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> './PostList'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> PostSkeleton \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> './PostSkeleton'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> App\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Suspense\u003C/span>\u003Cspan style=\"color:#B392F0\"> fallback\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">PostSkeleton\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />}>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">PostList\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">Suspense\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"error-boundaries-with-suspense\">Error Boundaries with Suspense\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { ErrorBoundary } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'react-error-boundary'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> ErrorFallback\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003Cspan style=\"color:#FFAB70\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">resetErrorBoundary\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#B392F0\"> role\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"alert\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">h2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>Something went wrong:&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">h2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">pre\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>{error.message}&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">pre\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#B392F0\"> onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{resetErrorBoundary}>Try again&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> App\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">ErrorBoundary\u003C/span>\u003Cspan style=\"color:#B392F0\"> FallbackComponent\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{ErrorFallback}>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Suspense\u003C/span>\u003Cspan style=\"color:#B392F0\"> fallback\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Loading\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />}>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">DataComponent\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">Suspense\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">ErrorBoundary\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"advanced-hook-patterns\">Advanced Hook Patterns\u003C/h2>\n\u003Ch3 id=\"custom-hooks-for-data-fetching\">Custom Hooks for Data Fetching\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> usePost\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">id\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">post\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setPost\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">loading\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setLoading\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setError\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  useEffect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    async\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetchPost\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        setLoading\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> response\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`/api/posts/${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">id\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">response.ok) \u003C/span>\u003Cspan style=\"color:#F97583\">throw\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Error\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Failed to fetch'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> postData\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> response.\u003C/span>\u003Cspan style=\"color:#B392F0\">json\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        setPost\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(postData)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      } \u003C/span>\u003Cspan style=\"color:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (err) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        setError\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(err.message)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      } \u003C/span>\u003Cspan style=\"color:#F97583\">finally\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        setLoading\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    fetchPost\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }, [id])\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { post, loading, error }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"compound-component-pattern\">Compound Component Pattern\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> Modal\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ \u003C/span>\u003Cspan style=\"color:#FFAB70\">children\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">onClose\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"modal-overlay\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{onClose}>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"modal-content\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#FFAB70\">e\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> e.\u003C/span>\u003Cspan style=\"color:#B392F0\">stopPropagation\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()}>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        {children}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">Modal.\u003C/span>\u003Cspan style=\"color:#B392F0\">Header\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> ModalHeader\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ \u003C/span>\u003Cspan style=\"color:#FFAB70\">children\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"modal-header\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>{children}&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">Modal.\u003C/span>\u003Cspan style=\"color:#B392F0\">Body\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> ModalBody\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ \u003C/span>\u003Cspan style=\"color:#FFAB70\">children\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"modal-body\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>{children}&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">Modal.\u003C/span>\u003Cspan style=\"color:#B392F0\">Footer\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> ModalFooter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ \u003C/span>\u003Cspan style=\"color:#FFAB70\">children\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"modal-footer\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>{children}&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Usage\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> App\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Modal\u003C/span>\u003Cspan style=\"color:#B392F0\"> onClose\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{handleClose}>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Modal.Header\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">h2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>Confirm Action&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">h2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">Modal.Header\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Modal.Body\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>Are you sure you want to proceed?&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">Modal.Body\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Modal.Footer\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#B392F0\"> onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{handleConfirm}>Confirm&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#B392F0\"> onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{handleClose}>Cancel&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">Modal.Footer\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">Modal\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"state-management-evolution\">State Management Evolution\u003C/h2>\n\u003Ch3 id=\"zustand-for-simple-state\">Zustand for Simple State\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { create } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'zustand'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> useStore\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">set\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  count: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  increment\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> set\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">state\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ({ count: state.count \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> })),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  decrement\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> set\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">state\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ({ count: state.count \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> })),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  reset\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> set\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ count: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> Counter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#79B8FF\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">increment\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">decrement\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">reset\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> } \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useStore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>{count}&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#B392F0\"> onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{increment}>+&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#B392F0\"> onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{decrement}>-&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#B392F0\"> onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{reset}>Reset&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"usereducer-for-complex-state-logic\">useReducer for Complex State Logic\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> todoReducer\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">state\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">action\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  switch\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (action.type) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    case\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'ADD_TODO'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        ...\u003C/span>\u003Cspan style=\"color:#E1E4E8\">state,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        todos: [\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#E1E4E8\">state.todos, action.payload]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    case\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'TOGGLE_TODO'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        ...\u003C/span>\u003Cspan style=\"color:#E1E4E8\">state,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        todos: state.todos.\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">todo\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          todo.id \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> action.payload\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            ?\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#E1E4E8\">todo, completed: \u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">todo.completed }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            :\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> todo\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    case\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'DELETE_TODO'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        ...\u003C/span>\u003Cspan style=\"color:#E1E4E8\">state,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        todos: state.todos.\u003C/span>\u003Cspan style=\"color:#B392F0\">filter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">todo\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> todo.id \u003C/span>\u003Cspan style=\"color:#F97583\">!==\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> action.payload)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    default\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> state\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> TodoApp\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">state\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">dispatch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useReducer\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(todoReducer, { todos: [] })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#B392F0\"> addTodo\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">text\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    dispatch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      type: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'ADD_TODO'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      payload: { id: Date.\u003C/span>\u003Cspan style=\"color:#B392F0\">now\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(), text, completed: \u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // JSX for todo app\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"performance-optimization-patterns\">Performance Optimization Patterns\u003C/h2>\n\u003Ch3 id=\"usememo-and-usecallback-strategic-usage\">useMemo and useCallback Strategic Usage\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> ExpensiveComponent\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ \u003C/span>\u003Cspan style=\"color:#FFAB70\">items\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">onItemClick\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // Memoize expensive calculations\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> expensiveValue\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> useMemo\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> items.\u003C/span>\u003Cspan style=\"color:#B392F0\">reduce\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">acc\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">item\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> acc \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> item.value, \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }, [items])\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // Memoize callbacks to prevent unnecessary re-renders\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> handleClick\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> useCallback\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">id\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    onItemClick\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(id)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }, [onItemClick])\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>Total: {expensiveValue}&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      {items.\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">item\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Item\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          key\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{item.id} \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          item\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{item} \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{handleClick}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      ))}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"reactmemo-with-custom-comparison\">React.memo with Custom Comparison\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> ListItem\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> React.\u003C/span>\u003Cspan style=\"color:#B392F0\">memo\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> ListItem\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ \u003C/span>\u003Cspan style=\"color:#FFAB70\">item\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">onEdit\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">h3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>{item.title}&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">h3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>{item.description}&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#B392F0\"> onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> onEdit\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(item.id)}>Edit&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}, (\u003C/span>\u003Cspan style=\"color:#FFAB70\">prevProps\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">nextProps\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // Custom comparison logic\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> prevProps.item.id \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> nextProps.item.id \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">         prevProps.item.title \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> nextProps.item.title \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">         prevProps.item.description \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> nextProps.item.description\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"form-handling-with-react-hook-form\">Form Handling with React Hook Form\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { useForm } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'react-hook-form'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { zodResolver } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '@hookform/resolvers/zod'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { z } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'zod'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> schema\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> z.\u003C/span>\u003Cspan style=\"color:#B392F0\">object\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  email: z.\u003C/span>\u003Cspan style=\"color:#B392F0\">string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#B392F0\">email\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  password: z.\u003C/span>\u003Cspan style=\"color:#B392F0\">string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#B392F0\">min\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">8\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  confirmPassword: z.\u003C/span>\u003Cspan style=\"color:#B392F0\">string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}).\u003C/span>\u003Cspan style=\"color:#B392F0\">refine\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">data\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> data.password \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> data.confirmPassword, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  message: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Passwords don't match\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  path: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"confirmPassword\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> SignupForm\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    register\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    handleSubmit\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    formState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: { \u003C/span>\u003Cspan style=\"color:#79B8FF\">errors\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">isSubmitting\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  } \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useForm\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    resolver: \u003C/span>\u003Cspan style=\"color:#B392F0\">zodResolver\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(schema)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#B392F0\"> onSubmit\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">data\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    await\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#79B8FF\"> Promise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">resolve\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#B392F0\"> setTimeout\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(resolve, \u003C/span>\u003Cspan style=\"color:#79B8FF\">1000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(data)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">form\u003C/span>\u003Cspan style=\"color:#B392F0\"> onSubmit\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#B392F0\">handleSubmit\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(onSubmit)}>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">input\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        {\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#B392F0\">register\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'email'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        type\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"email\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        placeholder\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Email\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      {errors.email \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>{errors.email.message}&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">input\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        {\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#B392F0\">register\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'password'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        type\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"password\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        placeholder\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Password\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      {errors.password \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>{errors.password.message}&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">span\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#B392F0\"> type\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"submit\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> disabled\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{isSubmitting}>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        {isSubmitting \u003C/span>\u003Cspan style=\"color:#F97583\">?\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'Creating Account...'\u003C/span>\u003Cspan style=\"color:#F97583\"> :\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'Sign Up'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">form\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"testing-modern-react-applications\">Testing Modern React Applications\u003C/h2>\n\u003Ch3 id=\"testing-custom-hooks\">Testing Custom Hooks\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { renderHook, act } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '@testing-library/react'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { useCounter } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> './useCounter'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">test\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'should increment counter'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#79B8FF\">result\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> } \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> renderHook\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> useCounter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  act\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    result.current.\u003C/span>\u003Cspan style=\"color:#B392F0\">increment\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(result.current.count).\u003C/span>\u003Cspan style=\"color:#B392F0\">toBe\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"testing-components-with-suspense\">Testing Components with Suspense\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { render, screen } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '@testing-library/react'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { Suspense } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'react'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> AsyncComponent \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> './AsyncComponent'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">test\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'shows loading state then content'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  render\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Suspense\u003C/span>\u003Cspan style=\"color:#B392F0\"> fallback\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>Loading...&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>}>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">AsyncComponent\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">Suspense\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(screen.\u003C/span>\u003Cspan style=\"color:#B392F0\">getByText\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Loading...'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)).\u003C/span>\u003Cspan style=\"color:#B392F0\">toBeInTheDocument\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  await\u003C/span>\u003Cspan style=\"color:#B392F0\"> waitFor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(screen.\u003C/span>\u003Cspan style=\"color:#B392F0\">getByText\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Content loaded'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)).\u003C/span>\u003Cspan style=\"color:#B392F0\">toBeInTheDocument\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>The React ecosystem continues to evolve rapidly, with patterns that emphasize performance, developer experience, and maintainability. Server Components are reshaping how we think about data fetching and rendering, while concurrent features enable better user experiences through progressive loading.\u003C/p>\n\u003Cp>Key takeaways for 2024:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Embrace Server Components\u003C/strong> for better performance and simpler data fetching\u003C/li>\n\u003Cli>\u003Cstrong>Use Suspense strategically\u003C/strong> to improve perceived performance\u003C/li>\n\u003Cli>\u003Cstrong>Choose state management tools\u003C/strong> based on complexity needs\u003C/li>\n\u003Cli>\u003Cstrong>Optimize performance\u003C/strong> with memoization and careful re-render management\u003C/li>\n\u003Cli>\u003Cstrong>Invest in testing\u003C/strong> patterns that work with modern React features\u003C/li>\n\u003C/ol>\n\u003Cp>As React continues to evolve, staying current with these patterns will help you build applications that are performant, maintainable, and provide excellent user experiences.\u003C/p>",{"headings":525,"localImagePaths":586,"remoteImagePaths":587,"frontmatter":588,"imagePaths":591},[526,528,531,534,537,540,543,546,549,552,555,558,561,564,567,570,573,576,579,582,585],{"depth":261,"slug":527,"text":510},"modern-react-patterns-for-2024",{"depth":29,"slug":529,"text":530},"server-components-the-game-changer","Server Components: The Game Changer",{"depth":267,"slug":532,"text":533},"key-benefits","Key Benefits",{"depth":267,"slug":535,"text":536},"example-pattern","Example Pattern",{"depth":29,"slug":538,"text":539},"concurrent-features-and-suspense","Concurrent Features and Suspense",{"depth":267,"slug":541,"text":542},"suspense-for-data-fetching","Suspense for Data Fetching",{"depth":267,"slug":544,"text":545},"error-boundaries-with-suspense","Error Boundaries with Suspense",{"depth":29,"slug":547,"text":548},"advanced-hook-patterns","Advanced Hook Patterns",{"depth":267,"slug":550,"text":551},"custom-hooks-for-data-fetching","Custom Hooks for Data Fetching",{"depth":267,"slug":553,"text":554},"compound-component-pattern","Compound Component Pattern",{"depth":29,"slug":556,"text":557},"state-management-evolution","State Management Evolution",{"depth":267,"slug":559,"text":560},"zustand-for-simple-state","Zustand for Simple State",{"depth":267,"slug":562,"text":563},"usereducer-for-complex-state-logic","useReducer for Complex State Logic",{"depth":29,"slug":565,"text":566},"performance-optimization-patterns","Performance Optimization Patterns",{"depth":267,"slug":568,"text":569},"usememo-and-usecallback-strategic-usage","useMemo and useCallback Strategic Usage",{"depth":267,"slug":571,"text":572},"reactmemo-with-custom-comparison","React.memo with Custom Comparison",{"depth":29,"slug":574,"text":575},"form-handling-with-react-hook-form","Form Handling with React Hook Form",{"depth":29,"slug":577,"text":578},"testing-modern-react-applications","Testing Modern React Applications",{"depth":267,"slug":580,"text":581},"testing-custom-hooks","Testing Custom Hooks",{"depth":267,"slug":583,"text":584},"testing-components-with-suspense","Testing Components with Suspense",{"depth":29,"slug":313,"text":314},[],[],{"title":510,"description":511,"date":589,"tags":590,"readingTime":518},["Date","2024-01-10T00:00:00.000Z"],[514,515,516,517],[],"performance-optimization",{"id":592,"data":594,"body":603,"filePath":604,"digest":605,"rendered":606,"legacyId":709},{"title":595,"description":596,"date":597,"tags":598,"draft":47,"author":251,"readingTime":602},"Web Performance Optimization: A Practical Guide","Practical strategies for optimizing web application performance and delivering exceptional user experiences.",["Date","2024-01-05T00:00:00.000Z"],[599,600,601],"performance","web-development","optimization","6 min read","# Web Performance Optimization: A Practical Guide\n\nWeb performance isn't just about making your site fast—it's about creating exceptional user experiences that drive engagement, conversions, and business success. In this comprehensive guide, we'll explore practical strategies for optimizing web application performance across all key metrics.\n\n## Understanding Core Web Vitals\n\nCore Web Vitals are the foundation of modern web performance measurement. These user-centric metrics focus on what actually matters to your users.\n\n### Largest Contentful Paint (LCP)\n**Target: ≤ 2.5 seconds**\n\nLCP measures loading performance by tracking when the largest content element becomes visible.\n\n**Optimization strategies:**\n- Optimize images with modern formats (WebP, AVIF)\n- Implement proper preloading for critical resources\n- Use CDN for faster content delivery\n- Minimize server response times\n\n### First Input Delay (FID)\n**Target: ≤ 100 milliseconds**\n\nFID measures interactivity by tracking the delay between user interaction and browser response.\n\n**Optimization strategies:**\n- Minimize JavaScript execution time\n- Use code splitting to reduce main thread blocking\n- Implement service workers for better resource management\n- Defer non-critical JavaScript\n\n### Cumulative Layout Shift (CLS)\n**Target: ≤ 0.1**\n\nCLS measures visual stability by tracking unexpected layout shifts.\n\n**Optimization strategies:**\n- Always include dimensions for images and videos\n- Reserve space for dynamically loaded content\n- Use CSS transforms instead of changing layout properties\n- Ensure fonts load predictably\n\n## Image Optimization Strategies\n\nImages often account for the majority of page weight. Optimizing them can dramatically improve performance.\n\n### Modern Image Formats\n\n```html\n\u003Cpicture>\n  \u003Csource srcset=\"image.avif\" type=\"image/avif\">\n  \u003Csource srcset=\"image.webp\" type=\"image/webp\">\n  \u003Cimg src=\"image.jpg\" alt=\"Description\" loading=\"lazy\">\n\u003C/picture>\n```\n\n### Responsive Images\n\n```html\n\u003Cimg \n  srcset=\"\n    image-320w.jpg 320w,\n    image-640w.jpg 640w,\n    image-1280w.jpg 1280w\n  \"\n  sizes=\"\n    (max-width: 320px) 280px,\n    (max-width: 640px) 600px,\n    1200px\n  \"\n  src=\"image-640w.jpg\"\n  alt=\"Description\"\n  loading=\"lazy\"\n>\n```\n\n### Lazy Loading Implementation\n\n```javascript\n// Intersection Observer for lazy loading\nconst imageObserver = new IntersectionObserver((entries, observer) => {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      const img = entry.target\n      img.src = img.dataset.src\n      img.classList.remove('lazy')\n      observer.unobserve(img)\n    }\n  })\n})\n\ndocument.querySelectorAll('img[data-src]').forEach(img => {\n  imageObserver.observe(img)\n})\n```\n\n## JavaScript Optimization\n\nJavaScript performance directly impacts user experience. Here are key strategies for optimization.\n\n### Code Splitting\n\n```javascript\n// Dynamic imports for code splitting\nconst LazyComponent = lazy(() => import('./LazyComponent'))\n\nfunction App() {\n  return (\n    \u003CSuspense fallback={\u003Cdiv>Loading...\u003C/div>}>\n      \u003CLazyComponent />\n    \u003C/Suspense>\n  )\n}\n```\n\n### Bundle Analysis\n\n```bash\n# Analyze your bundle size\nnpm install --save-dev webpack-bundle-analyzer\n\n# Add to package.json scripts\n\"analyze\": \"npm run build && npx webpack-bundle-analyzer build/static/js/*.js\"\n```\n\n### Tree Shaking\n\n```javascript\n// Import only what you need\nimport { debounce } from 'lodash/debounce'  // Good\nimport _ from 'lodash'  // Bad - imports entire library\n```\n\n## CSS Performance\n\nCSS can block rendering and impact performance. Optimize it properly.\n\n### Critical CSS\n\n```html\n\u003C!-- Inline critical CSS -->\n\u003Cstyle>\n  /* Critical above-the-fold styles */\n  .header { /* styles */ }\n  .hero { /* styles */ }\n\u003C/style>\n\n\u003C!-- Load non-critical CSS asynchronously -->\n\u003Clink rel=\"preload\" href=\"styles.css\" as=\"style\" onload=\"this.onload=null;this.rel='stylesheet'\">\n```\n\n### CSS Containment\n\n```css\n.component {\n  contain: layout style paint;\n}\n\n.list-item {\n  contain: layout;\n}\n```\n\n## Resource Loading Optimization\n\n### Preloading Critical Resources\n\n```html\n\u003C!-- Preload critical fonts -->\n\u003Clink rel=\"preload\" href=\"font.woff2\" as=\"font\" type=\"font/woff2\" crossorigin>\n\n\u003C!-- Preload critical images -->\n\u003Clink rel=\"preload\" href=\"hero-image.jpg\" as=\"image\">\n\n\u003C!-- Prefetch likely next page resources -->\n\u003Clink rel=\"prefetch\" href=\"/next-page.html\">\n```\n\n### Service Worker for Caching\n\n```javascript\n// sw.js\nconst CACHE_NAME = 'app-cache-v1'\nconst STATIC_ASSETS = [\n  '/',\n  '/styles.css',\n  '/app.js',\n  '/offline.html'\n]\n\nself.addEventListener('install', event => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then(cache => cache.addAll(STATIC_ASSETS))\n  )\n})\n\nself.addEventListener('fetch', event => {\n  event.respondWith(\n    caches.match(event.request)\n      .then(response => {\n        return response || fetch(event.request)\n      })\n      .catch(() => caches.match('/offline.html'))\n  )\n})\n```\n\n## Database and API Optimization\n\nBackend performance is crucial for overall user experience.\n\n### Database Query Optimization\n\n```sql\n-- Add indexes for frequently queried columns\nCREATE INDEX idx_user_email ON users(email);\n\n-- Use specific columns instead of SELECT *\nSELECT id, name, email FROM users WHERE active = true;\n\n-- Implement pagination\nSELECT * FROM posts \nORDER BY created_at DESC \nLIMIT 20 OFFSET 40;\n```\n\n### API Response Optimization\n\n```javascript\n// Implement response compression\napp.use(compression())\n\n// Add caching headers\napp.get('/api/posts', (req, res) => {\n  res.set('Cache-Control', 'public, max-age=300') // 5 minutes\n  res.json(posts)\n})\n\n// Use GraphQL for efficient data fetching\nconst typeDefs = `\n  type Query {\n    posts(limit: Int, offset: Int): [Post]\n  }\n`\n```\n\n## Monitoring and Measurement\n\n### Performance Monitoring\n\n```javascript\n// Core Web Vitals monitoring\nfunction sendToAnalytics(metric) {\n  // Send to your analytics service\n  gtag('event', metric.name, {\n    event_category: 'Web Vitals',\n    value: Math.round(metric.value),\n    custom_map: {\n      metric_id: metric.id,\n      metric_value: metric.value,\n      metric_delta: metric.delta\n    }\n  })\n}\n\n// Measure FCP\ngetCLS(sendToAnalytics)\ngetFID(sendToAnalytics)\ngetLCP(sendToAnalytics)\n```\n\n### Performance Budget\n\n```javascript\n// webpack.config.js\nmodule.exports = {\n  performance: {\n    maxAssetSize: 250000,\n    maxEntrypointSize: 250000,\n    hints: 'error'\n  }\n}\n```\n\n## Testing Performance\n\n### Lighthouse CI\n\n```yaml\n# .github/workflows/lighthouse.yml\nname: Lighthouse CI\non: [push]\njobs:\n  lighthouse:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run Lighthouse CI\n        uses: treosh/lighthouse-ci-action@v7\n        with:\n          configPath: '.lighthouserc.json'\n```\n\n### Load Testing\n\n```javascript\n// Using k6 for load testing\nimport http from 'k6/http'\nimport { check } from 'k6'\n\nexport let options = {\n  stages: [\n    { duration: '30s', target: 20 },\n    { duration: '1m', target: 20 },\n    { duration: '30s', target: 0 }\n  ]\n}\n\nexport default function() {\n  let response = http.get('https://your-site.com')\n  check(response, {\n    'status is 200': (r) => r.status === 200,\n    'response time \u003C 500ms': (r) => r.timings.duration \u003C 500\n  })\n}\n```\n\n## Performance Checklist\n\n### Before Launch\n- [ ] Optimize images (format, size, lazy loading)\n- [ ] Minimize and compress CSS/JS\n- [ ] Implement proper caching headers\n- [ ] Set up CDN for static assets\n- [ ] Add performance monitoring\n- [ ] Test on various devices and networks\n\n### Ongoing Monitoring\n- [ ] Monitor Core Web Vitals regularly\n- [ ] Set up performance alerts\n- [ ] Regular performance audits\n- [ ] User experience monitoring\n- [ ] Competitive benchmarking\n\n## Conclusion\n\nWeb performance optimization is an ongoing process that requires attention to detail and continuous monitoring. By focusing on Core Web Vitals, optimizing critical resources, and implementing proper measurement strategies, you can create web applications that not only perform well but also provide exceptional user experiences.\n\nRemember that performance is not just a technical metric—it directly impacts user satisfaction, conversion rates, and business success. Invest in performance optimization early and make it a core part of your development process.\n\nThe strategies outlined in this guide provide a solid foundation for building fast, responsive web applications. Start with the basics, measure everything, and continuously iterate based on real user data.","src/content/blog/performance-optimization.md","1af75b76e08e833c",{"html":607,"metadata":608},"\u003Ch1 id=\"web-performance-optimization-a-practical-guide\">Web Performance Optimization: A Practical Guide\u003C/h1>\n\u003Cp>Web performance isn’t just about making your site fast—it’s about creating exceptional user experiences that drive engagement, conversions, and business success. In this comprehensive guide, we’ll explore practical strategies for optimizing web application performance across all key metrics.\u003C/p>\n\u003Ch2 id=\"understanding-core-web-vitals\">Understanding Core Web Vitals\u003C/h2>\n\u003Cp>Core Web Vitals are the foundation of modern web performance measurement. These user-centric metrics focus on what actually matters to your users.\u003C/p>\n\u003Ch3 id=\"largest-contentful-paint-lcp\">Largest Contentful Paint (LCP)\u003C/h3>\n\u003Cp>\u003Cstrong>Target: ≤ 2.5 seconds\u003C/strong>\u003C/p>\n\u003Cp>LCP measures loading performance by tracking when the largest content element becomes visible.\u003C/p>\n\u003Cp>\u003Cstrong>Optimization strategies:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>Optimize images with modern formats (WebP, AVIF)\u003C/li>\n\u003Cli>Implement proper preloading for critical resources\u003C/li>\n\u003Cli>Use CDN for faster content delivery\u003C/li>\n\u003Cli>Minimize server response times\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"first-input-delay-fid\">First Input Delay (FID)\u003C/h3>\n\u003Cp>\u003Cstrong>Target: ≤ 100 milliseconds\u003C/strong>\u003C/p>\n\u003Cp>FID measures interactivity by tracking the delay between user interaction and browser response.\u003C/p>\n\u003Cp>\u003Cstrong>Optimization strategies:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>Minimize JavaScript execution time\u003C/li>\n\u003Cli>Use code splitting to reduce main thread blocking\u003C/li>\n\u003Cli>Implement service workers for better resource management\u003C/li>\n\u003Cli>Defer non-critical JavaScript\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"cumulative-layout-shift-cls\">Cumulative Layout Shift (CLS)\u003C/h3>\n\u003Cp>\u003Cstrong>Target: ≤ 0.1\u003C/strong>\u003C/p>\n\u003Cp>CLS measures visual stability by tracking unexpected layout shifts.\u003C/p>\n\u003Cp>\u003Cstrong>Optimization strategies:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>Always include dimensions for images and videos\u003C/li>\n\u003Cli>Reserve space for dynamically loaded content\u003C/li>\n\u003Cli>Use CSS transforms instead of changing layout properties\u003C/li>\n\u003Cli>Ensure fonts load predictably\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"image-optimization-strategies\">Image Optimization Strategies\u003C/h2>\n\u003Cp>Images often account for the majority of page weight. Optimizing them can dramatically improve performance.\u003C/p>\n\u003Ch3 id=\"modern-image-formats\">Modern Image Formats\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">picture\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">source\u003C/span>\u003Cspan style=\"color:#B392F0\"> srcset\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"image.avif\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> type\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"image/avif\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">source\u003C/span>\u003Cspan style=\"color:#B392F0\"> srcset\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"image.webp\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> type\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"image/webp\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">img\u003C/span>\u003Cspan style=\"color:#B392F0\"> src\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"image.jpg\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> alt\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Description\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> loading\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"lazy\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">picture\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"responsive-images\">Responsive Images\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">img\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  srcset\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    image-320w.jpg 320w,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    image-640w.jpg 640w,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    image-1280w.jpg 1280w\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  \"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  sizes\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    (max-width: 320px) 280px,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    (max-width: 640px) 600px,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    1200px\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  \"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  src\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"image-640w.jpg\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  alt\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Description\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  loading\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"lazy\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"lazy-loading-implementation\">Lazy Loading Implementation\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Intersection Observer for lazy loading\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> imageObserver\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> IntersectionObserver\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">entries\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">observer\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  entries.\u003C/span>\u003Cspan style=\"color:#B392F0\">forEach\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">entry\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (entry.isIntersecting) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> img\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> entry.target\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      img.src \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> img.dataset.src\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      img.classList.\u003C/span>\u003Cspan style=\"color:#B392F0\">remove\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'lazy'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      observer.\u003C/span>\u003Cspan style=\"color:#B392F0\">unobserve\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(img)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">document.\u003C/span>\u003Cspan style=\"color:#B392F0\">querySelectorAll\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'img[data-src]'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">).\u003C/span>\u003Cspan style=\"color:#B392F0\">forEach\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">img\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  imageObserver.\u003C/span>\u003Cspan style=\"color:#B392F0\">observe\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(img)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"javascript-optimization\">JavaScript Optimization\u003C/h2>\n\u003Cp>JavaScript performance directly impacts user experience. Here are key strategies for optimization.\u003C/p>\n\u003Ch3 id=\"code-splitting\">Code Splitting\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Dynamic imports for code splitting\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> LazyComponent\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> lazy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#F97583\"> import\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'./LazyComponent'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> App\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Suspense\u003C/span>\u003Cspan style=\"color:#B392F0\"> fallback\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>Loading...&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>}>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">LazyComponent\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">Suspense\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"bundle-analysis\">Bundle Analysis\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Analyze your bundle size\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --save-dev\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> webpack-bundle-analyzer\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Add to package.json scripts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">\"analyze\"\u003C/span>\u003Cspan style=\"color:#79B8FF\">:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"npm run build &#x26;&#x26; npx webpack-bundle-analyzer build/static/js/*.js\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"tree-shaking\">Tree Shaking\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Import only what you need\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { debounce } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'lodash/debounce'\u003C/span>\u003Cspan style=\"color:#6A737D\">  // Good\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> _ \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'lodash'\u003C/span>\u003Cspan style=\"color:#6A737D\">  // Bad - imports entire library\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"css-performance\">CSS Performance\u003C/h2>\n\u003Cp>CSS can block rendering and impact performance. Optimize it properly.\u003C/p>\n\u003Ch3 id=\"critical-css\">Critical CSS\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">&#x3C;!-- Inline critical CSS -->\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">style\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  /* Critical above-the-fold styles */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  .header\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#6A737D\">/* styles */\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  .hero\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#6A737D\">/* styles */\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">style\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">&#x3C;!-- Load non-critical CSS asynchronously -->\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">link\u003C/span>\u003Cspan style=\"color:#B392F0\"> rel\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"preload\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> href\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"styles.css\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> as\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"style\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> onload\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">onload\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#9ECBFF\">;\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">rel\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'stylesheet'\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"css-containment\">CSS Containment\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">.component\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  contain\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: layout \u003C/span>\u003Cspan style=\"color:#79B8FF\">style\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> paint;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">.list-item\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  contain\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: layout;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"resource-loading-optimization\">Resource Loading Optimization\u003C/h2>\n\u003Ch3 id=\"preloading-critical-resources\">Preloading Critical Resources\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">&#x3C;!-- Preload critical fonts -->\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">link\u003C/span>\u003Cspan style=\"color:#B392F0\"> rel\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"preload\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> href\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"font.woff2\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> as\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"font\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> type\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"font/woff2\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> crossorigin\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">&#x3C;!-- Preload critical images -->\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">link\u003C/span>\u003Cspan style=\"color:#B392F0\"> rel\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"preload\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> href\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"hero-image.jpg\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> as\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"image\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">&#x3C;!-- Prefetch likely next page resources -->\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">link\u003C/span>\u003Cspan style=\"color:#B392F0\"> rel\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"prefetch\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> href\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/next-page.html\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"service-worker-for-caching\">Service Worker for Caching\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// sw.js\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> CACHE_NAME\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'app-cache-v1'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> STATIC_ASSETS\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  '/'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  '/styles.css'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  '/app.js'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  '/offline.html'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">self.\u003C/span>\u003Cspan style=\"color:#B392F0\">addEventListener\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'install'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">event\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  event.\u003C/span>\u003Cspan style=\"color:#B392F0\">waitUntil\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    caches.\u003C/span>\u003Cspan style=\"color:#B392F0\">open\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">CACHE_NAME\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      .\u003C/span>\u003Cspan style=\"color:#B392F0\">then\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">cache\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> cache.\u003C/span>\u003Cspan style=\"color:#B392F0\">addAll\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">STATIC_ASSETS\u003C/span>\u003Cspan style=\"color:#E1E4E8\">))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">self.\u003C/span>\u003Cspan style=\"color:#B392F0\">addEventListener\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'fetch'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">event\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  event.\u003C/span>\u003Cspan style=\"color:#B392F0\">respondWith\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    caches.\u003C/span>\u003Cspan style=\"color:#B392F0\">match\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(event.request)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      .\u003C/span>\u003Cspan style=\"color:#B392F0\">then\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">response\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> response \u003C/span>\u003Cspan style=\"color:#F97583\">||\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(event.request)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      .\u003C/span>\u003Cspan style=\"color:#B392F0\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> caches.\u003C/span>\u003Cspan style=\"color:#B392F0\">match\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'/offline.html'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"database-and-api-optimization\">Database and API Optimization\u003C/h2>\n\u003Cp>Backend performance is crucial for overall user experience.\u003C/p>\n\u003Ch3 id=\"database-query-optimization\">Database Query Optimization\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sql\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Add indexes for frequently queried columns\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">CREATE\u003C/span>\u003Cspan style=\"color:#F97583\"> INDEX\u003C/span>\u003Cspan style=\"color:#B392F0\"> idx_user_email\u003C/span>\u003Cspan style=\"color:#F97583\"> ON\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users(email);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Use specific columns instead of SELECT *\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> id, \u003C/span>\u003Cspan style=\"color:#F97583\">name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, email \u003C/span>\u003Cspan style=\"color:#F97583\">FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> users \u003C/span>\u003Cspan style=\"color:#F97583\">WHERE\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> active \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> true;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">-- Implement pagination\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#F97583\"> FROM\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> posts \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">ORDER BY\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> created_at \u003C/span>\u003Cspan style=\"color:#F97583\">DESC\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">LIMIT\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 20\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> OFFSET \u003C/span>\u003Cspan style=\"color:#79B8FF\">40\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"api-response-optimization\">API Response Optimization\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Implement response compression\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">app.\u003C/span>\u003Cspan style=\"color:#B392F0\">use\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">compression\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Add caching headers\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">app.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'/api/posts'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, (\u003C/span>\u003Cspan style=\"color:#FFAB70\">req\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">res\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  res.\u003C/span>\u003Cspan style=\"color:#B392F0\">set\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Cache-Control'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'public, max-age=300'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#6A737D\">// 5 minutes\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  res.\u003C/span>\u003Cspan style=\"color:#B392F0\">json\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(posts)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Use GraphQL for efficient data fetching\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> typeDefs\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> `\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  type Query {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    posts(limit: Int, offset: Int): [Post]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">`\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"monitoring-and-measurement\">Monitoring and Measurement\u003C/h2>\n\u003Ch3 id=\"performance-monitoring\">Performance Monitoring\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Core Web Vitals monitoring\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> sendToAnalytics\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">metric\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // Send to your analytics service\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  gtag\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'event'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, metric.name, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    event_category: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Web Vitals'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    value: Math.\u003C/span>\u003Cspan style=\"color:#B392F0\">round\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(metric.value),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    custom_map: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      metric_id: metric.id,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      metric_value: metric.value,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      metric_delta: metric.delta\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Measure FCP\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">getCLS\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(sendToAnalytics)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">getFID\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(sendToAnalytics)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">getLCP\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(sendToAnalytics)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"performance-budget\">Performance Budget\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// webpack.config.js\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">module\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">exports\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  performance: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    maxAssetSize: \u003C/span>\u003Cspan style=\"color:#79B8FF\">250000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    maxEntrypointSize: \u003C/span>\u003Cspan style=\"color:#79B8FF\">250000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    hints: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'error'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"testing-performance\">Testing Performance\u003C/h2>\n\u003Ch3 id=\"lighthouse-ci\">Lighthouse CI\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"yaml\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># .github/workflows/lighthouse.yml\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">Lighthouse CI\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">on\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">jobs\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  lighthouse\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    runs-on\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">ubuntu-latest\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    steps\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#85E89D\">uses\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">actions/checkout@v2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#85E89D\">name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">Run Lighthouse CI\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">        uses\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">treosh/lighthouse-ci-action@v7\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">        with\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">          configPath\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'.lighthouserc.json'\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"load-testing\">Load Testing\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Using k6 for load testing\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> http \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'k6/http'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { check } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'k6'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> options \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  stages: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    { duration: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'30s'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, target: \u003C/span>\u003Cspan style=\"color:#79B8FF\">20\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    { duration: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'1m'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, target: \u003C/span>\u003Cspan style=\"color:#79B8FF\">20\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    { duration: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'30s'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, target: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  ]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> default\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> response \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> http.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'https://your-site.com'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  check\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(response, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    'status is 200'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: (\u003C/span>\u003Cspan style=\"color:#FFAB70\">r\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> r.status \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 200\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    'response time &#x3C; 500ms'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: (\u003C/span>\u003Cspan style=\"color:#FFAB70\">r\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> r.timings.duration \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 500\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"performance-checklist\">Performance Checklist\u003C/h2>\n\u003Ch3 id=\"before-launch\">Before Launch\u003C/h3>\n\u003Cul class=\"contains-task-list\">\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Optimize images (format, size, lazy loading)\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Minimize and compress CSS/JS\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Implement proper caching headers\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Set up CDN for static assets\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Add performance monitoring\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Test on various devices and networks\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"ongoing-monitoring\">Ongoing Monitoring\u003C/h3>\n\u003Cul class=\"contains-task-list\">\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Monitor Core Web Vitals regularly\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Set up performance alerts\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Regular performance audits\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> User experience monitoring\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Competitive benchmarking\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>Web performance optimization is an ongoing process that requires attention to detail and continuous monitoring. By focusing on Core Web Vitals, optimizing critical resources, and implementing proper measurement strategies, you can create web applications that not only perform well but also provide exceptional user experiences.\u003C/p>\n\u003Cp>Remember that performance is not just a technical metric—it directly impacts user satisfaction, conversion rates, and business success. Invest in performance optimization early and make it a core part of your development process.\u003C/p>\n\u003Cp>The strategies outlined in this guide provide a solid foundation for building fast, responsive web applications. Start with the basics, measure everything, and continuously iterate based on real user data.\u003C/p>",{"headings":609,"localImagePaths":703,"remoteImagePaths":704,"frontmatter":705,"imagePaths":708},[610,612,615,618,621,624,627,630,633,636,639,642,645,648,651,654,657,660,663,666,669,672,675,678,681,684,687,690,693,696,699,702],{"depth":261,"slug":611,"text":595},"web-performance-optimization-a-practical-guide",{"depth":29,"slug":613,"text":614},"understanding-core-web-vitals","Understanding Core Web Vitals",{"depth":267,"slug":616,"text":617},"largest-contentful-paint-lcp","Largest Contentful Paint (LCP)",{"depth":267,"slug":619,"text":620},"first-input-delay-fid","First Input Delay (FID)",{"depth":267,"slug":622,"text":623},"cumulative-layout-shift-cls","Cumulative Layout Shift (CLS)",{"depth":29,"slug":625,"text":626},"image-optimization-strategies","Image Optimization Strategies",{"depth":267,"slug":628,"text":629},"modern-image-formats","Modern Image Formats",{"depth":267,"slug":631,"text":632},"responsive-images","Responsive Images",{"depth":267,"slug":634,"text":635},"lazy-loading-implementation","Lazy Loading Implementation",{"depth":29,"slug":637,"text":638},"javascript-optimization","JavaScript Optimization",{"depth":267,"slug":640,"text":641},"code-splitting","Code Splitting",{"depth":267,"slug":643,"text":644},"bundle-analysis","Bundle Analysis",{"depth":267,"slug":646,"text":647},"tree-shaking","Tree Shaking",{"depth":29,"slug":649,"text":650},"css-performance","CSS Performance",{"depth":267,"slug":652,"text":653},"critical-css","Critical CSS",{"depth":267,"slug":655,"text":656},"css-containment","CSS Containment",{"depth":29,"slug":658,"text":659},"resource-loading-optimization","Resource Loading Optimization",{"depth":267,"slug":661,"text":662},"preloading-critical-resources","Preloading Critical Resources",{"depth":267,"slug":664,"text":665},"service-worker-for-caching","Service Worker for Caching",{"depth":29,"slug":667,"text":668},"database-and-api-optimization","Database and API Optimization",{"depth":267,"slug":670,"text":671},"database-query-optimization","Database Query Optimization",{"depth":267,"slug":673,"text":674},"api-response-optimization","API Response Optimization",{"depth":29,"slug":676,"text":677},"monitoring-and-measurement","Monitoring and Measurement",{"depth":267,"slug":679,"text":680},"performance-monitoring","Performance Monitoring",{"depth":267,"slug":682,"text":683},"performance-budget","Performance Budget",{"depth":29,"slug":685,"text":686},"testing-performance","Testing Performance",{"depth":267,"slug":688,"text":689},"lighthouse-ci","Lighthouse CI",{"depth":267,"slug":691,"text":692},"load-testing","Load Testing",{"depth":29,"slug":694,"text":695},"performance-checklist","Performance Checklist",{"depth":267,"slug":697,"text":698},"before-launch","Before Launch",{"depth":267,"slug":700,"text":701},"ongoing-monitoring","Ongoing Monitoring",{"depth":29,"slug":313,"text":314},[],[],{"title":595,"description":596,"date":706,"tags":707,"readingTime":602},["Date","2024-01-05T00:00:00.000Z"],[599,600,601],[],"performance-optimization.md","how-i-published-my-first-app-to-the-pebble-appstore",{"id":710,"data":712,"body":722,"filePath":723,"digest":724,"rendered":725,"legacyId":739},{"title":713,"description":714,"date":715,"tags":716,"draft":47,"author":251,"readingTime":721},"How I published my first app to the Pebble Appstore","A step-by-step guide to publishing your first Pebble smartwatch app to the Pebble Appstore. Learn about the submission process and common gotchas for iOS users.",["Date","2014-12-10T00:00:00.000Z"],[717,718,719,720],"pebble","smartwatch","app-development","app-store","3 min read","Publishing \u003Ca href=\"https://apps.getpebble.com/applications/53b0d17bb9bff87a3e000077\" target=\"_blank\" rel=\"noopener noreferrer\">Coffee Finder\u003C/a> to the Pebble Appstore was quick and painless! The whole process only took about 10 minutes. \u003Csup>1\u003C/sup>\n\nIt all started on the \u003Ca href=\"https://dev-portal.getpebble.com/developer\" target=\"_blank\" rel=\"noopener noreferrer\">Pebble Dev Portal\u003C/a> where I had to make a profile. Then I had to choose what kind of application I wanted to publish. In my case, I published a \u003Ca href=\"https://dev-portal.getpebble.com/applications/new?type=watchface\" target=\"_blank\" rel=\"noopener noreferrer\">*watchface*\u003C/a>.\n\nFollowing I had to fill out a form that asked a few questions about the application I intended to publish. This was also very quick as it only asked for a Title, Description, website and source code url (which were both optional fields). In this same page I also uploaded a screenshot of my Pebble app.\n\nOn the next page I was able to create a *New Release*, which I called version 1.0, and along with this release I finally uploaded my `.pbw` file.\n\nThe last step I took was making the application public. As soon as I made the application public I was able to find my application on the Pebble Appstore using my phone.\n\nThis was a great experience thanks to the \u003Ca href=\"https://twitter.com/pebbledev\" target=\"_blank\" rel=\"noopener noreferrer\">@PebbleDev\u003C/a> who did a great job at making this whole process so quick and painless.\n\n###*Gotcha:* \"Coming Soon\" message instead of \"Add\" on iOS Devices\nOn the iOS version of the Pebble Appstore, new apps are \u003Ca href=\"http://forums.getpebble.com/discussion/12172/coming-soon-instead-of-add-in-pebble-appstore\" target=\"_blank\" rel=\"noopener noreferrer\">not available for download right away.\u003C/a> Instead, they are only made available once Pebble releases a new version of its application to the \u003Ca href=\"https://itunes.apple.com/us/app/pebble-smartwatch/id592012721?mt=8\" target=\"_blank\" rel=\"noopener noreferrer\">App Store\u003C/a>. Further explanation for this can be found \u003Ca href=\"http://forums.getpebble.com/discussion/12172/coming-soon-instead-of-add-in-pebble-appstore\" target=\"_blank\" rel=\"noopener noreferrer\">here\u003C/a>. I also quickly learned the \u003Ca href=\"https://twitter.com/pebbledev\" target=\"_blank\" rel=\"noopener noreferrer\">@PebbleDev\u003C/a> team keeps third-party developers posted when new Apple App Store releases happen so new updates can be submitted.\n\n#### Personal remarks\n\nDownload my app on the Pebble Appstore now:\nhttps://apps.getpebble.com/applications/53b0d17bb9bff87a3e000077\n\n**Thinking of building your own Pebble app?**\nTake a look at my source code to learn how I built mine: https://github.com/sergiocruz/pebble-coffee-finder\n*(I should be writing a blog post about this soon!)*\n\n\n\u003Csmall>*1. Excludes the time it took to actually write the code to make this application functional.*\u003C/small>","src/content/blog/2014-12-10-first-pebble-app.md","9076d50f078374ef",{"html":726,"metadata":727},"\u003Cp>Publishing \u003Ca href=\"https://apps.getpebble.com/applications/53b0d17bb9bff87a3e000077\" target=\"_blank\" rel=\"noopener noreferrer\">Coffee Finder\u003C/a> to the Pebble Appstore was quick and painless! The whole process only took about 10 minutes. \u003Csup>1\u003C/sup>\u003C/p>\n\u003Cp>It all started on the \u003Ca href=\"https://dev-portal.getpebble.com/developer\" target=\"_blank\" rel=\"noopener noreferrer\">Pebble Dev Portal\u003C/a> where I had to make a profile. Then I had to choose what kind of application I wanted to publish. In my case, I published a \u003Ca href=\"https://dev-portal.getpebble.com/applications/new?type=watchface\" target=\"_blank\" rel=\"noopener noreferrer\">\u003Cem>watchface\u003C/em>\u003C/a>.\u003C/p>\n\u003Cp>Following I had to fill out a form that asked a few questions about the application I intended to publish. This was also very quick as it only asked for a Title, Description, website and source code url (which were both optional fields). In this same page I also uploaded a screenshot of my Pebble app.\u003C/p>\n\u003Cp>On the next page I was able to create a \u003Cem>New Release\u003C/em>, which I called version 1.0, and along with this release I finally uploaded my \u003Ccode>.pbw\u003C/code> file.\u003C/p>\n\u003Cp>The last step I took was making the application public. As soon as I made the application public I was able to find my application on the Pebble Appstore using my phone.\u003C/p>\n\u003Cp>This was a great experience thanks to the \u003Ca href=\"https://twitter.com/pebbledev\" target=\"_blank\" rel=\"noopener noreferrer\">@PebbleDev\u003C/a> who did a great job at making this whole process so quick and painless.\u003C/p>\n\u003Cp>###\u003Cem>Gotcha:\u003C/em> “Coming Soon” message instead of “Add” on iOS Devices\nOn the iOS version of the Pebble Appstore, new apps are \u003Ca href=\"http://forums.getpebble.com/discussion/12172/coming-soon-instead-of-add-in-pebble-appstore\" target=\"_blank\" rel=\"noopener noreferrer\">not available for download right away.\u003C/a> Instead, they are only made available once Pebble releases a new version of its application to the \u003Ca href=\"https://itunes.apple.com/us/app/pebble-smartwatch/id592012721?mt=8\" target=\"_blank\" rel=\"noopener noreferrer\">App Store\u003C/a>. Further explanation for this can be found \u003Ca href=\"http://forums.getpebble.com/discussion/12172/coming-soon-instead-of-add-in-pebble-appstore\" target=\"_blank\" rel=\"noopener noreferrer\">here\u003C/a>. I also quickly learned the \u003Ca href=\"https://twitter.com/pebbledev\" target=\"_blank\" rel=\"noopener noreferrer\">@PebbleDev\u003C/a> team keeps third-party developers posted when new Apple App Store releases happen so new updates can be submitted.\u003C/p>\n\u003Ch4 id=\"personal-remarks\">Personal remarks\u003C/h4>\n\u003Cp>Download my app on the Pebble Appstore now:\n\u003Ca href=\"https://apps.getpebble.com/applications/53b0d17bb9bff87a3e000077\">https://apps.getpebble.com/applications/53b0d17bb9bff87a3e000077\u003C/a>\u003C/p>\n\u003Cp>\u003Cstrong>Thinking of building your own Pebble app?\u003C/strong>\nTake a look at my source code to learn how I built mine: \u003Ca href=\"https://github.com/sergiocruz/pebble-coffee-finder\">https://github.com/sergiocruz/pebble-coffee-finder\u003C/a>\n\u003Cem>(I should be writing a blog post about this soon!)\u003C/em>\u003C/p>\n\u003Cp>\u003Csmall>\u003Cem>1. Excludes the time it took to actually write the code to make this application functional.\u003C/em>\u003C/small>\u003C/p>",{"headings":728,"localImagePaths":733,"remoteImagePaths":734,"frontmatter":735,"imagePaths":738},[729],{"depth":730,"slug":731,"text":732},4,"personal-remarks","Personal remarks",[],[],{"title":713,"description":714,"date":736,"tags":737,"readingTime":721,"slug":710},["Date","2014-12-10T00:00:00.000Z"],[717,718,719,720],[],"2014-12-10-first-pebble-app.md","sailsjs-services-how-to-use-them-in-your-controllers",{"id":740,"data":742,"body":751,"filePath":752,"digest":753,"rendered":754,"legacyId":779},{"title":743,"description":744,"date":745,"tags":746,"draft":47,"author":251,"readingTime":750},"SailsJS Services: What they are and how to use them","Learn what SailsJS Services are and how to use them in your controllers. Services are reusable pieces of business logic that can be shared across your application.",["Date","2014-05-23T00:00:00.000Z"],[371,747,748,749],"services","mvc","business-logic","4 min read","## So what are SailsJS Services?\n\n*Great question!* The \u003Ca href=\"http://sailsjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">SailsJS website\u003C/a> does not have much content about `Services` on their \u003Ca href=\"http://sailsjs.org/#!documentation\" target=\"_blank\" rel=\"noopener noreferrer\">documentation\u003C/a>. I guess they figure `Services` are pretty self-explanatory; which is true for the most part. But I sure would have had appreciated a simple guide describing `Services` when I first started using SailsJS for my applications.\n\n**SailsJS Services are pieces of reusable code that can be shared by your controllers.** Your business logic should live in your `Service` *(and not in your controller!)*. I know I am stepping on egg shells here, but unfortunately many web frameworks have bastarized the definition of models (the \"M\" in \"MVC\") and limited it only to where *database stuff happens*. However by definition `Models` are much more than your Data Access Layer. \u003Ca href=\"https://twitter.com/codinghorror\" target=\"_blank\" rel=\"noopener noreferrer\">@codingerror\u003C/a> put it beautifully when \u003Ca href=\"http://blog.codinghorror.com/understanding-model-view-controller/\" target=\"_blank\" rel=\"noopener noreferrer\">describing MVC Models\u003C/a>: \"Models represent knowledge. A model could be a single object (rather uninteresting), or it could be some structure of objects.\"\n\nSo in other words, SailsJS Services are kind of models, but we'll just stick to the `Services` nomenclature in a SailsJS context to make our lives simpler :)\n\n## How to write SailsJS Services\n\nBelow is a very simple SailsJS Service:\n\n```javascript\n// File location: /api/services/MyFirstService.js\n\n\nvar MyFirstService = {\n  sayHello: function sayHelloService() {\n    return 'Hello I am the real Service';\n  }\n};\n\n\nmodule.exports = MyFirstService;\n```\n\n## How to use Services in my Controllers\n\n```javascript\nvar TestingServicesController = {\n\n  index: function(req, res) {\n\n    // Gets hello message from service\n    var helloMessage = MyFirstService.sayHello();\n\n    // Returns hello message to screen\n    res.send('Our service has a message for you: ' + helloMessage);\n  }\n\n  \n};\n\nmodule.exports = TestingServicesController;\n```\n\nAs you can see above everything simply happens *magically* behind the SailsJS curtains. And by *magically* I mean that SailsJS *automagically* injects services into your controllers:\n\n## A few words on unit testing\n\nAs you can imagine, SailsJS' *magical* way of injecting dependencies into your controllers makes testing a bit difficult. Fortunately I've already got this topic covered on this article: [Unit testing Sails JS: How to mock SailsJS Services in Controllers](/blog/unit-testing-sails-js-how-to-mock-sailsjs-services-in-controllers)\n\n### Demo and code samples\nAs usual, all my code is available on my GitHub account. Feel free to check it out, fork it, modify it and most importantly have fun with it: \u003Ca href=\"https://github.com/sergiocruz/sails-unit-test\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/sergiocruz/sails-unit-test\u003C/a>","src/content/blog/2014-05-23-sails-services.md","87f46560db12c6f2",{"html":755,"metadata":756},"\u003Ch2 id=\"so-what-are-sailsjs-services\">So what are SailsJS Services?\u003C/h2>\n\u003Cp>\u003Cem>Great question!\u003C/em> The \u003Ca href=\"http://sailsjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">SailsJS website\u003C/a> does not have much content about \u003Ccode>Services\u003C/code> on their \u003Ca href=\"http://sailsjs.org/#!documentation\" target=\"_blank\" rel=\"noopener noreferrer\">documentation\u003C/a>. I guess they figure \u003Ccode>Services\u003C/code> are pretty self-explanatory; which is true for the most part. But I sure would have had appreciated a simple guide describing \u003Ccode>Services\u003C/code> when I first started using SailsJS for my applications.\u003C/p>\n\u003Cp>\u003Cstrong>SailsJS Services are pieces of reusable code that can be shared by your controllers.\u003C/strong> Your business logic should live in your \u003Ccode>Service\u003C/code> \u003Cem>(and not in your controller!)\u003C/em>. I know I am stepping on egg shells here, but unfortunately many web frameworks have bastarized the definition of models (the “M” in “MVC”) and limited it only to where \u003Cem>database stuff happens\u003C/em>. However by definition \u003Ccode>Models\u003C/code> are much more than your Data Access Layer. \u003Ca href=\"https://twitter.com/codinghorror\" target=\"_blank\" rel=\"noopener noreferrer\">@codingerror\u003C/a> put it beautifully when \u003Ca href=\"http://blog.codinghorror.com/understanding-model-view-controller/\" target=\"_blank\" rel=\"noopener noreferrer\">describing MVC Models\u003C/a>: “Models represent knowledge. A model could be a single object (rather uninteresting), or it could be some structure of objects.”\u003C/p>\n\u003Cp>So in other words, SailsJS Services are kind of models, but we’ll just stick to the \u003Ccode>Services\u003C/code> nomenclature in a SailsJS context to make our lives simpler :)\u003C/p>\n\u003Ch2 id=\"how-to-write-sailsjs-services\">How to write SailsJS Services\u003C/h2>\n\u003Cp>Below is a very simple SailsJS Service:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// File location: /api/services/MyFirstService.js\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> MyFirstService \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  sayHello\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> sayHelloService\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'Hello I am the real Service'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">module\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">exports\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> MyFirstService;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"how-to-use-services-in-my-controllers\">How to use Services in my Controllers\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> TestingServicesController \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  index\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">req\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">res\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Gets hello message from service\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> helloMessage \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> MyFirstService.\u003C/span>\u003Cspan style=\"color:#B392F0\">sayHello\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Returns hello message to screen\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    res.\u003C/span>\u003Cspan style=\"color:#B392F0\">send\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Our service has a message for you: '\u003C/span>\u003Cspan style=\"color:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> helloMessage);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">module\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">exports\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> TestingServicesController;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>As you can see above everything simply happens \u003Cem>magically\u003C/em> behind the SailsJS curtains. And by \u003Cem>magically\u003C/em> I mean that SailsJS \u003Cem>automagically\u003C/em> injects services into your controllers:\u003C/p>\n\u003Ch2 id=\"a-few-words-on-unit-testing\">A few words on unit testing\u003C/h2>\n\u003Cp>As you can imagine, SailsJS’ \u003Cem>magical\u003C/em> way of injecting dependencies into your controllers makes testing a bit difficult. Fortunately I’ve already got this topic covered on this article: \u003Ca href=\"/blog/unit-testing-sails-js-how-to-mock-sailsjs-services-in-controllers\">Unit testing Sails JS: How to mock SailsJS Services in Controllers\u003C/a>\u003C/p>\n\u003Ch3 id=\"demo-and-code-samples\">Demo and code samples\u003C/h3>\n\u003Cp>As usual, all my code is available on my GitHub account. Feel free to check it out, fork it, modify it and most importantly have fun with it: \u003Ca href=\"https://github.com/sergiocruz/sails-unit-test\" target=\"_blank\" rel=\"noopener noreferrer\">\u003C/a>\u003Ca href=\"https://github.com/sergiocruz/sails-unit-test\">https://github.com/sergiocruz/sails-unit-test\u003C/a>\u003C/p>",{"headings":757,"localImagePaths":773,"remoteImagePaths":774,"frontmatter":775,"imagePaths":778},[758,761,764,767,770],{"depth":29,"slug":759,"text":760},"so-what-are-sailsjs-services","So what are SailsJS Services?",{"depth":29,"slug":762,"text":763},"how-to-write-sailsjs-services","How to write SailsJS Services",{"depth":29,"slug":765,"text":766},"how-to-use-services-in-my-controllers","How to use Services in my Controllers",{"depth":29,"slug":768,"text":769},"a-few-words-on-unit-testing","A few words on unit testing",{"depth":267,"slug":771,"text":772},"demo-and-code-samples","Demo and code samples",[],[],{"title":743,"description":744,"date":776,"tags":777,"readingTime":750,"slug":740},["Date","2014-05-23T00:00:00.000Z"],[371,747,748,749],[],"2014-05-23-sails-services.md","add-meta-data-to-your-restangular-responses",{"id":780,"data":782,"body":791,"filePath":792,"digest":793,"rendered":794,"legacyId":810},{"title":783,"description":784,"date":785,"tags":786,"draft":47,"author":251,"readingTime":750},"Add meta data to your Restangular responses","Learn how to extract and use metadata from RESTful API responses when using Restangular. This guide shows how to handle both data and meta objects in your AngularJS application.",["Date","2015-04-15T00:00:00.000Z"],[787,329,788,789,790],"restangular","api","metadata","rest","I love \u003Ca href=\"https://github.com/mgonto/restangular\" target=\"_blank\" rel=\"noopener noreferrer\">Restangular\u003C/a> and all the functionality it provides, and its API is amazing! Big shout out to \u003Ca href=\"https://twitter.com/mgonto\" target=\"_blank\" rel=\"noopener noreferrer\">@mgonto\u003C/a> whom I had the pleasure to meet and chat with in person at \u003Ca href=\"http://ng-conf.org\" target=\"_blank\" rel=\"noopener noreferrer\">ng-conf 2015\u003C/a>!\n\nToday I ran into something new while integrating with a RESTful backend. The backend returned meta data in its response. Nothing too out of the norm there, I just hadn't dealt with that using Restangular yet.\n\nTo put things into context, here is a sample response from the server:\n\n```javascript\n// Sample data from RESTful server\n{\n  data: [\n    { name: 'John' },\n    { name: 'Doe' }\n  ],\n  meta: {\n    records: 2\n  }\n}\n```\n\n## Extracting `.data` object from backend response\n\nUsually I setup an interceptor to extract the `.data` object from an APIs response. I like doing that so I don't have to repeat myself too much throughout the rest of my code.\n\n```javascript\nangular\n  .module('app')\n  .config(['RestangularProvider', function(RestangularProvider) {\n    // Always extracts `data` from response\n    RestangularProvider.setResponseExtractor(function extractResponse(serverResponse, operation) {\n      return serverResponse.data;\n    });\n  }]);\n\n```\n\nThe code above just makes sure Restangular promises receive the unwrapped `.data` object. Feel free to visit \u003Ca href=\"https://github.com/mgonto/restangular#how-to-configure-them-globally\" target=\"_blank\" rel=\"noopener noreferrer\">Restangular's Documentation\u003C/a> to learn more about this works.\n\n## At last, the meta data\n\nThe above solution looks great! But how can you have access to both `.data` and `.meta` from your controllers now?\n\nThe above solution looks great! But how can you have access to `.data` and `.meta` from your controllers now? My 5-minute fix was to attach the `.meta` object to `.data` (it does feel ugly I am not going to lie):\n\n```javascript\nangular\n  .module('app')\n  .config(['RestangularProvider', function(RestangularProvider) {\n    // Always extracts `data` from response\n    RestangularProvider.setResponseExtractor(function extractResponse(serverResponse, operation) {\n    \n      // Response from server\n      var response = serverResponse.data;\n      \n      // Attaches meta object to the response object\n      if ('meta' in serverResponse) {\n        response.meta = serverResponse.meta;\n      }\n      \n      return response;\n    });\n  }]);\n\n```\n\nSimple right?\n\nThis solution didn't seem right to me at first. \"What if `serverResponse.data` is an array\" I thought to myself. This might break things right?  Nope, no breaking things. It turns out arrays in javascript were objects before they became arrays. So you can add properties to your arrays just fine.\n\nPS: I have only tested this solution in Chrome. Not sure how other browsers will like this idea.\n\nI'm also anxious to hear about more elegant solutions to this problem, as the more I dig through Restangular, the more n00b I feel about it.\n\nSo if you have any feedback, please drop a line below :)","src/content/blog/2015-04-15-restangular-metadata.md","698576bda6395e5a",{"html":795,"metadata":796},"\u003Cp>I love \u003Ca href=\"https://github.com/mgonto/restangular\" target=\"_blank\" rel=\"noopener noreferrer\">Restangular\u003C/a> and all the functionality it provides, and its API is amazing! Big shout out to \u003Ca href=\"https://twitter.com/mgonto\" target=\"_blank\" rel=\"noopener noreferrer\">@mgonto\u003C/a> whom I had the pleasure to meet and chat with in person at \u003Ca href=\"http://ng-conf.org\" target=\"_blank\" rel=\"noopener noreferrer\">ng-conf 2015\u003C/a>!\u003C/p>\n\u003Cp>Today I ran into something new while integrating with a RESTful backend. The backend returned meta data in its response. Nothing too out of the norm there, I just hadn’t dealt with that using Restangular yet.\u003C/p>\n\u003Cp>To put things into context, here is a sample response from the server:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Sample data from RESTful server\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  data\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    { name: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'John'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    { name: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Doe'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  ],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  meta\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    records\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"extracting-data-object-from-backend-response\">Extracting \u003Ccode>.data\u003C/code> object from backend response\u003C/h2>\n\u003Cp>Usually I setup an interceptor to extract the \u003Ccode>.data\u003C/code> object from an APIs response. I like doing that so I don’t have to repeat myself too much throughout the rest of my code.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">angular\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  .\u003C/span>\u003Cspan style=\"color:#B392F0\">module\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'app'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  .\u003C/span>\u003Cspan style=\"color:#B392F0\">config\u003C/span>\u003Cspan style=\"color:#E1E4E8\">([\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'RestangularProvider'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">RestangularProvider\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Always extracts `data` from response\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    RestangularProvider.\u003C/span>\u003Cspan style=\"color:#B392F0\">setResponseExtractor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> extractResponse\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">serverResponse\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">operation\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> serverResponse.data;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The code above just makes sure Restangular promises receive the unwrapped \u003Ccode>.data\u003C/code> object. Feel free to visit \u003Ca href=\"https://github.com/mgonto/restangular#how-to-configure-them-globally\" target=\"_blank\" rel=\"noopener noreferrer\">Restangular’s Documentation\u003C/a> to learn more about this works.\u003C/p>\n\u003Ch2 id=\"at-last-the-meta-data\">At last, the meta data\u003C/h2>\n\u003Cp>The above solution looks great! But how can you have access to both \u003Ccode>.data\u003C/code> and \u003Ccode>.meta\u003C/code> from your controllers now?\u003C/p>\n\u003Cp>The above solution looks great! But how can you have access to \u003Ccode>.data\u003C/code> and \u003Ccode>.meta\u003C/code> from your controllers now? My 5-minute fix was to attach the \u003Ccode>.meta\u003C/code> object to \u003Ccode>.data\u003C/code> (it does feel ugly I am not going to lie):\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">angular\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  .\u003C/span>\u003Cspan style=\"color:#B392F0\">module\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'app'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  .\u003C/span>\u003Cspan style=\"color:#B392F0\">config\u003C/span>\u003Cspan style=\"color:#E1E4E8\">([\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'RestangularProvider'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">RestangularProvider\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Always extracts `data` from response\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    RestangularProvider.\u003C/span>\u003Cspan style=\"color:#B392F0\">setResponseExtractor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> extractResponse\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">serverResponse\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">operation\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // Response from server\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> response \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> serverResponse.data;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // Attaches meta object to the response object\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'meta'\u003C/span>\u003Cspan style=\"color:#F97583\"> in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> serverResponse) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        response.meta \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> serverResponse.meta;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> response;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Simple right?\u003C/p>\n\u003Cp>This solution didn’t seem right to me at first. “What if \u003Ccode>serverResponse.data\u003C/code> is an array” I thought to myself. This might break things right?  Nope, no breaking things. It turns out arrays in javascript were objects before they became arrays. So you can add properties to your arrays just fine.\u003C/p>\n\u003Cp>PS: I have only tested this solution in Chrome. Not sure how other browsers will like this idea.\u003C/p>\n\u003Cp>I’m also anxious to hear about more elegant solutions to this problem, as the more I dig through Restangular, the more n00b I feel about it.\u003C/p>\n\u003Cp>So if you have any feedback, please drop a line below :)\u003C/p>",{"headings":797,"localImagePaths":804,"remoteImagePaths":805,"frontmatter":806,"imagePaths":809},[798,801],{"depth":29,"slug":799,"text":800},"extracting-data-object-from-backend-response","Extracting .data object from backend response",{"depth":29,"slug":802,"text":803},"at-last-the-meta-data","At last, the meta data",[],[],{"title":783,"description":784,"date":807,"tags":808,"readingTime":750,"slug":780},["Date","2015-04-15T00:00:00.000Z"],[787,329,788,789,790],[],"2015-04-15-restangular-metadata.md","consuming-private-libraries-from-github-packages",{"id":811,"data":813,"body":822,"filePath":823,"digest":824,"rendered":825,"legacyId":853},{"title":814,"description":815,"date":816,"tags":817,"draft":47,"author":251,"readingTime":602},"Consume private libraries from GitHub Packages using npm or yarn","Step-by-step guide to consuming private JavaScript libraries from GitHub Packages Registry using npm or yarn. Learn how to set up authentication and configure your projects.",["Date","2020-12-20T00:00:00.000Z"],[818,819,820,821,515],"github-packages","npm","yarn","private-packages","The first time I tried consuming a private JavaScript library from the [GitHub Packages Registry](https://docs.github.com/en/free-pro-team@latest/packages/quickstart), I had to navigate through a handful of webpages and wrangle a bunch of information together before I was able to run a simple npm or yarn install. That's why I'm excited to put all the information you need in a simple-to-follow article. Please note that this article assumes you're running an unix operating system.\n\n\nHere's an overview of the steps we're covering:\n\n1. Create a personal access token on GitHub\n1. Add an npm registry resolver to your local environment\n1. Add a file to the repository that will be consuming the private package\n1. Start consuming your packages\n\nBefore we can start consuming private packages, the registry needs to know who you are each time you try to access it. That's why we'll start by creating a personal access token on GitHub. Your system will use it each time it needs to access the GitHub Packages Registry to install libraries.\n\n## Create a personal access token on GitHub\n\nStart by creating a [personal token on GitHub](https://github.com/settings/tokens/new):\n\n1. For the `Note` field, put down \"GitHub Packages\" as the description, so we'll know what we used this token for in the future\n1. Under `Select scopes`, select the `repo` option: _(checking the `repo` scope, should automatically check all the options under it:)_\n    * `repo:status`\n    * `repo_deployment`\n    * `public_repo`\n    * `repo:invite`\n    * `security_events`\n    * `read:packages`\n\n1. Hit the \"Generate Token\" button\n1. Copy the newly generated token onto your clipboard, as we're going to use it shortly\n\n\n\n## Add an npm registry resolver to your local environment\n\nWe're going to authenticate you into the GitHub Packages Registry by using your GitHub username and the Personal Access Token you just created as the password. To do so, pull up your Terminal and follow these steps:\n\n* Run `npm login --registry=https://npm.pkg.github.com` and enter these options:\n  * **Username**: Enter your GitHub username\n  * **Password**: Paste the Personal Access Token you previously created\n  * **Email**: Enter an email address associated with your GitHub account\n\nNow npm will know how to forward your authentication credentials to the GitHub Packages Registry every time we try to access it. That way GitHub Packages will know who you are and what packages you have access to.\n\n\n## Configure package consumption\n\nLet's create a new file at the root of your project called `.npmrc`. This file will instruct npm (or yarn) to pull packages directly from the GitHub Packages Registry. Below is an example of what your file should look like:\n\n```shell\n# File location: `~/some-directory/your-project/.npmrc`\n# Registry for the @my-org scope\n@my-org:registry=https://npm.pkg.github.com/\n```\n\nNow any libraries you add via `npm` or `yarn` that use the `@my-org` scope will be installed directly from the GitHub Packages Registry.\n\n### A little background on package scopes\n\nThe GitHub Packages Registry requires library authors to follow a few conventions when publishing packages. Understanding those conventions will add some color to how we're configuring your development environment.\n\nWhen publishing a package to the GitHub Packages Registry, package names must live [under a package scope](https://docs.npmjs.com/cli/v6/using-npm/scope). If you're interested in examples of scoped JavaScript packages, you need to look no further than Angular projects. If you look at [any projects that use Angular](https://github.com/sergiocruz/ng-karaoke/blob/master/package.json#L17), you'll notice that the names of the dependencies that Angular brings in have a scope (aka namespace, or a vendor prefix) of `@angular`, such as `@angular/core`, or `@angular/router`.\n\nThe scope that library authors must use can be either their GitHub usernames, or their GitHub organization's name, such as `@sergiocruz/library-name`, or `@my-org/library-name`.\n\n\n### Global npm configuration instead of project-level configuration\n\nIt's my personal preference to configure package consumption by project, thereby adding an `.npmrc` file to each of my projects that will consume private libraries from the GitHub Packages Registry.\n\nI prefer project-level configuration over a global npm configuration for the same reasons why I prefer to use scoped variables instead of global variables when writing JavaScript. Some folks coined this concept as the [Strictness Principle: Restrict the scope of what you do. Increase the scope as the need arises](https://medium.com/@fagnerbrack/the-strictness-principle-9997e483cafb). I feel similarly about configuration, it's easier to spot mistakes when they're scoped to a single project. It is possible, however, to configure npm globally to consume scoped packages from the GitHub Packages Registry, if that's what you prefer to do.\n\nYou should already have an npm configuration file under your user's home directory, namely `~/.npmrc`. Add the same lines mentioned above for the per-project configuration:\n\n```shell\n# File location: ~/.npmrc\n# Registry for the @my-org scope\n@my-org:registry=https://npm.pkg.github.com/\n```\n\nNow every time you install any packages under the `@my-org` scope anywhere on your machine, npm will know to fetch those packages from the GitHub Packages Registry.\n\n\n## Start consuming your packages\n\nAfter configuring your work environment, you'll be able to follow the same steps you usually do to install any packages.\n\nPull up your terminal and run:\n\n```shell\nnpm install @my-org/package-name --save\n```\n\nIf you prefer to use `yarn`, all the previous steps we followed should work seamlessly for it.\n\n```shell\nyarn add @my-org/package-name\n```\n\nIf you'd like a deeper dive into GitHub Packages, I would suggest browsing through their documentation to learn more about [how to configure npm for use with GitHub Packages](https://docs.github.com/en/free-pro-team@latest/packages/guides/configuring-npm-for-use-with-github-packages), among other use cases.\n\nI hope this a helpful resource as you get a good handle on how to consume private npm libraries using GitHub Packages. Please feel free to reach out to me, preferrably via [Twitter](https://twitter.com/hashtagserg), if you think this guide is missing any key information.","src/content/blog/2020-13-20-consuming-github-packages.md","6ae828a435403c7c",{"html":826,"metadata":827},"\u003Cp>The first time I tried consuming a private JavaScript library from the \u003Ca href=\"https://docs.github.com/en/free-pro-team@latest/packages/quickstart\">GitHub Packages Registry\u003C/a>, I had to navigate through a handful of webpages and wrangle a bunch of information together before I was able to run a simple npm or yarn install. That’s why I’m excited to put all the information you need in a simple-to-follow article. Please note that this article assumes you’re running an unix operating system.\u003C/p>\n\u003Cp>Here’s an overview of the steps we’re covering:\u003C/p>\n\u003Col>\n\u003Cli>Create a personal access token on GitHub\u003C/li>\n\u003Cli>Add an npm registry resolver to your local environment\u003C/li>\n\u003Cli>Add a file to the repository that will be consuming the private package\u003C/li>\n\u003Cli>Start consuming your packages\u003C/li>\n\u003C/ol>\n\u003Cp>Before we can start consuming private packages, the registry needs to know who you are each time you try to access it. That’s why we’ll start by creating a personal access token on GitHub. Your system will use it each time it needs to access the GitHub Packages Registry to install libraries.\u003C/p>\n\u003Ch2 id=\"create-a-personal-access-token-on-github\">Create a personal access token on GitHub\u003C/h2>\n\u003Cp>Start by creating a \u003Ca href=\"https://github.com/settings/tokens/new\">personal token on GitHub\u003C/a>:\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>For the \u003Ccode>Note\u003C/code> field, put down “GitHub Packages” as the description, so we’ll know what we used this token for in the future\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Under \u003Ccode>Select scopes\u003C/code>, select the \u003Ccode>repo\u003C/code> option: \u003Cem>(checking the \u003Ccode>repo\u003C/code> scope, should automatically check all the options under it:)\u003C/em>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>repo:status\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>repo_deployment\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>public_repo\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>repo:invite\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>security_events\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>read:packages\u003C/code>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>Hit the “Generate Token” button\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Copy the newly generated token onto your clipboard, as we’re going to use it shortly\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"add-an-npm-registry-resolver-to-your-local-environment\">Add an npm registry resolver to your local environment\u003C/h2>\n\u003Cp>We’re going to authenticate you into the GitHub Packages Registry by using your GitHub username and the Personal Access Token you just created as the password. To do so, pull up your Terminal and follow these steps:\u003C/p>\n\u003Cul>\n\u003Cli>Run \u003Ccode>npm login --registry=https://npm.pkg.github.com\u003C/code> and enter these options:\n\u003Cul>\n\u003Cli>\u003Cstrong>Username\u003C/strong>: Enter your GitHub username\u003C/li>\n\u003Cli>\u003Cstrong>Password\u003C/strong>: Paste the Personal Access Token you previously created\u003C/li>\n\u003Cli>\u003Cstrong>Email\u003C/strong>: Enter an email address associated with your GitHub account\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>Now npm will know how to forward your authentication credentials to the GitHub Packages Registry every time we try to access it. That way GitHub Packages will know who you are and what packages you have access to.\u003C/p>\n\u003Ch2 id=\"configure-package-consumption\">Configure package consumption\u003C/h2>\n\u003Cp>Let’s create a new file at the root of your project called \u003Ccode>.npmrc\u003C/code>. This file will instruct npm (or yarn) to pull packages directly from the GitHub Packages Registry. Below is an example of what your file should look like:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># File location: `~/some-directory/your-project/.npmrc`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Registry for the @my-org scope\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@my-org:registry\u003C/span>\u003Cspan style=\"color:#9ECBFF\">=https://npm.pkg.github.com/\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Now any libraries you add via \u003Ccode>npm\u003C/code> or \u003Ccode>yarn\u003C/code> that use the \u003Ccode>@my-org\u003C/code> scope will be installed directly from the GitHub Packages Registry.\u003C/p>\n\u003Ch3 id=\"a-little-background-on-package-scopes\">A little background on package scopes\u003C/h3>\n\u003Cp>The GitHub Packages Registry requires library authors to follow a few conventions when publishing packages. Understanding those conventions will add some color to how we’re configuring your development environment.\u003C/p>\n\u003Cp>When publishing a package to the GitHub Packages Registry, package names must live \u003Ca href=\"https://docs.npmjs.com/cli/v6/using-npm/scope\">under a package scope\u003C/a>. If you’re interested in examples of scoped JavaScript packages, you need to look no further than Angular projects. If you look at \u003Ca href=\"https://github.com/sergiocruz/ng-karaoke/blob/master/package.json#L17\">any projects that use Angular\u003C/a>, you’ll notice that the names of the dependencies that Angular brings in have a scope (aka namespace, or a vendor prefix) of \u003Ccode>@angular\u003C/code>, such as \u003Ccode>@angular/core\u003C/code>, or \u003Ccode>@angular/router\u003C/code>.\u003C/p>\n\u003Cp>The scope that library authors must use can be either their GitHub usernames, or their GitHub organization’s name, such as \u003Ccode>@sergiocruz/library-name\u003C/code>, or \u003Ccode>@my-org/library-name\u003C/code>.\u003C/p>\n\u003Ch3 id=\"global-npm-configuration-instead-of-project-level-configuration\">Global npm configuration instead of project-level configuration\u003C/h3>\n\u003Cp>It’s my personal preference to configure package consumption by project, thereby adding an \u003Ccode>.npmrc\u003C/code> file to each of my projects that will consume private libraries from the GitHub Packages Registry.\u003C/p>\n\u003Cp>I prefer project-level configuration over a global npm configuration for the same reasons why I prefer to use scoped variables instead of global variables when writing JavaScript. Some folks coined this concept as the \u003Ca href=\"https://medium.com/@fagnerbrack/the-strictness-principle-9997e483cafb\">Strictness Principle: Restrict the scope of what you do. Increase the scope as the need arises\u003C/a>. I feel similarly about configuration, it’s easier to spot mistakes when they’re scoped to a single project. It is possible, however, to configure npm globally to consume scoped packages from the GitHub Packages Registry, if that’s what you prefer to do.\u003C/p>\n\u003Cp>You should already have an npm configuration file under your user’s home directory, namely \u003Ccode>~/.npmrc\u003C/code>. Add the same lines mentioned above for the per-project configuration:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># File location: ~/.npmrc\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Registry for the @my-org scope\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@my-org:registry\u003C/span>\u003Cspan style=\"color:#9ECBFF\">=https://npm.pkg.github.com/\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Now every time you install any packages under the \u003Ccode>@my-org\u003C/code> scope anywhere on your machine, npm will know to fetch those packages from the GitHub Packages Registry.\u003C/p>\n\u003Ch2 id=\"start-consuming-your-packages\">Start consuming your packages\u003C/h2>\n\u003Cp>After configuring your work environment, you’ll be able to follow the same steps you usually do to install any packages.\u003C/p>\n\u003Cp>Pull up your terminal and run:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> @my-org/package-name\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --save\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>If you prefer to use \u003Ccode>yarn\u003C/code>, all the previous steps we followed should work seamlessly for it.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">yarn\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> add\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> @my-org/package-name\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>If you’d like a deeper dive into GitHub Packages, I would suggest browsing through their documentation to learn more about \u003Ca href=\"https://docs.github.com/en/free-pro-team@latest/packages/guides/configuring-npm-for-use-with-github-packages\">how to configure npm for use with GitHub Packages\u003C/a>, among other use cases.\u003C/p>\n\u003Cp>I hope this a helpful resource as you get a good handle on how to consume private npm libraries using GitHub Packages. Please feel free to reach out to me, preferrably via \u003Ca href=\"https://twitter.com/hashtagserg\">Twitter\u003C/a>, if you think this guide is missing any key information.\u003C/p>",{"headings":828,"localImagePaths":847,"remoteImagePaths":848,"frontmatter":849,"imagePaths":852},[829,832,835,838,841,844],{"depth":29,"slug":830,"text":831},"create-a-personal-access-token-on-github","Create a personal access token on GitHub",{"depth":29,"slug":833,"text":834},"add-an-npm-registry-resolver-to-your-local-environment","Add an npm registry resolver to your local environment",{"depth":29,"slug":836,"text":837},"configure-package-consumption","Configure package consumption",{"depth":267,"slug":839,"text":840},"a-little-background-on-package-scopes","A little background on package scopes",{"depth":267,"slug":842,"text":843},"global-npm-configuration-instead-of-project-level-configuration","Global npm configuration instead of project-level configuration",{"depth":29,"slug":845,"text":846},"start-consuming-your-packages","Start consuming your packages",[],[],{"title":814,"description":815,"date":850,"tags":851,"readingTime":602,"slug":811},["Date","2020-12-20T00:00:00.000Z"],[818,819,820,821,515],[],"2020-13-20-consuming-github-packages.md","unit-testing-sails-js-how-to-mock-sailsjs-services-in-controllers",{"id":854,"data":856,"body":863,"filePath":864,"digest":865,"rendered":866,"legacyId":883},{"title":857,"description":858,"date":859,"tags":860,"draft":47,"author":251,"readingTime":602},"Unit testing Sails JS: How to mock SailsJS Services in Controllers","Learn how to mock SailsJS services when unit testing controllers. This guide shows you how to lift Sails in tests and properly stub services using Sinon for effective testing.",["Date","2014-05-23T00:00:00.000Z"],[371,330,861,862,747],"mocking","sinon","On my previous article get your [SailsJS testing environment setup, and also how to run a *basic test*](/blog/unit-test-sailsjs-with-mocha-and-instanbul-for-code-coverage/). But let's face it: when it comes to real life, *basic is never enough! On this article I will be covering a more realistic scenario:\n\nLet's suppose you wrote a \u003Ca href=\"https://sailsjs.org/#!documentation/controllers\" target=\"_blank\">SailsJS Controller\u003C/a> and a SailsJS Service. You got them to work together, and now you want to mock the service while testing your controller.\n\nThe problem is that SailsJS *magically* injects Services -- and Models, and everything else -- into the Controller, making it difficult to simply call `HelloController.index()` without *lifting SailsJS*. We need the dependencies to be in place (otherwise we will get a bunch of ugly *undefined is not a function* kind of errors.\n\nFortunately, *lifting SailsJS* in code is almost as easy as running `sails lift` on your command line, and that is exactly what we are going to do in order run our tests.\n\n## So... how do I mock services in my controllers?\n\n*I'm glad you asked!* First things first, pretend we already have a controller and a service in place: The controller is called `TestingServicesController` and the service is called `MyFirstService`.\n\n**Step 1:**\nStart by instantiating SailsJS in your test file:\n\n```javascript\nvar Sails = require('sails'),\n    sinon = require('sinon'),\n    assert = require('assert');\n```\n\n**Step 2:**\nLift SailsJS before executing each test and *lower* it after the test is executed:\n```javascript\n\nvar app,\n\ttestingServicesController;\n\n// Gets run before each test\nbefore(function beforeControllerTest(done) {\n\n  // Lift Sails and start the server\n  Sails.lift({\n\n    log: {\n      level: 'error'\n    },\n\n  }, function(err, sails) {\n  \n  \t// Instantiates new sails application\n    app = sails;\n    \n    // Instantiates controller\n    testingServicesController = app.controllers.testingservices;\n    \n    // Lets testing framework know async call is done\n    done(err, sails);\n  });\n});\n\n// Gets run after each test\nafter(function afterControllerTest(done){\n\n  // Destroys application\n  app.lower(done);\n  \n});\n```\n\n**Step 3:**\nMock service and test controller\n\n```javascript\nit('should have called mocked service', function() {\n\n  // Mocking our service\n  sinon.stub(app.services.myfirstservice, 'sayHello', function() {\n    return 'Hello I am the mocked Service';\n  });\n\n  // JSON object spy\n  var send = sinon.spy();\n\n  // Executes controller action\n  testingServicesController.index(null, {\n    'send': send\n  });\n\n  // Makes sure the mocked service was called\n  // instead of the real one\n  assert(send.called);\n  assert(send.calledWith('Our service has a message for you: Hello I am the mocked Service'));\n\n  // Restores our mock to the original service\n  app.services.myfirstservice.sayHello.restore();\n  // Notice that the above action this is very important\n  // because if the original action does not get restored,\n  // then this mock will be used in other tests\n  \n});\n```\n\n## Putting the pieces of the puzzle together\n\nBelow is what my code looks like when we put all three steps together:\n\n```javascript\nvar Sails = require('sails'),\n    sinon = require('sinon'),\n    assert = require('assert');\n\ndescribe('The TestingServices Controller', function() {\n\n  // app and testingServicesController \n  var app,\n      testingServicesController;\n\n  // Global before hook\n  before(function beforeControllerTest(done) {\n\n    // Lift Sails and start the server\n    Sails.lift({\n\n      log: {\n        level: 'error'\n      },\n\n    }, function(err, sails) {\n      app = sails;\n\n      // TestingServices controller\n      testingServicesController = app.controllers.testingservices;\n\n      done(err, sails);\n    });\n  });\n\n  after(function afterControllerTest(done){\n    app.lower(done);\n  });\n\n  describe('when we invoke the index action', function() {\n\n    before(function() {\n      // Mocking our service\n      sinon.stub(app.services.myfirstservice, 'sayHello', function() {\n        return 'Hello I am the mocked Service';\n      });\n    });\n\n    after(function() {\n      // Restores our mock to the original service\n      app.services.myfirstservice.sayHello.restore();\n    });\n\n    it('should have called mocked service', function() {\n\n      // JSON object spy\n      var send = sinon.spy();\n\n      // Executes controller action\n      testingServicesController.index(null, {\n        'send': send\n      });\n\n      // Makes sure the mocked service was called\n      // instead of the real one\n      assert(send.called);\n      assert(send.calledWith('Our service has a message for you: Hello I am the mocked Service'));\n    });\n\n  });\n});\n\n```\n\n### Demo and code samples\nYou know you can always count on me when it comes to post my working code to GitHub! Check out the full working copy here:\u003Cbr />\u003Ca href=\"https://github.com/sergiocruz/sails-unit-test\" target=\"_blank\">https://github.com/sergiocruz/sails-unit-test\u003C/a>","src/content/blog/2014-05-23-mock-sails-services.md","be3216a910811388",{"html":867,"metadata":868},"\u003Cp>On my previous article get your \u003Ca href=\"/blog/unit-test-sailsjs-with-mocha-and-instanbul-for-code-coverage/\">SailsJS testing environment setup, and also how to run a \u003Cem>basic test\u003C/em>\u003C/a>. But let’s face it: when it comes to real life, *basic is never enough! On this article I will be covering a more realistic scenario:\u003C/p>\n\u003Cp>Let’s suppose you wrote a \u003Ca href=\"https://sailsjs.org/#!documentation/controllers\" target=\"_blank\">SailsJS Controller\u003C/a> and a SailsJS Service. You got them to work together, and now you want to mock the service while testing your controller.\u003C/p>\n\u003Cp>The problem is that SailsJS \u003Cem>magically\u003C/em> injects Services — and Models, and everything else — into the Controller, making it difficult to simply call \u003Ccode>HelloController.index()\u003C/code> without \u003Cem>lifting SailsJS\u003C/em>. We need the dependencies to be in place (otherwise we will get a bunch of ugly \u003Cem>undefined is not a function\u003C/em> kind of errors.\u003C/p>\n\u003Cp>Fortunately, \u003Cem>lifting SailsJS\u003C/em> in code is almost as easy as running \u003Ccode>sails lift\u003C/code> on your command line, and that is exactly what we are going to do in order run our tests.\u003C/p>\n\u003Ch2 id=\"so-how-do-i-mock-services-in-my-controllers\">So… how do I mock services in my controllers?\u003C/h2>\n\u003Cp>\u003Cem>I’m glad you asked!\u003C/em> First things first, pretend we already have a controller and a service in place: The controller is called \u003Ccode>TestingServicesController\u003C/code> and the service is called \u003Ccode>MyFirstService\u003C/code>.\u003C/p>\n\u003Cp>\u003Cstrong>Step 1:\u003C/strong>\nStart by instantiating SailsJS in your test file:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Sails \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> require\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'sails'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    sinon \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> require\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'sinon'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    assert \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> require\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'assert'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Step 2:\u003C/strong>\nLift SailsJS before executing each test and \u003Cem>lower\u003C/em> it after the test is executed:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> app,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\ttestingServicesController;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Gets run before each test\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">before\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> beforeControllerTest\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">done\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // Lift Sails and start the server\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  Sails.\u003C/span>\u003Cspan style=\"color:#B392F0\">lift\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    log: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      level: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'error'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }, \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">err\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">sails\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  \t// Instantiates new sails application\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    app \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sails;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Instantiates controller\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    testingServicesController \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> app.controllers.testingservices;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Lets testing framework know async call is done\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    done\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(err, sails);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Gets run after each test\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">after\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> afterControllerTest\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">done\u003C/span>\u003Cspan style=\"color:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // Destroys application\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  app.\u003C/span>\u003Cspan style=\"color:#B392F0\">lower\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(done);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Step 3:\u003C/strong>\nMock service and test controller\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">it\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'should have called mocked service'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // Mocking our service\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  sinon.\u003C/span>\u003Cspan style=\"color:#B392F0\">stub\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(app.services.myfirstservice, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'sayHello'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'Hello I am the mocked Service'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // JSON object spy\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> send \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sinon.\u003C/span>\u003Cspan style=\"color:#B392F0\">spy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // Executes controller action\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  testingServicesController.\u003C/span>\u003Cspan style=\"color:#B392F0\">index\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    'send'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: send\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // Makes sure the mocked service was called\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // instead of the real one\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  assert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(send.called);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  assert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(send.\u003C/span>\u003Cspan style=\"color:#B392F0\">calledWith\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Our service has a message for you: Hello I am the mocked Service'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // Restores our mock to the original service\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  app.services.myfirstservice.sayHello.\u003C/span>\u003Cspan style=\"color:#B392F0\">restore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // Notice that the above action this is very important\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // because if the original action does not get restored,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // then this mock will be used in other tests\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"putting-the-pieces-of-the-puzzle-together\">Putting the pieces of the puzzle together\u003C/h2>\n\u003Cp>Below is what my code looks like when we put all three steps together:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Sails \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> require\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'sails'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    sinon \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> require\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'sinon'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    assert \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> require\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'assert'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">describe\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'The TestingServices Controller'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // app and testingServicesController \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> app,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      testingServicesController;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // Global before hook\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  before\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> beforeControllerTest\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">done\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Lift Sails and start the server\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    Sails.\u003C/span>\u003Cspan style=\"color:#B392F0\">lift\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      log: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        level: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'error'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }, \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">err\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">sails\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      app \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sails;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // TestingServices controller\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      testingServicesController \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> app.controllers.testingservices;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      done\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(err, sails);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  after\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> afterControllerTest\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">done\u003C/span>\u003Cspan style=\"color:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    app.\u003C/span>\u003Cspan style=\"color:#B392F0\">lower\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(done);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  describe\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'when we invoke the index action'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    before\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // Mocking our service\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      sinon.\u003C/span>\u003Cspan style=\"color:#B392F0\">stub\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(app.services.myfirstservice, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'sayHello'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'Hello I am the mocked Service'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    after\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // Restores our mock to the original service\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      app.services.myfirstservice.sayHello.\u003C/span>\u003Cspan style=\"color:#B392F0\">restore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    it\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'should have called mocked service'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // JSON object spy\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> send \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sinon.\u003C/span>\u003Cspan style=\"color:#B392F0\">spy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // Executes controller action\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      testingServicesController.\u003C/span>\u003Cspan style=\"color:#B392F0\">index\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        'send'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: send\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // Makes sure the mocked service was called\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // instead of the real one\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      assert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(send.called);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      assert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(send.\u003C/span>\u003Cspan style=\"color:#B392F0\">calledWith\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Our service has a message for you: Hello I am the mocked Service'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"demo-and-code-samples\">Demo and code samples\u003C/h3>\n\u003Cp>You know you can always count on me when it comes to post my working code to GitHub! Check out the full working copy here:\u003Cbr>\u003Ca href=\"https://github.com/sergiocruz/sails-unit-test\" target=\"_blank\">\u003C/a>\u003Ca href=\"https://github.com/sergiocruz/sails-unit-test\">https://github.com/sergiocruz/sails-unit-test\u003C/a>\u003C/p>",{"headings":869,"localImagePaths":877,"remoteImagePaths":878,"frontmatter":879,"imagePaths":882},[870,873,876],{"depth":29,"slug":871,"text":872},"so-how-do-i-mock-services-in-my-controllers","So… how do I mock services in my controllers?",{"depth":29,"slug":874,"text":875},"putting-the-pieces-of-the-puzzle-together","Putting the pieces of the puzzle together",{"depth":267,"slug":771,"text":772},[],[],{"title":857,"description":858,"date":880,"tags":881,"readingTime":602,"slug":854},["Date","2014-05-23T00:00:00.000Z"],[371,330,861,862,747],[],"2014-05-23-mock-sails-services.md"]