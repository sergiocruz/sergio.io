[["Map",1,2,9,10,299,300,495,496,620,621],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.11.1","content-config-digest","3fec00fb44e6b4db","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://sergio.io\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,43,44,86,87,118,119,150,151,194,195,235,236,263,264],"how-i-published-my-first-app-to-the-pebble-appstore",{"id":11,"data":13,"body":25,"filePath":26,"digest":27,"rendered":28,"legacyId":42},{"title":14,"description":15,"date":16,"tags":17,"draft":22,"author":23,"readingTime":24},"How I published my first app to the Pebble Appstore","A step-by-step guide to publishing your first Pebble smartwatch app to the Pebble Appstore. Learn about the submission process and common gotchas for iOS users.",["Date","2014-12-10T00:00:00.000Z"],[18,19,20,21],"pebble","smartwatch","app-development","app-store",false,"Sergio Cruz","3 min read","Publishing\n\u003Ca href=\"https://apps.getpebble.com/applications/53b0d17bb9bff87a3e000077\" target=\"_blank\" rel=\"noopener noreferrer\">Coffee\nFinder\u003C/a> to the Pebble Appstore was quick and painless! The whole process only\ntook about 10 minutes. \u003Csup>1\u003C/sup>\n\nIt all started on the\n\u003Ca href=\"https://dev-portal.getpebble.com/developer\" target=\"_blank\" rel=\"noopener noreferrer\">Pebble\nDev Portal\u003C/a> where I had to make a profile. Then I had to choose what kind of\napplication I wanted to publish. In my case, I published a\n\u003Ca href=\"https://dev-portal.getpebble.com/applications/new?type=watchface\" target=\"_blank\" rel=\"noopener noreferrer\">_watchface_\u003C/a>.\n\nFollowing I had to fill out a form that asked a few questions about the\napplication I intended to publish. This was also very quick as it only asked for\na Title, Description, website and source code url (which were both optional\nfields). In this same page I also uploaded a screenshot of my Pebble app.\n\nOn the next page I was able to create a _New Release_, which I called version\n1.0, and along with this release I finally uploaded my `.pbw` file.\n\nThe last step I took was making the application public. As soon as I made the\napplication public I was able to find my application on the Pebble Appstore\nusing my phone.\n\nThis was a great experience thanks to the\n\u003Ca href=\"https://twitter.com/pebbledev\" target=\"_blank\" rel=\"noopener noreferrer\">@PebbleDev\u003C/a>\nwho did a great job at making this whole process so quick and painless.\n\n###_Gotcha:_ \"Coming Soon\" message instead of \"Add\" on iOS Devices On the iOS\nversion of the Pebble Appstore, new apps are\n\u003Ca href=\"http://forums.getpebble.com/discussion/12172/coming-soon-instead-of-add-in-pebble-appstore\" target=\"_blank\" rel=\"noopener noreferrer\">not\navailable for download right away.\u003C/a> Instead, they are only made available\nonce Pebble releases a new version of its application to the\n\u003Ca href=\"https://itunes.apple.com/us/app/pebble-smartwatch/id592012721?mt=8\" target=\"_blank\" rel=\"noopener noreferrer\">App\nStore\u003C/a>. Further explanation for this can be found\n\u003Ca href=\"http://forums.getpebble.com/discussion/12172/coming-soon-instead-of-add-in-pebble-appstore\" target=\"_blank\" rel=\"noopener noreferrer\">here\u003C/a>.\nI also quickly learned the\n\u003Ca href=\"https://twitter.com/pebbledev\" target=\"_blank\" rel=\"noopener noreferrer\">@PebbleDev\u003C/a>\nteam keeps third-party developers posted when new Apple App Store releases\nhappen so new updates can be submitted.\n\n#### Personal remarks\n\nDownload my app on the Pebble Appstore now:\nhttps://apps.getpebble.com/applications/53b0d17bb9bff87a3e000077\n\n**Thinking of building your own Pebble app?** Take a look at my source code to\nlearn how I built mine: https://github.com/sergiocruz/pebble-coffee-finder _(I\nshould be writing a blog post about this soon!)_\n\n\u003Csmall>_1. Excludes the time it took to actually write the code to make this\napplication functional._\u003C/small>","src/content/blog/2014-12-10-first-pebble-app.md","43f640c9738bb83b",{"html":29,"metadata":30},"\u003Cp>Publishing\n\u003Ca href=\"https://apps.getpebble.com/applications/53b0d17bb9bff87a3e000077\" target=\"_blank\" rel=\"noopener noreferrer\">Coffee\nFinder\u003C/a> to the Pebble Appstore was quick and painless! The whole process only\ntook about 10 minutes. \u003Csup>1\u003C/sup>\u003C/p>\n\u003Cp>It all started on the\n\u003Ca href=\"https://dev-portal.getpebble.com/developer\" target=\"_blank\" rel=\"noopener noreferrer\">Pebble\nDev Portal\u003C/a> where I had to make a profile. Then I had to choose what kind of\napplication I wanted to publish. In my case, I published a\n\u003Ca href=\"https://dev-portal.getpebble.com/applications/new?type=watchface\" target=\"_blank\" rel=\"noopener noreferrer\">\u003Cem>watchface\u003C/em>\u003C/a>.\u003C/p>\n\u003Cp>Following I had to fill out a form that asked a few questions about the\napplication I intended to publish. This was also very quick as it only asked for\na Title, Description, website and source code url (which were both optional\nfields). In this same page I also uploaded a screenshot of my Pebble app.\u003C/p>\n\u003Cp>On the next page I was able to create a \u003Cem>New Release\u003C/em>, which I called version\n1.0, and along with this release I finally uploaded my \u003Ccode>.pbw\u003C/code> file.\u003C/p>\n\u003Cp>The last step I took was making the application public. As soon as I made the\napplication public I was able to find my application on the Pebble Appstore\nusing my phone.\u003C/p>\n\u003Cp>This was a great experience thanks to the\n\u003Ca href=\"https://twitter.com/pebbledev\" target=\"_blank\" rel=\"noopener noreferrer\">@PebbleDev\u003C/a>\nwho did a great job at making this whole process so quick and painless.\u003C/p>\n\u003Cp>###\u003Cem>Gotcha:\u003C/em> “Coming Soon” message instead of “Add” on iOS Devices On the iOS\nversion of the Pebble Appstore, new apps are\n\u003Ca href=\"http://forums.getpebble.com/discussion/12172/coming-soon-instead-of-add-in-pebble-appstore\" target=\"_blank\" rel=\"noopener noreferrer\">not\navailable for download right away.\u003C/a> Instead, they are only made available\nonce Pebble releases a new version of its application to the\n\u003Ca href=\"https://itunes.apple.com/us/app/pebble-smartwatch/id592012721?mt=8\" target=\"_blank\" rel=\"noopener noreferrer\">App\nStore\u003C/a>. Further explanation for this can be found\n\u003Ca href=\"http://forums.getpebble.com/discussion/12172/coming-soon-instead-of-add-in-pebble-appstore\" target=\"_blank\" rel=\"noopener noreferrer\">here\u003C/a>.\nI also quickly learned the\n\u003Ca href=\"https://twitter.com/pebbledev\" target=\"_blank\" rel=\"noopener noreferrer\">@PebbleDev\u003C/a>\nteam keeps third-party developers posted when new Apple App Store releases\nhappen so new updates can be submitted.\u003C/p>\n\u003Ch4 id=\"personal-remarks\">Personal remarks\u003C/h4>\n\u003Cp>Download my app on the Pebble Appstore now:\n\u003Ca href=\"https://apps.getpebble.com/applications/53b0d17bb9bff87a3e000077\">https://apps.getpebble.com/applications/53b0d17bb9bff87a3e000077\u003C/a>\u003C/p>\n\u003Cp>\u003Cstrong>Thinking of building your own Pebble app?\u003C/strong> Take a look at my source code to\nlearn how I built mine: \u003Ca href=\"https://github.com/sergiocruz/pebble-coffee-finder\">https://github.com/sergiocruz/pebble-coffee-finder\u003C/a> \u003Cem>(I\nshould be writing a blog post about this soon!)\u003C/em>\u003C/p>\n\u003Cp>\u003Csmall>\u003Cem>1. Excludes the time it took to actually write the code to make this\napplication functional.\u003C/em>\u003C/small>\u003C/p>",{"headings":31,"localImagePaths":36,"remoteImagePaths":37,"frontmatter":38,"imagePaths":41},[32],{"depth":33,"slug":34,"text":35},4,"personal-remarks","Personal remarks",[],[],{"title":14,"description":15,"date":39,"tags":40,"readingTime":24,"slug":11},["Date","2014-12-10T00:00:00.000Z"],[18,19,20,21],[],"2014-12-10-first-pebble-app.md","sailsjs-services-how-to-use-them-in-your-controllers",{"id":43,"data":45,"body":55,"filePath":56,"digest":57,"rendered":58,"legacyId":85},{"title":46,"description":47,"date":48,"tags":49,"draft":22,"author":23,"readingTime":54},"SailsJS Services: What they are and how to use them","Learn what SailsJS Services are and how to use them in your controllers. Services are reusable pieces of business logic that can be shared across your application.",["Date","2014-05-23T00:00:00.000Z"],[50,51,52,53],"sailsjs","services","mvc","business-logic","4 min read","## So what are SailsJS Services?\n\n_Great question!_ The\n\u003Ca href=\"http://sailsjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">SailsJS\nwebsite\u003C/a> does not have much content about `Services` on their\n\u003Ca href=\"http://sailsjs.org/#!documentation\" target=\"_blank\" rel=\"noopener noreferrer\">documentation\u003C/a>.\nI guess they figure `Services` are pretty self-explanatory; which is true for\nthe most part. But I sure would have had appreciated a simple guide describing\n`Services` when I first started using SailsJS for my applications.\n\n**SailsJS Services are pieces of reusable code that can be shared by your\ncontrollers.** Your business logic should live in your `Service` _(and not in\nyour controller!)_. I know I am stepping on egg shells here, but unfortunately\nmany web frameworks have bastarized the definition of models (the \"M\" in \"MVC\")\nand limited it only to where _database stuff happens_. However by definition\n`Models` are much more than your Data Access Layer.\n\u003Ca href=\"https://twitter.com/codinghorror\" target=\"_blank\" rel=\"noopener noreferrer\">@codingerror\u003C/a>\nput it beautifully when\n\u003Ca href=\"http://blog.codinghorror.com/understanding-model-view-controller/\" target=\"_blank\" rel=\"noopener noreferrer\">describing\nMVC Models\u003C/a>: \"Models represent knowledge. A model could be a single object\n(rather uninteresting), or it could be some structure of objects.\"\n\nSo in other words, SailsJS Services are kind of models, but we'll just stick to\nthe `Services` nomenclature in a SailsJS context to make our lives simpler :)\n\n## How to write SailsJS Services\n\nBelow is a very simple SailsJS Service:\n\n```javascript\n// File location: /api/services/MyFirstService.js\n\nvar MyFirstService = {\n  sayHello: function sayHelloService() {\n    return 'Hello I am the real Service';\n  },\n};\n\nmodule.exports = MyFirstService;\n```\n\n## How to use Services in my Controllers\n\n```javascript\nvar TestingServicesController = {\n  index: function (req, res) {\n    // Gets hello message from service\n    var helloMessage = MyFirstService.sayHello();\n\n    // Returns hello message to screen\n    res.send('Our service has a message for you: ' + helloMessage);\n  },\n};\n\nmodule.exports = TestingServicesController;\n```\n\nAs you can see above everything simply happens _magically_ behind the SailsJS\ncurtains. And by _magically_ I mean that SailsJS _automagically_ injects\nservices into your controllers:\n\n## A few words on unit testing\n\nAs you can imagine, SailsJS' _magical_ way of injecting dependencies into your\ncontrollers makes testing a bit difficult. Fortunately I've already got this\ntopic covered on this article:\n[Unit testing Sails JS: How to mock SailsJS Services in Controllers](/blog/unit-testing-sails-js-how-to-mock-sailsjs-services-in-controllers)\n\n### Demo and code samples\n\nAs usual, all my code is available on my GitHub account. Feel free to check it\nout, fork it, modify it and most importantly have fun with it:\n\u003Ca href=\"https://github.com/sergiocruz/sails-unit-test\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/sergiocruz/sails-unit-test\u003C/a>","src/content/blog/2014-05-23-sails-services.md","dda60d9d7c108170",{"html":59,"metadata":60},"\u003Ch2 id=\"so-what-are-sailsjs-services\">So what are SailsJS Services?\u003C/h2>\n\u003Cp>\u003Cem>Great question!\u003C/em> The\n\u003Ca href=\"http://sailsjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">SailsJS\nwebsite\u003C/a> does not have much content about \u003Ccode>Services\u003C/code> on their\n\u003Ca href=\"http://sailsjs.org/#!documentation\" target=\"_blank\" rel=\"noopener noreferrer\">documentation\u003C/a>.\nI guess they figure \u003Ccode>Services\u003C/code> are pretty self-explanatory; which is true for\nthe most part. But I sure would have had appreciated a simple guide describing\n\u003Ccode>Services\u003C/code> when I first started using SailsJS for my applications.\u003C/p>\n\u003Cp>\u003Cstrong>SailsJS Services are pieces of reusable code that can be shared by your\ncontrollers.\u003C/strong> Your business logic should live in your \u003Ccode>Service\u003C/code> \u003Cem>(and not in\nyour controller!)\u003C/em>. I know I am stepping on egg shells here, but unfortunately\nmany web frameworks have bastarized the definition of models (the “M” in “MVC”)\nand limited it only to where \u003Cem>database stuff happens\u003C/em>. However by definition\n\u003Ccode>Models\u003C/code> are much more than your Data Access Layer.\n\u003Ca href=\"https://twitter.com/codinghorror\" target=\"_blank\" rel=\"noopener noreferrer\">@codingerror\u003C/a>\nput it beautifully when\n\u003Ca href=\"http://blog.codinghorror.com/understanding-model-view-controller/\" target=\"_blank\" rel=\"noopener noreferrer\">describing\nMVC Models\u003C/a>: “Models represent knowledge. A model could be a single object\n(rather uninteresting), or it could be some structure of objects.”\u003C/p>\n\u003Cp>So in other words, SailsJS Services are kind of models, but we’ll just stick to\nthe \u003Ccode>Services\u003C/code> nomenclature in a SailsJS context to make our lives simpler :)\u003C/p>\n\u003Ch2 id=\"how-to-write-sailsjs-services\">How to write SailsJS Services\u003C/h2>\n\u003Cp>Below is a very simple SailsJS Service:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// File location: /api/services/MyFirstService.js\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> MyFirstService \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  sayHello\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> sayHelloService\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'Hello I am the real Service'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">module\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">exports\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> MyFirstService;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"how-to-use-services-in-my-controllers\">How to use Services in my Controllers\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> TestingServicesController \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  index\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">req\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">res\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Gets hello message from service\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> helloMessage \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> MyFirstService.\u003C/span>\u003Cspan style=\"color:#B392F0\">sayHello\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Returns hello message to screen\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    res.\u003C/span>\u003Cspan style=\"color:#B392F0\">send\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Our service has a message for you: '\u003C/span>\u003Cspan style=\"color:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> helloMessage);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">module\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">exports\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> TestingServicesController;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>As you can see above everything simply happens \u003Cem>magically\u003C/em> behind the SailsJS\ncurtains. And by \u003Cem>magically\u003C/em> I mean that SailsJS \u003Cem>automagically\u003C/em> injects\nservices into your controllers:\u003C/p>\n\u003Ch2 id=\"a-few-words-on-unit-testing\">A few words on unit testing\u003C/h2>\n\u003Cp>As you can imagine, SailsJS’ \u003Cem>magical\u003C/em> way of injecting dependencies into your\ncontrollers makes testing a bit difficult. Fortunately I’ve already got this\ntopic covered on this article:\n\u003Ca href=\"/blog/unit-testing-sails-js-how-to-mock-sailsjs-services-in-controllers\">Unit testing Sails JS: How to mock SailsJS Services in Controllers\u003C/a>\u003C/p>\n\u003Ch3 id=\"demo-and-code-samples\">Demo and code samples\u003C/h3>\n\u003Cp>As usual, all my code is available on my GitHub account. Feel free to check it\nout, fork it, modify it and most importantly have fun with it:\n\u003Ca href=\"https://github.com/sergiocruz/sails-unit-test\" target=\"_blank\" rel=\"noopener noreferrer\">\u003C/a>\u003Ca href=\"https://github.com/sergiocruz/sails-unit-test\">https://github.com/sergiocruz/sails-unit-test\u003C/a>\u003C/p>",{"headings":61,"localImagePaths":79,"remoteImagePaths":80,"frontmatter":81,"imagePaths":84},[62,66,69,72,75],{"depth":63,"slug":64,"text":65},2,"so-what-are-sailsjs-services","So what are SailsJS Services?",{"depth":63,"slug":67,"text":68},"how-to-write-sailsjs-services","How to write SailsJS Services",{"depth":63,"slug":70,"text":71},"how-to-use-services-in-my-controllers","How to use Services in my Controllers",{"depth":63,"slug":73,"text":74},"a-few-words-on-unit-testing","A few words on unit testing",{"depth":76,"slug":77,"text":78},3,"demo-and-code-samples","Demo and code samples",[],[],{"title":46,"description":47,"date":82,"tags":83,"readingTime":54,"slug":43},["Date","2014-05-23T00:00:00.000Z"],[50,51,52,53],[],"2014-05-23-sails-services.md","add-meta-data-to-your-restangular-responses",{"id":86,"data":88,"body":98,"filePath":99,"digest":100,"rendered":101,"legacyId":117},{"title":89,"description":90,"date":91,"tags":92,"draft":22,"author":23,"readingTime":54},"Add meta data to your Restangular responses","Learn how to extract and use metadata from RESTful API responses when using Restangular. This guide shows how to handle both data and meta objects in your AngularJS application.",["Date","2015-04-15T00:00:00.000Z"],[93,94,95,96,97],"restangular","angularjs","api","metadata","rest","I love\n\u003Ca href=\"https://github.com/mgonto/restangular\" target=\"_blank\" rel=\"noopener noreferrer\">Restangular\u003C/a>\nand all the functionality it provides, and its API is amazing! Big shout out to\n\u003Ca href=\"https://twitter.com/mgonto\" target=\"_blank\" rel=\"noopener noreferrer\">@mgonto\u003C/a>\nwhom I had the pleasure to meet and chat with in person at\n\u003Ca href=\"http://ng-conf.org\" target=\"_blank\" rel=\"noopener noreferrer\">ng-conf\n2015\u003C/a>!\n\nToday I ran into something new while integrating with a RESTful backend. The\nbackend returned meta data in its response. Nothing too out of the norm there, I\njust hadn't dealt with that using Restangular yet.\n\nTo put things into context, here is a sample response from the server:\n\n```javascript\n// Sample data from RESTful server\n{\n  data: [\n    { name: 'John' },\n    { name: 'Doe' }\n  ],\n  meta: {\n    records: 2\n  }\n}\n```\n\n## Extracting `.data` object from backend response\n\nUsually I setup an interceptor to extract the `.data` object from an APIs\nresponse. I like doing that so I don't have to repeat myself too much throughout\nthe rest of my code.\n\n```javascript\nangular.module('app').config([\n  'RestangularProvider',\n  function (RestangularProvider) {\n    // Always extracts `data` from response\n    RestangularProvider.setResponseExtractor(\n      function extractResponse(serverResponse, operation) {\n        return serverResponse.data;\n      }\n    );\n  },\n]);\n```\n\nThe code above just makes sure Restangular promises receive the unwrapped\n`.data` object. Feel free to visit\n\u003Ca href=\"https://github.com/mgonto/restangular#how-to-configure-them-globally\" target=\"_blank\" rel=\"noopener noreferrer\">Restangular's\nDocumentation\u003C/a> to learn more about this works.\n\n## At last, the meta data\n\nThe above solution looks great! But how can you have access to both `.data` and\n`.meta` from your controllers now?\n\nThe above solution looks great! But how can you have access to `.data` and\n`.meta` from your controllers now? My 5-minute fix was to attach the `.meta`\nobject to `.data` (it does feel ugly I am not going to lie):\n\n```javascript\nangular.module('app').config([\n  'RestangularProvider',\n  function (RestangularProvider) {\n    // Always extracts `data` from response\n    RestangularProvider.setResponseExtractor(\n      function extractResponse(serverResponse, operation) {\n        // Response from server\n        var response = serverResponse.data;\n\n        // Attaches meta object to the response object\n        if ('meta' in serverResponse) {\n          response.meta = serverResponse.meta;\n        }\n\n        return response;\n      }\n    );\n  },\n]);\n```\n\nSimple right?\n\nThis solution didn't seem right to me at first. \"What if `serverResponse.data`\nis an array\" I thought to myself. This might break things right? Nope, no\nbreaking things. It turns out arrays in javascript were objects before they\nbecame arrays. So you can add properties to your arrays just fine.\n\nPS: I have only tested this solution in Chrome. Not sure how other browsers will\nlike this idea.\n\nI'm also anxious to hear about more elegant solutions to this problem, as the\nmore I dig through Restangular, the more n00b I feel about it.\n\nSo if you have any feedback, please drop a line below :)","src/content/blog/2015-04-15-restangular-metadata.md","050c59b481b6b3f1",{"html":102,"metadata":103},"\u003Cp>I love\n\u003Ca href=\"https://github.com/mgonto/restangular\" target=\"_blank\" rel=\"noopener noreferrer\">Restangular\u003C/a>\nand all the functionality it provides, and its API is amazing! Big shout out to\n\u003Ca href=\"https://twitter.com/mgonto\" target=\"_blank\" rel=\"noopener noreferrer\">@mgonto\u003C/a>\nwhom I had the pleasure to meet and chat with in person at\n\u003Ca href=\"http://ng-conf.org\" target=\"_blank\" rel=\"noopener noreferrer\">ng-conf\n2015\u003C/a>!\u003C/p>\n\u003Cp>Today I ran into something new while integrating with a RESTful backend. The\nbackend returned meta data in its response. Nothing too out of the norm there, I\njust hadn’t dealt with that using Restangular yet.\u003C/p>\n\u003Cp>To put things into context, here is a sample response from the server:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Sample data from RESTful server\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  data\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    { name: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'John'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    { name: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Doe'\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  ],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  meta\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    records\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"extracting-data-object-from-backend-response\">Extracting \u003Ccode>.data\u003C/code> object from backend response\u003C/h2>\n\u003Cp>Usually I setup an interceptor to extract the \u003Ccode>.data\u003C/code> object from an APIs\nresponse. I like doing that so I don’t have to repeat myself too much throughout\nthe rest of my code.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">angular.\u003C/span>\u003Cspan style=\"color:#B392F0\">module\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'app'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">).\u003C/span>\u003Cspan style=\"color:#B392F0\">config\u003C/span>\u003Cspan style=\"color:#E1E4E8\">([\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  'RestangularProvider'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  function\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">RestangularProvider\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Always extracts `data` from response\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    RestangularProvider.\u003C/span>\u003Cspan style=\"color:#B392F0\">setResponseExtractor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      function\u003C/span>\u003Cspan style=\"color:#B392F0\"> extractResponse\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">serverResponse\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">operation\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> serverResponse.data;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">]);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The code above just makes sure Restangular promises receive the unwrapped\n\u003Ccode>.data\u003C/code> object. Feel free to visit\n\u003Ca href=\"https://github.com/mgonto/restangular#how-to-configure-them-globally\" target=\"_blank\" rel=\"noopener noreferrer\">Restangular’s\nDocumentation\u003C/a> to learn more about this works.\u003C/p>\n\u003Ch2 id=\"at-last-the-meta-data\">At last, the meta data\u003C/h2>\n\u003Cp>The above solution looks great! But how can you have access to both \u003Ccode>.data\u003C/code> and\n\u003Ccode>.meta\u003C/code> from your controllers now?\u003C/p>\n\u003Cp>The above solution looks great! But how can you have access to \u003Ccode>.data\u003C/code> and\n\u003Ccode>.meta\u003C/code> from your controllers now? My 5-minute fix was to attach the \u003Ccode>.meta\u003C/code>\nobject to \u003Ccode>.data\u003C/code> (it does feel ugly I am not going to lie):\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">angular.\u003C/span>\u003Cspan style=\"color:#B392F0\">module\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'app'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">).\u003C/span>\u003Cspan style=\"color:#B392F0\">config\u003C/span>\u003Cspan style=\"color:#E1E4E8\">([\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  'RestangularProvider'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  function\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">RestangularProvider\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Always extracts `data` from response\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    RestangularProvider.\u003C/span>\u003Cspan style=\"color:#B392F0\">setResponseExtractor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      function\u003C/span>\u003Cspan style=\"color:#B392F0\"> extractResponse\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">serverResponse\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">operation\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // Response from server\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> response \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> serverResponse.data;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // Attaches meta object to the response object\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'meta'\u003C/span>\u003Cspan style=\"color:#F97583\"> in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> serverResponse) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          response.meta \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> serverResponse.meta;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> response;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">]);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Simple right?\u003C/p>\n\u003Cp>This solution didn’t seem right to me at first. “What if \u003Ccode>serverResponse.data\u003C/code>\nis an array” I thought to myself. This might break things right? Nope, no\nbreaking things. It turns out arrays in javascript were objects before they\nbecame arrays. So you can add properties to your arrays just fine.\u003C/p>\n\u003Cp>PS: I have only tested this solution in Chrome. Not sure how other browsers will\nlike this idea.\u003C/p>\n\u003Cp>I’m also anxious to hear about more elegant solutions to this problem, as the\nmore I dig through Restangular, the more n00b I feel about it.\u003C/p>\n\u003Cp>So if you have any feedback, please drop a line below :)\u003C/p>",{"headings":104,"localImagePaths":111,"remoteImagePaths":112,"frontmatter":113,"imagePaths":116},[105,108],{"depth":63,"slug":106,"text":107},"extracting-data-object-from-backend-response","Extracting .data object from backend response",{"depth":63,"slug":109,"text":110},"at-last-the-meta-data","At last, the meta data",[],[],{"title":89,"description":90,"date":114,"tags":115,"readingTime":54,"slug":86},["Date","2015-04-15T00:00:00.000Z"],[93,94,95,96,97],[],"2015-04-15-restangular-metadata.md","unit-testing-sails-js-how-to-mock-sailsjs-services-in-controllers",{"id":118,"data":120,"body":129,"filePath":130,"digest":131,"rendered":132,"legacyId":149},{"title":121,"description":122,"date":123,"tags":124,"draft":22,"author":23,"readingTime":128},"Unit testing Sails JS: How to mock SailsJS Services in Controllers","Learn how to mock SailsJS services when unit testing controllers. This guide shows you how to lift Sails in tests and properly stub services using Sinon for effective testing.",["Date","2014-05-23T00:00:00.000Z"],[50,125,126,127,51],"unit-testing","mocking","sinon","6 min read","On my previous article get your\n[SailsJS testing environment setup, and also how to run a _basic test_](/blog/unit-test-sailsjs-with-mocha-and-instanbul-for-code-coverage/).\nBut let's face it: when it comes to real life, \\*basic is never enough! On this\narticle I will be covering a more realistic scenario:\n\nLet's suppose you wrote a\n\u003Ca href=\"https://sailsjs.org/#!documentation/controllers\" target=\"_blank\">SailsJS\nController\u003C/a> and a SailsJS Service. You got them to work together, and now you\nwant to mock the service while testing your controller.\n\nThe problem is that SailsJS _magically_ injects Services -- and Models, and\neverything else -- into the Controller, making it difficult to simply call\n`HelloController.index()` without _lifting SailsJS_. We need the dependencies to\nbe in place (otherwise we will get a bunch of ugly _undefined is not a function_\nkind of errors.\n\nFortunately, _lifting SailsJS_ in code is almost as easy as running `sails lift`\non your command line, and that is exactly what we are going to do in order run\nour tests.\n\n## So... how do I mock services in my controllers?\n\n_I'm glad you asked!_ First things first, pretend we already have a controller\nand a service in place: The controller is called `TestingServicesController` and\nthe service is called `MyFirstService`.\n\n**Step 1:** Start by instantiating SailsJS in your test file:\n\n```javascript\nvar Sails = require('sails'),\n  sinon = require('sinon'),\n  assert = require('assert');\n```\n\n**Step 2:** Lift SailsJS before executing each test and _lower_ it after the\ntest is executed:\n\n```javascript\nvar app, testingServicesController;\n\n// Gets run before each test\nbefore(function beforeControllerTest(done) {\n  // Lift Sails and start the server\n  Sails.lift(\n    {\n      log: {\n        level: 'error',\n      },\n    },\n    function (err, sails) {\n      // Instantiates new sails application\n      app = sails;\n\n      // Instantiates controller\n      testingServicesController = app.controllers.testingservices;\n\n      // Lets testing framework know async call is done\n      done(err, sails);\n    }\n  );\n});\n\n// Gets run after each test\nafter(function afterControllerTest(done) {\n  // Destroys application\n  app.lower(done);\n});\n```\n\n**Step 3:** Mock service and test controller\n\n```javascript\nit('should have called mocked service', function () {\n  // Mocking our service\n  sinon.stub(app.services.myfirstservice, 'sayHello', function () {\n    return 'Hello I am the mocked Service';\n  });\n\n  // JSON object spy\n  var send = sinon.spy();\n\n  // Executes controller action\n  testingServicesController.index(null, {\n    send: send,\n  });\n\n  // Makes sure the mocked service was called\n  // instead of the real one\n  assert(send.called);\n  assert(\n    send.calledWith(\n      'Our service has a message for you: Hello I am the mocked Service'\n    )\n  );\n\n  // Restores our mock to the original service\n  app.services.myfirstservice.sayHello.restore();\n  // Notice that the above action this is very important\n  // because if the original action does not get restored,\n  // then this mock will be used in other tests\n});\n```\n\n## Putting the pieces of the puzzle together\n\nBelow is what my code looks like when we put all three steps together:\n\n```javascript\nvar Sails = require('sails'),\n  sinon = require('sinon'),\n  assert = require('assert');\n\ndescribe('The TestingServices Controller', function () {\n  // app and testingServicesController\n  var app, testingServicesController;\n\n  // Global before hook\n  before(function beforeControllerTest(done) {\n    // Lift Sails and start the server\n    Sails.lift(\n      {\n        log: {\n          level: 'error',\n        },\n      },\n      function (err, sails) {\n        app = sails;\n\n        // TestingServices controller\n        testingServicesController = app.controllers.testingservices;\n\n        done(err, sails);\n      }\n    );\n  });\n\n  after(function afterControllerTest(done) {\n    app.lower(done);\n  });\n\n  describe('when we invoke the index action', function () {\n    before(function () {\n      // Mocking our service\n      sinon.stub(app.services.myfirstservice, 'sayHello', function () {\n        return 'Hello I am the mocked Service';\n      });\n    });\n\n    after(function () {\n      // Restores our mock to the original service\n      app.services.myfirstservice.sayHello.restore();\n    });\n\n    it('should have called mocked service', function () {\n      // JSON object spy\n      var send = sinon.spy();\n\n      // Executes controller action\n      testingServicesController.index(null, {\n        send: send,\n      });\n\n      // Makes sure the mocked service was called\n      // instead of the real one\n      assert(send.called);\n      assert(\n        send.calledWith(\n          'Our service has a message for you: Hello I am the mocked Service'\n        )\n      );\n    });\n  });\n});\n```\n\n### Demo and code samples\n\nYou know you can always count on me when it comes to post my working code to\nGitHub! Check out the full working copy\nhere:\u003Cbr />\u003Ca href=\"https://github.com/sergiocruz/sails-unit-test\" target=\"_blank\">https://github.com/sergiocruz/sails-unit-test\u003C/a>","src/content/blog/2014-05-23-mock-sails-services.md","ffd6fc77d032f987",{"html":133,"metadata":134},"\u003Cp>On my previous article get your\n\u003Ca href=\"/blog/unit-test-sailsjs-with-mocha-and-instanbul-for-code-coverage/\">SailsJS testing environment setup, and also how to run a \u003Cem>basic test\u003C/em>\u003C/a>.\nBut let’s face it: when it comes to real life, *basic is never enough! On this\narticle I will be covering a more realistic scenario:\u003C/p>\n\u003Cp>Let’s suppose you wrote a\n\u003Ca href=\"https://sailsjs.org/#!documentation/controllers\" target=\"_blank\">SailsJS\nController\u003C/a> and a SailsJS Service. You got them to work together, and now you\nwant to mock the service while testing your controller.\u003C/p>\n\u003Cp>The problem is that SailsJS \u003Cem>magically\u003C/em> injects Services — and Models, and\neverything else — into the Controller, making it difficult to simply call\n\u003Ccode>HelloController.index()\u003C/code> without \u003Cem>lifting SailsJS\u003C/em>. We need the dependencies to\nbe in place (otherwise we will get a bunch of ugly \u003Cem>undefined is not a function\u003C/em>\nkind of errors.\u003C/p>\n\u003Cp>Fortunately, \u003Cem>lifting SailsJS\u003C/em> in code is almost as easy as running \u003Ccode>sails lift\u003C/code>\non your command line, and that is exactly what we are going to do in order run\nour tests.\u003C/p>\n\u003Ch2 id=\"so-how-do-i-mock-services-in-my-controllers\">So… how do I mock services in my controllers?\u003C/h2>\n\u003Cp>\u003Cem>I’m glad you asked!\u003C/em> First things first, pretend we already have a controller\nand a service in place: The controller is called \u003Ccode>TestingServicesController\u003C/code> and\nthe service is called \u003Ccode>MyFirstService\u003C/code>.\u003C/p>\n\u003Cp>\u003Cstrong>Step 1:\u003C/strong> Start by instantiating SailsJS in your test file:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Sails \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> require\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'sails'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  sinon \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> require\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'sinon'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  assert \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> require\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'assert'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Step 2:\u003C/strong> Lift SailsJS before executing each test and \u003Cem>lower\u003C/em> it after the\ntest is executed:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> app, testingServicesController;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Gets run before each test\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">before\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> beforeControllerTest\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">done\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // Lift Sails and start the server\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  Sails.\u003C/span>\u003Cspan style=\"color:#B392F0\">lift\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      log: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        level: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'error'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    function\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">err\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">sails\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // Instantiates new sails application\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      app \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sails;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // Instantiates controller\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      testingServicesController \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> app.controllers.testingservices;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // Lets testing framework know async call is done\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      done\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(err, sails);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Gets run after each test\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">after\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> afterControllerTest\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">done\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // Destroys application\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  app.\u003C/span>\u003Cspan style=\"color:#B392F0\">lower\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(done);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Step 3:\u003C/strong> Mock service and test controller\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">it\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'should have called mocked service'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // Mocking our service\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  sinon.\u003C/span>\u003Cspan style=\"color:#B392F0\">stub\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(app.services.myfirstservice, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'sayHello'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'Hello I am the mocked Service'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // JSON object spy\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> send \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sinon.\u003C/span>\u003Cspan style=\"color:#B392F0\">spy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // Executes controller action\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  testingServicesController.\u003C/span>\u003Cspan style=\"color:#B392F0\">index\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    send: send,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // Makes sure the mocked service was called\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // instead of the real one\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  assert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(send.called);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  assert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    send.\u003C/span>\u003Cspan style=\"color:#B392F0\">calledWith\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      'Our service has a message for you: Hello I am the mocked Service'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // Restores our mock to the original service\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  app.services.myfirstservice.sayHello.\u003C/span>\u003Cspan style=\"color:#B392F0\">restore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // Notice that the above action this is very important\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // because if the original action does not get restored,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // then this mock will be used in other tests\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"putting-the-pieces-of-the-puzzle-together\">Putting the pieces of the puzzle together\u003C/h2>\n\u003Cp>Below is what my code looks like when we put all three steps together:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Sails \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> require\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'sails'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  sinon \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> require\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'sinon'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  assert \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> require\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'assert'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">describe\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'The TestingServices Controller'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // app and testingServicesController\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> app, testingServicesController;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // Global before hook\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  before\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> beforeControllerTest\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">done\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Lift Sails and start the server\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    Sails.\u003C/span>\u003Cspan style=\"color:#B392F0\">lift\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        log: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          level: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'error'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      function\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">err\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">sails\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        app \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sails;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // TestingServices controller\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        testingServicesController \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> app.controllers.testingservices;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        done\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(err, sails);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  after\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> afterControllerTest\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">done\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    app.\u003C/span>\u003Cspan style=\"color:#B392F0\">lower\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(done);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  describe\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'when we invoke the index action'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    before\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // Mocking our service\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      sinon.\u003C/span>\u003Cspan style=\"color:#B392F0\">stub\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(app.services.myfirstservice, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'sayHello'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'Hello I am the mocked Service'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    after\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // Restores our mock to the original service\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      app.services.myfirstservice.sayHello.\u003C/span>\u003Cspan style=\"color:#B392F0\">restore\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    it\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'should have called mocked service'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // JSON object spy\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> send \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sinon.\u003C/span>\u003Cspan style=\"color:#B392F0\">spy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // Executes controller action\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      testingServicesController.\u003C/span>\u003Cspan style=\"color:#B392F0\">index\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        send: send,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // Makes sure the mocked service was called\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // instead of the real one\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      assert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(send.called);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      assert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        send.\u003C/span>\u003Cspan style=\"color:#B392F0\">calledWith\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">          'Our service has a message for you: Hello I am the mocked Service'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"demo-and-code-samples\">Demo and code samples\u003C/h3>\n\u003Cp>You know you can always count on me when it comes to post my working code to\nGitHub! Check out the full working copy\nhere:\u003Cbr>\u003Ca href=\"https://github.com/sergiocruz/sails-unit-test\" target=\"_blank\">\u003C/a>\u003Ca href=\"https://github.com/sergiocruz/sails-unit-test\">https://github.com/sergiocruz/sails-unit-test\u003C/a>\u003C/p>",{"headings":135,"localImagePaths":143,"remoteImagePaths":144,"frontmatter":145,"imagePaths":148},[136,139,142],{"depth":63,"slug":137,"text":138},"so-how-do-i-mock-services-in-my-controllers","So… how do I mock services in my controllers?",{"depth":63,"slug":140,"text":141},"putting-the-pieces-of-the-puzzle-together","Putting the pieces of the puzzle together",{"depth":76,"slug":77,"text":78},[],[],{"title":121,"description":122,"date":146,"tags":147,"readingTime":128,"slug":118},["Date","2014-05-23T00:00:00.000Z"],[50,125,126,127,51],[],"2014-05-23-mock-sails-services.md","consuming-private-libraries-from-github-packages",{"id":150,"data":152,"body":162,"filePath":163,"digest":164,"rendered":165,"legacyId":193},{"title":153,"description":154,"date":155,"tags":156,"draft":22,"author":23,"readingTime":128},"Consume private libraries from GitHub Packages using npm or yarn","Step-by-step guide to consuming private JavaScript libraries from GitHub Packages Registry using npm or yarn. Learn how to set up authentication and configure your projects.",["Date","2020-12-20T00:00:00.000Z"],[157,158,159,160,161],"github-packages","npm","yarn","private-packages","javascript","The first time I tried consuming a private JavaScript library from the\n[GitHub Packages Registry](https://docs.github.com/en/free-pro-team@latest/packages/quickstart),\nI had to navigate through a handful of webpages and wrangle a bunch of\ninformation together before I was able to run a simple npm or yarn install.\nThat's why I'm excited to put all the information you need in a simple-to-follow\narticle. Please note that this article assumes you're running an unix operating\nsystem.\n\nHere's an overview of the steps we're covering:\n\n1. Create a personal access token on GitHub\n1. Add an npm registry resolver to your local environment\n1. Add a file to the repository that will be consuming the private package\n1. Start consuming your packages\n\nBefore we can start consuming private packages, the registry needs to know who\nyou are each time you try to access it. That's why we'll start by creating a\npersonal access token on GitHub. Your system will use it each time it needs to\naccess the GitHub Packages Registry to install libraries.\n\n## Create a personal access token on GitHub\n\nStart by creating a\n[personal token on GitHub](https://github.com/settings/tokens/new):\n\n1. For the `Note` field, put down \"GitHub Packages\" as the description, so we'll\n   know what we used this token for in the future\n1. Under `Select scopes`, select the `repo` option: _(checking the `repo` scope,\n   should automatically check all the options under it:)_\n   - `repo:status`\n   - `repo_deployment`\n   - `public_repo`\n   - `repo:invite`\n   - `security_events`\n   - `read:packages`\n\n1. Hit the \"Generate Token\" button\n1. Copy the newly generated token onto your clipboard, as we're going to use it\n   shortly\n\n## Add an npm registry resolver to your local environment\n\nWe're going to authenticate you into the GitHub Packages Registry by using your\nGitHub username and the Personal Access Token you just created as the password.\nTo do so, pull up your Terminal and follow these steps:\n\n- Run `npm login --registry=https://npm.pkg.github.com` and enter these options:\n  - **Username**: Enter your GitHub username\n  - **Password**: Paste the Personal Access Token you previously created\n  - **Email**: Enter an email address associated with your GitHub account\n\nNow npm will know how to forward your authentication credentials to the GitHub\nPackages Registry every time we try to access it. That way GitHub Packages will\nknow who you are and what packages you have access to.\n\n## Configure package consumption\n\nLet's create a new file at the root of your project called `.npmrc`. This file\nwill instruct npm (or yarn) to pull packages directly from the GitHub Packages\nRegistry. Below is an example of what your file should look like:\n\n```shell\n# File location: `~/some-directory/your-project/.npmrc`\n# Registry for the @my-org scope\n@my-org:registry=https://npm.pkg.github.com/\n```\n\nNow any libraries you add via `npm` or `yarn` that use the `@my-org` scope will\nbe installed directly from the GitHub Packages Registry.\n\n### A little background on package scopes\n\nThe GitHub Packages Registry requires library authors to follow a few\nconventions when publishing packages. Understanding those conventions will add\nsome color to how we're configuring your development environment.\n\nWhen publishing a package to the GitHub Packages Registry, package names must\nlive [under a package scope](https://docs.npmjs.com/cli/v6/using-npm/scope). If\nyou're interested in examples of scoped JavaScript packages, you need to look no\nfurther than Angular projects. If you look at\n[any projects that use Angular](https://github.com/sergiocruz/ng-karaoke/blob/master/package.json#L17),\nyou'll notice that the names of the dependencies that Angular brings in have a\nscope (aka namespace, or a vendor prefix) of `@angular`, such as\n`@angular/core`, or `@angular/router`.\n\nThe scope that library authors must use can be either their GitHub usernames, or\ntheir GitHub organization's name, such as `@sergiocruz/library-name`, or\n`@my-org/library-name`.\n\n### Global npm configuration instead of project-level configuration\n\nIt's my personal preference to configure package consumption by project, thereby\nadding an `.npmrc` file to each of my projects that will consume private\nlibraries from the GitHub Packages Registry.\n\nI prefer project-level configuration over a global npm configuration for the\nsame reasons why I prefer to use scoped variables instead of global variables\nwhen writing JavaScript. Some folks coined this concept as the\n[Strictness Principle: Restrict the scope of what you do. Increase the scope as the need arises](https://medium.com/@fagnerbrack/the-strictness-principle-9997e483cafb).\nI feel similarly about configuration, it's easier to spot mistakes when they're\nscoped to a single project. It is possible, however, to configure npm globally\nto consume scoped packages from the GitHub Packages Registry, if that's what you\nprefer to do.\n\nYou should already have an npm configuration file under your user's home\ndirectory, namely `~/.npmrc`. Add the same lines mentioned above for the\nper-project configuration:\n\n```shell\n# File location: ~/.npmrc\n# Registry for the @my-org scope\n@my-org:registry=https://npm.pkg.github.com/\n```\n\nNow every time you install any packages under the `@my-org` scope anywhere on\nyour machine, npm will know to fetch those packages from the GitHub Packages\nRegistry.\n\n## Start consuming your packages\n\nAfter configuring your work environment, you'll be able to follow the same steps\nyou usually do to install any packages.\n\nPull up your terminal and run:\n\n```shell\nnpm install @my-org/package-name --save\n```\n\nIf you prefer to use `yarn`, all the previous steps we followed should work\nseamlessly for it.\n\n```shell\nyarn add @my-org/package-name\n```\n\nIf you'd like a deeper dive into GitHub Packages, I would suggest browsing\nthrough their documentation to learn more about\n[how to configure npm for use with GitHub Packages](https://docs.github.com/en/free-pro-team@latest/packages/guides/configuring-npm-for-use-with-github-packages),\namong other use cases.\n\nI hope this a helpful resource as you get a good handle on how to consume\nprivate npm libraries using GitHub Packages. Please feel free to reach out to\nme, preferrably via [Twitter](https://twitter.com/hashtagserg), if you think\nthis guide is missing any key information.","src/content/blog/2020-13-20-consuming-github-packages.md","ba5d2c276030fa59",{"html":166,"metadata":167},"\u003Cp>The first time I tried consuming a private JavaScript library from the\n\u003Ca href=\"https://docs.github.com/en/free-pro-team@latest/packages/quickstart\">GitHub Packages Registry\u003C/a>,\nI had to navigate through a handful of webpages and wrangle a bunch of\ninformation together before I was able to run a simple npm or yarn install.\nThat’s why I’m excited to put all the information you need in a simple-to-follow\narticle. Please note that this article assumes you’re running an unix operating\nsystem.\u003C/p>\n\u003Cp>Here’s an overview of the steps we’re covering:\u003C/p>\n\u003Col>\n\u003Cli>Create a personal access token on GitHub\u003C/li>\n\u003Cli>Add an npm registry resolver to your local environment\u003C/li>\n\u003Cli>Add a file to the repository that will be consuming the private package\u003C/li>\n\u003Cli>Start consuming your packages\u003C/li>\n\u003C/ol>\n\u003Cp>Before we can start consuming private packages, the registry needs to know who\nyou are each time you try to access it. That’s why we’ll start by creating a\npersonal access token on GitHub. Your system will use it each time it needs to\naccess the GitHub Packages Registry to install libraries.\u003C/p>\n\u003Ch2 id=\"create-a-personal-access-token-on-github\">Create a personal access token on GitHub\u003C/h2>\n\u003Cp>Start by creating a\n\u003Ca href=\"https://github.com/settings/tokens/new\">personal token on GitHub\u003C/a>:\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>For the \u003Ccode>Note\u003C/code> field, put down “GitHub Packages” as the description, so we’ll\nknow what we used this token for in the future\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Under \u003Ccode>Select scopes\u003C/code>, select the \u003Ccode>repo\u003C/code> option: \u003Cem>(checking the \u003Ccode>repo\u003C/code> scope,\nshould automatically check all the options under it:)\u003C/em>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>repo:status\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>repo_deployment\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>public_repo\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>repo:invite\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>security_events\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>read:packages\u003C/code>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>Hit the “Generate Token” button\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Copy the newly generated token onto your clipboard, as we’re going to use it\nshortly\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"add-an-npm-registry-resolver-to-your-local-environment\">Add an npm registry resolver to your local environment\u003C/h2>\n\u003Cp>We’re going to authenticate you into the GitHub Packages Registry by using your\nGitHub username and the Personal Access Token you just created as the password.\nTo do so, pull up your Terminal and follow these steps:\u003C/p>\n\u003Cul>\n\u003Cli>Run \u003Ccode>npm login --registry=https://npm.pkg.github.com\u003C/code> and enter these options:\n\u003Cul>\n\u003Cli>\u003Cstrong>Username\u003C/strong>: Enter your GitHub username\u003C/li>\n\u003Cli>\u003Cstrong>Password\u003C/strong>: Paste the Personal Access Token you previously created\u003C/li>\n\u003Cli>\u003Cstrong>Email\u003C/strong>: Enter an email address associated with your GitHub account\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>Now npm will know how to forward your authentication credentials to the GitHub\nPackages Registry every time we try to access it. That way GitHub Packages will\nknow who you are and what packages you have access to.\u003C/p>\n\u003Ch2 id=\"configure-package-consumption\">Configure package consumption\u003C/h2>\n\u003Cp>Let’s create a new file at the root of your project called \u003Ccode>.npmrc\u003C/code>. This file\nwill instruct npm (or yarn) to pull packages directly from the GitHub Packages\nRegistry. Below is an example of what your file should look like:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># File location: `~/some-directory/your-project/.npmrc`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Registry for the @my-org scope\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@my-org:registry\u003C/span>\u003Cspan style=\"color:#9ECBFF\">=https://npm.pkg.github.com/\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Now any libraries you add via \u003Ccode>npm\u003C/code> or \u003Ccode>yarn\u003C/code> that use the \u003Ccode>@my-org\u003C/code> scope will\nbe installed directly from the GitHub Packages Registry.\u003C/p>\n\u003Ch3 id=\"a-little-background-on-package-scopes\">A little background on package scopes\u003C/h3>\n\u003Cp>The GitHub Packages Registry requires library authors to follow a few\nconventions when publishing packages. Understanding those conventions will add\nsome color to how we’re configuring your development environment.\u003C/p>\n\u003Cp>When publishing a package to the GitHub Packages Registry, package names must\nlive \u003Ca href=\"https://docs.npmjs.com/cli/v6/using-npm/scope\">under a package scope\u003C/a>. If\nyou’re interested in examples of scoped JavaScript packages, you need to look no\nfurther than Angular projects. If you look at\n\u003Ca href=\"https://github.com/sergiocruz/ng-karaoke/blob/master/package.json#L17\">any projects that use Angular\u003C/a>,\nyou’ll notice that the names of the dependencies that Angular brings in have a\nscope (aka namespace, or a vendor prefix) of \u003Ccode>@angular\u003C/code>, such as\n\u003Ccode>@angular/core\u003C/code>, or \u003Ccode>@angular/router\u003C/code>.\u003C/p>\n\u003Cp>The scope that library authors must use can be either their GitHub usernames, or\ntheir GitHub organization’s name, such as \u003Ccode>@sergiocruz/library-name\u003C/code>, or\n\u003Ccode>@my-org/library-name\u003C/code>.\u003C/p>\n\u003Ch3 id=\"global-npm-configuration-instead-of-project-level-configuration\">Global npm configuration instead of project-level configuration\u003C/h3>\n\u003Cp>It’s my personal preference to configure package consumption by project, thereby\nadding an \u003Ccode>.npmrc\u003C/code> file to each of my projects that will consume private\nlibraries from the GitHub Packages Registry.\u003C/p>\n\u003Cp>I prefer project-level configuration over a global npm configuration for the\nsame reasons why I prefer to use scoped variables instead of global variables\nwhen writing JavaScript. Some folks coined this concept as the\n\u003Ca href=\"https://medium.com/@fagnerbrack/the-strictness-principle-9997e483cafb\">Strictness Principle: Restrict the scope of what you do. Increase the scope as the need arises\u003C/a>.\nI feel similarly about configuration, it’s easier to spot mistakes when they’re\nscoped to a single project. It is possible, however, to configure npm globally\nto consume scoped packages from the GitHub Packages Registry, if that’s what you\nprefer to do.\u003C/p>\n\u003Cp>You should already have an npm configuration file under your user’s home\ndirectory, namely \u003Ccode>~/.npmrc\u003C/code>. Add the same lines mentioned above for the\nper-project configuration:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># File location: ~/.npmrc\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Registry for the @my-org scope\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@my-org:registry\u003C/span>\u003Cspan style=\"color:#9ECBFF\">=https://npm.pkg.github.com/\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Now every time you install any packages under the \u003Ccode>@my-org\u003C/code> scope anywhere on\nyour machine, npm will know to fetch those packages from the GitHub Packages\nRegistry.\u003C/p>\n\u003Ch2 id=\"start-consuming-your-packages\">Start consuming your packages\u003C/h2>\n\u003Cp>After configuring your work environment, you’ll be able to follow the same steps\nyou usually do to install any packages.\u003C/p>\n\u003Cp>Pull up your terminal and run:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> @my-org/package-name\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --save\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>If you prefer to use \u003Ccode>yarn\u003C/code>, all the previous steps we followed should work\nseamlessly for it.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">yarn\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> add\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> @my-org/package-name\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>If you’d like a deeper dive into GitHub Packages, I would suggest browsing\nthrough their documentation to learn more about\n\u003Ca href=\"https://docs.github.com/en/free-pro-team@latest/packages/guides/configuring-npm-for-use-with-github-packages\">how to configure npm for use with GitHub Packages\u003C/a>,\namong other use cases.\u003C/p>\n\u003Cp>I hope this a helpful resource as you get a good handle on how to consume\nprivate npm libraries using GitHub Packages. Please feel free to reach out to\nme, preferrably via \u003Ca href=\"https://twitter.com/hashtagserg\">Twitter\u003C/a>, if you think\nthis guide is missing any key information.\u003C/p>",{"headings":168,"localImagePaths":187,"remoteImagePaths":188,"frontmatter":189,"imagePaths":192},[169,172,175,178,181,184],{"depth":63,"slug":170,"text":171},"create-a-personal-access-token-on-github","Create a personal access token on GitHub",{"depth":63,"slug":173,"text":174},"add-an-npm-registry-resolver-to-your-local-environment","Add an npm registry resolver to your local environment",{"depth":63,"slug":176,"text":177},"configure-package-consumption","Configure package consumption",{"depth":76,"slug":179,"text":180},"a-little-background-on-package-scopes","A little background on package scopes",{"depth":76,"slug":182,"text":183},"global-npm-configuration-instead-of-project-level-configuration","Global npm configuration instead of project-level configuration",{"depth":63,"slug":185,"text":186},"start-consuming-your-packages","Start consuming your packages",[],[],{"title":153,"description":154,"date":190,"tags":191,"readingTime":128,"slug":150},["Date","2020-12-20T00:00:00.000Z"],[157,158,159,160,161],[],"2020-13-20-consuming-github-packages.md","angularjs-how-to-generate-code-coverage-for-yeoman-scaffolded-apps",{"id":194,"data":196,"body":206,"filePath":207,"digest":208,"rendered":209,"legacyId":234},{"title":197,"description":198,"date":199,"tags":200,"draft":22,"author":23,"readingTime":205},"AngularJS unit test and code coverage with Yeoman, Karma, Jasmine and PhantomJS","Learn how to generate code coverage reports for AngularJS apps scaffolded with Yeoman. This step-by-step guide helps developers improve test quality and maintainability using tools like Karma and Istanbul.",["Date","2014-05-22T00:00:00.000Z"],[94,125,201,202,203,204],"karma","jasmine","phantomjs","yeoman","5 min read","## Using Karma, Jasmine and PhantomJS to run tests on your AngularJS projects\n\nI shamefully admit that the first time I ever tested my frontend code was after\nI started using \u003Ca href=\"https://angularjs.org\" target=\"_blank\">AngularJS\u003C/a>.\nBefore I had all kinds of excuses, however AngularJS was built with testing in\nmind and that definitely made a huge difference.\n\nFor the sake of simplicity I will be using\n\u003Ca href=\"http://yeoman.io\" target=\"_blank\">Yeoman\u003C/a> for this tutorial. The\n\u003Ca href=\"https://github.com/yeoman/generator-angular\" target=\"_blank\">Yeoman\ngenerator for AngularJS\u003C/a> definitely makes _testing AngularJS applications a\nbreeze_. For example every time a controller is generated through the command\nline tool, this controller's test file is also generated automatically.\n\n## Scaffolding a new application\n\nLet's get started! First things first, make sure you have\n\u003Ca href=\"http://gruntjs.com\" target=\"_blank\">GruntJS\u003C/a>,\n\u003Ca href=\"http://yeoman.io\" target=\"_blank\">Yeoman\u003C/a> and the\n\u003Ca href=\"https://github.com/yeoman/generator-angular\" target=\"_blank\">AngularJS\nGenerator\u003C/a> all installed globally:\n\n```shell\nnpm install -g grunt-cli\nnpm install -g yo\nnpm install -g generator-angular\n```\n\nOnce you are certain these three guys are installed, let's go ahead and scaffold\na new AngularJS project:\n\n```shell\nmkdir angularjs-unit-test && cd $_\nyo angular angularjs-unit-test\n```\n\nThe AngularJS Genetator scaffolds a new application, it creates a\n`Main Controller` and its test by default. The controller file is located under\n`app/scripts/controllers/main.js` and its test file should be under\n`test/spec/controllers/main.js`.\n\nSince everything is already in place we should be able to start testing and\ngenerating code coverage reports right away, right? _Wrong!_ We need to teak our\napp's configuration a little bit before we are able to sucessfuly run\n`grunt test`.\n\n## Setting up testing environment\n\nNow that we have our application laid out, let's just tweak a couple of files:\n\n**Step 1:** Add `npm` dependencies that will allow `karma` to run tests and\ngenerate the code coverage report:\n\n```shell\nnpm install karma-jasmine --save-dev\nnpm install karma-phantomjs-launcher --save-dev\nnpm install karma-coverage --save-dev\n```\n\n_Attention: We are using\n\u003Ca href=\"http://jasmine.github.io\" target=\"_blank\">Jasmine\u003C/a> as our testing\nframework and \u003Ca href=\"http://phantomjs.org\" target=\"_blank\">PhantomJS\u003C/a> as\nthe default browser to run our tests. Don't worry about installing PhantomJS\nthough, as the\n\u003Ca href=\"https://github.com/karma-runner/karma-phantomjs-launcher\">karma-phantomjs-launcher\u003C/a>\npackage includes a standalone executable `PhanthomJS` binary. Lastly, we are\nusing\n\u003Ca href=\"https://github.com/karma-runner/karma-coverage\" target=\"_blank\">karma-coverage\u003C/a>\nto generate our code coverage._\n\n\u003Cbr />\n\n**Step 2:** Start by modifying the `browsers` flag within the `karma.conf.js`\nfile, which should be located right on the root directory of your application.\n\n```javascript\n// Located on line 49 on my local version of karma.conf.js\nbrowsers: ['PhantomJS'],\n```\n\nIn this same file, add the following lines right after the `browsers` flag to\nmake sure code coverage reports are generated every time the code is tested:\n\n```javascript\n// Code coverage report\nreporters: ['progress', 'coverage'],\npreprocessors: {\n  'app/scripts/**/*.js': ['coverage']\n},\ncoverageReporter: {\n  type: 'html',\n  dir: 'coverage'\n},\n\n// Don't forget to add 'karma-coverage' to your list of plugins\nplugins: [\n  'karma-jasmine',\n  'karma-coverage' // required for coverage\n]\n```\n\n\u003Cbr />\n\n**Step 3:** By now we should be able to run our test and see the code coverage\nreport!\n\nGo to your terminal and execute the following:\n\n```shell\ngrunt test\n```\n\nYou should see the following feedback on your screen:\n\n```shell\nRunning \"clean:server\" (clean) task\nCleaning .tmp...OK\n\nRunning \"concurrent:test\" (concurrent) task\n\n    Running \"copy:styles\" (copy) task\n    Copied 1 files\n\n    Done, without errors.\n\n\n    Execution Time (2014-05-22 20:22:18 UTC)\n    loading tasks  4ms  ▇▇▇▇▇▇▇▇▇▇▇▇ 29%\n    copy:styles ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 64%\n    Total 14ms\n\nRunning \"autoprefixer:dist\" (autoprefixer) task\nPrefixed file \".tmp/styles/main.css\" created.\n\nRunning \"connect:test\" (connect) task\nStarted connect web server on 127.0.0.1:9001.\n\nRunning \"karma:unit\" (karma) task\nINFO [karma]: Karma v0.12.16 server started at http://localhost:8080/\nINFO [launcher]: Starting browser PhantomJS\nWARN [watcher]: Pattern \"/Users/scruz/Sites/angularjs-unit-test/test/mock/**/*.js\" does not match any file.\nINFO [PhantomJS 1.9.7 (Mac OS X)]: Connected on socket WYv3ZzsuYUZWChR9mUGF with id 42383299\nPhantomJS 1.9.7 (Mac OS X): Executed 0 of 1 SUCCESS (0 secs / PhantomJS 1.9.7 (Mac OS X): Executed 1 of 1 SUCCESS (0 secs / PhantomJS 1.9.7 (Mac OS X): Executed 1 of 1 SUCCESS (0.015 secs / 0.011 secs)\n\nDone, without errors.\n\n\nExecution Time (2014-05-22 20:22:17 UTC)\nconcurrent:test    1.6s  ▇▇▇▇▇▇▇▇▇▇ 39%\nautoprefixer:dist  45ms  ▇ 1%\nkarma:unit         2.5s  ▇▇▇▇▇▇▇▇▇▇▇▇ 59%\nTotal 4.1s\n```\n\n\u003Cbr />\n\n## Finally! View your code coverage report\n\nIf everything ran successfuly for you as it did for me, you will notice that a\ndirectory called `coverage` was generated in the root of your application. Open\nthe html file that was generated in your browser and it should look something\nlike this:\n\n![](/images/blog/2014-05-22-04-49-33-pm.png) \u003Cbr /> _File location:\n`coverage/PhantomJS(...)/index.html`_\n\nAnd that's it for now! I wish I had this guide when I first had to generate a\ncode coverage report in my Yeoman scaffolded application. So I hope this helps\nyou as much as it did me.\n\n### Demo\n\nIf you are a code sample kind of person, don't worry I've got you covered!\nEverything we covered on this tutorial is available on my GitHub account:\n\u003Cbr />\u003Ca href=\"https://github.com/sergiocruz/angularjs-code-coverage\" target=\"_blank\">https://github.com/sergiocruz/angularjs-code-coverage\u003C/a>","src/content/blog/2014-05-22-unit-test-angularjs.md","dcc3e08b56ec3f1f",{"html":210,"metadata":211},"\u003Ch2 id=\"using-karma-jasmine-and-phantomjs-to-run-tests-on-your-angularjs-projects\">Using Karma, Jasmine and PhantomJS to run tests on your AngularJS projects\u003C/h2>\n\u003Cp>I shamefully admit that the first time I ever tested my frontend code was after\nI started using \u003Ca href=\"https://angularjs.org\" target=\"_blank\">AngularJS\u003C/a>.\nBefore I had all kinds of excuses, however AngularJS was built with testing in\nmind and that definitely made a huge difference.\u003C/p>\n\u003Cp>For the sake of simplicity I will be using\n\u003Ca href=\"http://yeoman.io\" target=\"_blank\">Yeoman\u003C/a> for this tutorial. The\n\u003Ca href=\"https://github.com/yeoman/generator-angular\" target=\"_blank\">Yeoman\ngenerator for AngularJS\u003C/a> definitely makes \u003Cem>testing AngularJS applications a\nbreeze\u003C/em>. For example every time a controller is generated through the command\nline tool, this controller’s test file is also generated automatically.\u003C/p>\n\u003Ch2 id=\"scaffolding-a-new-application\">Scaffolding a new application\u003C/h2>\n\u003Cp>Let’s get started! First things first, make sure you have\n\u003Ca href=\"http://gruntjs.com\" target=\"_blank\">GruntJS\u003C/a>,\n\u003Ca href=\"http://yeoman.io\" target=\"_blank\">Yeoman\u003C/a> and the\n\u003Ca href=\"https://github.com/yeoman/generator-angular\" target=\"_blank\">AngularJS\nGenerator\u003C/a> all installed globally:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -g\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> grunt-cli\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -g\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> yo\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -g\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> generator-angular\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Once you are certain these three guys are installed, let’s go ahead and scaffold\na new AngularJS project:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">mkdir\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> angularjs-unit-test\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x26;&#x26; \u003C/span>\u003Cspan style=\"color:#79B8FF\">cd\u003C/span>\u003Cspan style=\"color:#79B8FF\"> $_\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">yo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> angular\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> angularjs-unit-test\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The AngularJS Genetator scaffolds a new application, it creates a\n\u003Ccode>Main Controller\u003C/code> and its test by default. The controller file is located under\n\u003Ccode>app/scripts/controllers/main.js\u003C/code> and its test file should be under\n\u003Ccode>test/spec/controllers/main.js\u003C/code>.\u003C/p>\n\u003Cp>Since everything is already in place we should be able to start testing and\ngenerating code coverage reports right away, right? \u003Cem>Wrong!\u003C/em> We need to teak our\napp’s configuration a little bit before we are able to sucessfuly run\n\u003Ccode>grunt test\u003C/code>.\u003C/p>\n\u003Ch2 id=\"setting-up-testing-environment\">Setting up testing environment\u003C/h2>\n\u003Cp>Now that we have our application laid out, let’s just tweak a couple of files:\u003C/p>\n\u003Cp>\u003Cstrong>Step 1:\u003C/strong> Add \u003Ccode>npm\u003C/code> dependencies that will allow \u003Ccode>karma\u003C/code> to run tests and\ngenerate the code coverage report:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> karma-jasmine\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --save-dev\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> karma-phantomjs-launcher\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --save-dev\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> karma-coverage\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --save-dev\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cem>Attention: We are using\n\u003Ca href=\"http://jasmine.github.io\" target=\"_blank\">Jasmine\u003C/a> as our testing\nframework and \u003Ca href=\"http://phantomjs.org\" target=\"_blank\">PhantomJS\u003C/a> as\nthe default browser to run our tests. Don’t worry about installing PhantomJS\nthough, as the\n\u003Ca href=\"https://github.com/karma-runner/karma-phantomjs-launcher\">karma-phantomjs-launcher\u003C/a>\npackage includes a standalone executable \u003Ccode>PhanthomJS\u003C/code> binary. Lastly, we are\nusing\n\u003Ca href=\"https://github.com/karma-runner/karma-coverage\" target=\"_blank\">karma-coverage\u003C/a>\nto generate our code coverage.\u003C/em>\u003C/p>\n\u003Cbr>\n\u003Cp>\u003Cstrong>Step 2:\u003C/strong> Start by modifying the \u003Ccode>browsers\u003C/code> flag within the \u003Ccode>karma.conf.js\u003C/code>\nfile, which should be located right on the root directory of your application.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Located on line 49 on my local version of karma.conf.js\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">browsers\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'PhantomJS'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">],\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>In this same file, add the following lines right after the \u003Ccode>browsers\u003C/code> flag to\nmake sure code coverage reports are generated every time the code is tested:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Code coverage report\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">reporters\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'progress'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'coverage'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">preprocessors\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  'app/scripts/**/*.js'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'coverage'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">},\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">coverageReporter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  type\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'html'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  dir\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'coverage'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">},\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Don't forget to add 'karma-coverage' to your list of plugins\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">plugins\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  'karma-jasmine'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  'karma-coverage'\u003C/span>\u003Cspan style=\"color:#6A737D\"> // required for coverage\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cbr>\n\u003Cp>\u003Cstrong>Step 3:\u003C/strong> By now we should be able to run our test and see the code coverage\nreport!\u003C/p>\n\u003Cp>Go to your terminal and execute the following:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">grunt\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> test\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>You should see the following feedback on your screen:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Running\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"clean:server\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (clean) task\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Cleaning\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> .tmp...OK\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Running\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"concurrent:test\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (concurrent) task\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    Running\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"copy:styles\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (copy) task\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    Copied\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> files\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    Done,\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> without\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> errors.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    Execution\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Time\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (2014-05-22 \u003C/span>\u003Cspan style=\"color:#9ECBFF\">20:22:18\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> UTC\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    loading\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> tasks\u003C/span>\u003Cspan style=\"color:#9ECBFF\">  4ms\u003C/span>\u003Cspan style=\"color:#9ECBFF\">  ▇▇▇▇▇▇▇▇▇▇▇▇\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 29%\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    copy:styles\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 64%\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    Total\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 14ms\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Running\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"autoprefixer:dist\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (autoprefixer) task\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Prefixed\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> file\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \".tmp/styles/main.css\"\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> created.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Running\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"connect:test\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (connect) task\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Started\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> connect\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> web\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> server\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> on\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 127.0.0.1:9001.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Running\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"karma:unit\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (karma) task\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">INFO\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [karma]: Karma v0.12.16 server started at http://localhost:8080/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">INFO\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [launcher]: Starting browser PhantomJS\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">WARN\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [watcher]: Pattern \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/Users/scruz/Sites/angularjs-unit-test/test/mock/**/*.js\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> does not match any file.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">INFO\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [PhantomJS \u003C/span>\u003Cspan style=\"color:#79B8FF\">1.9.7\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (Mac \u003C/span>\u003Cspan style=\"color:#9ECBFF\">OS\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> X\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)]: Connected on socket WYv3ZzsuYUZWChR9mUGF with id 42383299\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">PhantomJS\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1.9.7\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (Mac \u003C/span>\u003Cspan style=\"color:#9ECBFF\">OS\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> X\u003C/span>\u003Cspan style=\"color:#E1E4E8\">): Executed 0 of 1 SUCCESS (\u003C/span>\u003Cspan style=\"color:#B392F0\">0\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> secs\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> /\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> PhantomJS\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1.9.7\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (Mac \u003C/span>\u003Cspan style=\"color:#9ECBFF\">OS\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> X\u003C/span>\u003Cspan style=\"color:#E1E4E8\">): Executed 1 of 1 SUCCESS (\u003C/span>\u003Cspan style=\"color:#B392F0\">0\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> secs\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> /\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> PhantomJS\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1.9.7\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (Mac \u003C/span>\u003Cspan style=\"color:#9ECBFF\">OS\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> X\u003C/span>\u003Cspan style=\"color:#E1E4E8\">): Executed 1 of 1 SUCCESS (\u003C/span>\u003Cspan style=\"color:#B392F0\">0.015\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> secs\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> /\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0.011\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> secs\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Done,\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> without\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> errors.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Execution\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Time\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (2014-05-22 \u003C/span>\u003Cspan style=\"color:#9ECBFF\">20:22:17\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> UTC\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">concurrent:test\u003C/span>\u003Cspan style=\"color:#9ECBFF\">    1.6s\u003C/span>\u003Cspan style=\"color:#9ECBFF\">  ▇▇▇▇▇▇▇▇▇▇\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 39%\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">autoprefixer:dist\u003C/span>\u003Cspan style=\"color:#9ECBFF\">  45ms\u003C/span>\u003Cspan style=\"color:#9ECBFF\">  ▇\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 1%\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">karma:unit\u003C/span>\u003Cspan style=\"color:#9ECBFF\">         2.5s\u003C/span>\u003Cspan style=\"color:#9ECBFF\">  ▇▇▇▇▇▇▇▇▇▇▇▇\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 59%\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Total\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 4.1s\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cbr>\n\u003Ch2 id=\"finally-view-your-code-coverage-report\">Finally! View your code coverage report\u003C/h2>\n\u003Cp>If everything ran successfuly for you as it did for me, you will notice that a\ndirectory called \u003Ccode>coverage\u003C/code> was generated in the root of your application. Open\nthe html file that was generated in your browser and it should look something\nlike this:\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/blog/2014-05-22-04-49-33-pm.png\" alt=\"\"> \u003Cbr> \u003Cem>File location:\n\u003Ccode>coverage/PhantomJS(...)/index.html\u003C/code>\u003C/em>\u003C/p>\n\u003Cp>And that’s it for now! I wish I had this guide when I first had to generate a\ncode coverage report in my Yeoman scaffolded application. So I hope this helps\nyou as much as it did me.\u003C/p>\n\u003Ch3 id=\"demo\">Demo\u003C/h3>\n\u003Cp>If you are a code sample kind of person, don’t worry I’ve got you covered!\nEverything we covered on this tutorial is available on my GitHub account:\n\u003Cbr>\u003Ca href=\"https://github.com/sergiocruz/angularjs-code-coverage\" target=\"_blank\">\u003C/a>\u003Ca href=\"https://github.com/sergiocruz/angularjs-code-coverage\">https://github.com/sergiocruz/angularjs-code-coverage\u003C/a>\u003C/p>",{"headings":212,"localImagePaths":228,"remoteImagePaths":229,"frontmatter":230,"imagePaths":233},[213,216,219,222,225],{"depth":63,"slug":214,"text":215},"using-karma-jasmine-and-phantomjs-to-run-tests-on-your-angularjs-projects","Using Karma, Jasmine and PhantomJS to run tests on your AngularJS projects",{"depth":63,"slug":217,"text":218},"scaffolding-a-new-application","Scaffolding a new application",{"depth":63,"slug":220,"text":221},"setting-up-testing-environment","Setting up testing environment",{"depth":63,"slug":223,"text":224},"finally-view-your-code-coverage-report","Finally! View your code coverage report",{"depth":76,"slug":226,"text":227},"demo","Demo",[],[],{"title":197,"description":198,"date":231,"tags":232,"readingTime":205,"slug":194},["Date","2014-05-22T00:00:00.000Z"],[94,125,201,202,203,204],[],"2014-05-22-unit-test-angularjs.md","unit-test-sailsjs-with-mocha-and-instanbul-for-code-coverage",{"id":235,"data":237,"body":243,"filePath":244,"digest":245,"rendered":246,"legacyId":262},{"title":238,"description":239,"date":240,"tags":241,"draft":22,"author":23,"readingTime":205},"Unit test SailsJS with Mocha and generate code coverage with Istanbul","Unit test your SailsJS applications using Mocha and generate code coverage reports with Istanbul. Step-by-step guide for JavaScript developers working with Node and SailsJS frameworks.",["Date","2014-05-21T00:00:00.000Z"],[50,125,242],"mocha","## Unit testing JavaScript is easy they said. It only takes a few seconds they said.\n\n_And they were right for the most part! Well, maybe seconds is an exaggeration\nbut we can definitely achieve this with very few minutes_\n\nSo you fired up your first `hello world` app using\n\u003Ca href=\"https://sailsjs.org\" target=\"_blank\">SailsJS\u003C/a>, it was super simple\nand you started wondering if testing your app would be as simple. Soon after you\nrealized this was not the case and much like everything else related to testing\nin JavaScript there is not just one right answer.\n\nPerhaps you may have much more experience with SailsJS and have way gone beyond\nthe `hello world` phase and now is time to make sure your application is\nreliable. Unit testing is part of the solution when it comes to code\nreliability.\n\n**\\*Before we start:** Are you a total SailsJS n00b? Follow the official\n\u003Ca href=\"https://sailsjs.org/#!getStarted\" target=\"_blank\">Getting Started\u003C/a>\nguide to get SailsJS installed before proceeding.\\*\n\n### Without further ado, let's get started:\n\n**Step 1:** Add the following dependencies to your project:\n\n```bash\nnpm install mocha --save-dev\nnpm install assert --save-dev\nnpm install sinon --save-dev\nnpm install grunt-mocha-istanbul --save-dev\n```\n\n**Step 2:** Add a `/test` directory to the root directory of your application\nthat mimics the format of the `/api` directory. Your new root directory\nstructure should look something like this:\n\n```\n/api\n/assets\n/config\n/test\n  /adapters\n  /controllers\n  /models\n  /policies\n  /services\n/views\n.gitignore\napp.js\nGruntfile.js\npackage.json\nREADME.md\n```\n\n**Step 3:** Modify your `Gruntfile.js`\n\nFirst add the following snippet at the end of your `grunt.initConfig()`\n_(located around line 414 in my case)_\n\n```javascript\nmocha_istanbul: {\n  coverage: {\n    src: 'test', // the folder, not the files\n    options: {\n      coverageFolder: 'coverage',\n      mask: '**/*.spec.js',\n      root: 'api/'\n    }\n  }\n}\n```\n\nAnd add the two following snippet right before the file ends: _(again around\nline 496 in my case)_\n\n```javascript\n// Adds \"grunt-mocha-istanbul\" npm task\ngrunt.loadNpmTasks('grunt-mocha-istanbul');\n\n// Adding test task enabling \"grunt test\" command\ngrunt.registerTask('test', ['mocha_istanbul:coverage']);\n```\n\n**Step 4:** Create your first test\n\nFor the sake of simplicity let's create a HelloController and its test:\n\n```javascript\n/**\n * Sails Controller: HelloController\n * File location: api/controllers/HelloController.js\n */\nmodule.exports = {\n  index: function (req, res) {\n    res.send('Hello World');\n  },\n};\n```\n\n```javascript\n/**\n * Test File: Testing HelloController\n * File location: test/controllers/HelloController.spec.js\n */\nvar HelloController = require('../../api/controllers/HelloController'),\n  sinon = require('sinon'),\n  assert = require('assert');\n\ndescribe('The Hello Controller', function () {\n  describe('when we invoke the index action', function () {\n    it('should return hello world message', function () {\n      // Mocking res.send() method by using a sinon spy\n      var send = sinon.spy();\n\n      // Executes controller action\n      HelloController.index(null, {\n        send: send,\n      });\n\n      // Asserts send() method was called and that it was called\n      // with the correct arguments: 'Hello World'\n      assert(send.called);\n      assert(send.calledWith('Hello World'));\n    });\n  });\n});\n```\n\n**Step 5:** Execute test\n\nExecute the following command on your Terminal:\n\n```bash\ngrunt test\n```\n\nThe feedback you will receive should be similar to the following:\n\n```bash\nRunning \"mocha_istanbul:coverage\" (mocha_istanbul) task\n\n  ․\n\n  1 passing (6ms)\n\n===================================================================\nWriting coverage object [/Users/scruz/Sites/sails-unit-test/coverage/coverage.json]\nWriting coverage reports at [/Users/scruz/Sites/sails-unit-test/coverage]\n===================================================================\n\n======================== Coverage summary =========================\nStatements   : 100% ( 2/2 )\nBranches     : 100% ( 0/0 )\nFunctions    : 100% ( 1/1 )\nLines        : 100% ( 2/2 )\n===================================================================\n>> Done. Check coverage folder.\n\nDone, without errors.\n```\n\nAlso by now you may have realized the `/coverage` folder was generated on your\napplication's root directory. Open the following html file on your browser to\nsee your current code coverage: `/coverage/lcov-report/index.html`\n\n**And... we're all done!**\n\nI hope this helped you as much as it helped me! Feel free to contact me with any\nquestions.\n\n**Demo:** a working code sample for what we have accomplished in this tutorial\nis available on my GitHub account:\n\u003Ca href=\"https://github.com/sergiocruz/sails-unit-test\" target=\"_blank\">https://github.com/sergiocruz/sails-unit-test\u003C/a>\n\nEnjoy!","src/content/blog/2014-05-21-unit-test-sails.md","5927cec4c1bf7ba7",{"html":247,"metadata":248},"\u003Ch2 id=\"unit-testing-javascript-is-easy-they-said-it-only-takes-a-few-seconds-they-said\">Unit testing JavaScript is easy they said. It only takes a few seconds they said.\u003C/h2>\n\u003Cp>\u003Cem>And they were right for the most part! Well, maybe seconds is an exaggeration\nbut we can definitely achieve this with very few minutes\u003C/em>\u003C/p>\n\u003Cp>So you fired up your first \u003Ccode>hello world\u003C/code> app using\n\u003Ca href=\"https://sailsjs.org\" target=\"_blank\">SailsJS\u003C/a>, it was super simple\nand you started wondering if testing your app would be as simple. Soon after you\nrealized this was not the case and much like everything else related to testing\nin JavaScript there is not just one right answer.\u003C/p>\n\u003Cp>Perhaps you may have much more experience with SailsJS and have way gone beyond\nthe \u003Ccode>hello world\u003C/code> phase and now is time to make sure your application is\nreliable. Unit testing is part of the solution when it comes to code\nreliability.\u003C/p>\n\u003Cp>\u003Cstrong>*Before we start:\u003C/strong> Are you a total SailsJS n00b? Follow the official\n\u003Ca href=\"https://sailsjs.org/#!getStarted\" target=\"_blank\">Getting Started\u003C/a>\nguide to get SailsJS installed before proceeding.*\u003C/p>\n\u003Ch3 id=\"without-further-ado-lets-get-started\">Without further ado, let’s get started:\u003C/h3>\n\u003Cp>\u003Cstrong>Step 1:\u003C/strong> Add the following dependencies to your project:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> mocha\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --save-dev\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> assert\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --save-dev\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> sinon\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --save-dev\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> grunt-mocha-istanbul\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --save-dev\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Step 2:\u003C/strong> Add a \u003Ccode>/test\u003C/code> directory to the root directory of your application\nthat mimics the format of the \u003Ccode>/api\u003C/code> directory. Your new root directory\nstructure should look something like this:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>/api\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>/assets\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>/config\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>/test\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  /adapters\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  /controllers\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  /models\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  /policies\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  /services\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>/views\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>.gitignore\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>app.js\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Gruntfile.js\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>package.json\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>README.md\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Step 3:\u003C/strong> Modify your \u003Ccode>Gruntfile.js\u003C/code>\u003C/p>\n\u003Cp>First add the following snippet at the end of your \u003Ccode>grunt.initConfig()\u003C/code>\n\u003Cem>(located around line 414 in my case)\u003C/em>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">mocha_istanbul\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  coverage\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    src\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'test'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#6A737D\">// the folder, not the files\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    options\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      coverageFolder\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'coverage'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      mask\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'**/*.spec.js'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      root\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'api/'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>And add the two following snippet right before the file ends: \u003Cem>(again around\nline 496 in my case)\u003C/em>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Adds \"grunt-mocha-istanbul\" npm task\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">grunt.\u003C/span>\u003Cspan style=\"color:#B392F0\">loadNpmTasks\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'grunt-mocha-istanbul'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Adding test task enabling \"grunt test\" command\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">grunt.\u003C/span>\u003Cspan style=\"color:#B392F0\">registerTask\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'test'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'mocha_istanbul:coverage'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Step 4:\u003C/strong> Create your first test\u003C/p>\n\u003Cp>For the sake of simplicity let’s create a HelloController and its test:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">/**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"> * Sails Controller: HelloController\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"> * File location: api/controllers/HelloController.js\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"> */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">module\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">exports\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  index\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">req\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">res\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    res.\u003C/span>\u003Cspan style=\"color:#B392F0\">send\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Hello World'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">/**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"> * Test File: Testing HelloController\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"> * File location: test/controllers/HelloController.spec.js\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"> */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> HelloController \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> require\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'../../api/controllers/HelloController'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  sinon \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> require\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'sinon'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  assert \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> require\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'assert'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">describe\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'The Hello Controller'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  describe\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'when we invoke the index action'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    it\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'should return hello world message'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // Mocking res.send() method by using a sinon spy\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> send \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sinon.\u003C/span>\u003Cspan style=\"color:#B392F0\">spy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // Executes controller action\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      HelloController.\u003C/span>\u003Cspan style=\"color:#B392F0\">index\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        send: send,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // Asserts send() method was called and that it was called\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // with the correct arguments: 'Hello World'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      assert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(send.called);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      assert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(send.\u003C/span>\u003Cspan style=\"color:#B392F0\">calledWith\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Hello World'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Step 5:\u003C/strong> Execute test\u003C/p>\n\u003Cp>Execute the following command on your Terminal:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">grunt\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> test\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The feedback you will receive should be similar to the following:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Running\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"mocha_istanbul:coverage\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (mocha_istanbul) task\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  ․\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  1\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> passing\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (6ms)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">===================================================================\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Writing\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> coverage\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> object\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [/Users/scruz/Sites/sails-unit-test/coverage/coverage.json]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Writing\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> coverage\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> reports\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> at\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [/Users/scruz/Sites/sails-unit-test/coverage]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">===================================================================\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">========================\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> Coverage\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> summary\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> =========================\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Statements\u003C/span>\u003Cspan style=\"color:#9ECBFF\">   :\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 100%\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ( \u003C/span>\u003Cspan style=\"color:#9ECBFF\">2/2\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Branches\u003C/span>\u003Cspan style=\"color:#9ECBFF\">     :\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 100%\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ( \u003C/span>\u003Cspan style=\"color:#9ECBFF\">0/0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Functions\u003C/span>\u003Cspan style=\"color:#9ECBFF\">    :\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 100%\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ( \u003C/span>\u003Cspan style=\"color:#9ECBFF\">1/1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Lines\u003C/span>\u003Cspan style=\"color:#9ECBFF\">        :\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 100%\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ( \u003C/span>\u003Cspan style=\"color:#9ECBFF\">2/2\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">===================================================================\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">>>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Done. Check coverage folder.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Done,\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> without\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> errors.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Also by now you may have realized the \u003Ccode>/coverage\u003C/code> folder was generated on your\napplication’s root directory. Open the following html file on your browser to\nsee your current code coverage: \u003Ccode>/coverage/lcov-report/index.html\u003C/code>\u003C/p>\n\u003Cp>\u003Cstrong>And… we’re all done!\u003C/strong>\u003C/p>\n\u003Cp>I hope this helped you as much as it helped me! Feel free to contact me with any\nquestions.\u003C/p>\n\u003Cp>\u003Cstrong>Demo:\u003C/strong> a working code sample for what we have accomplished in this tutorial\nis available on my GitHub account:\n\u003Ca href=\"https://github.com/sergiocruz/sails-unit-test\" target=\"_blank\">\u003C/a>\u003Ca href=\"https://github.com/sergiocruz/sails-unit-test\">https://github.com/sergiocruz/sails-unit-test\u003C/a>\u003C/p>\n\u003Cp>Enjoy!\u003C/p>",{"headings":249,"localImagePaths":256,"remoteImagePaths":257,"frontmatter":258,"imagePaths":261},[250,253],{"depth":63,"slug":251,"text":252},"unit-testing-javascript-is-easy-they-said-it-only-takes-a-few-seconds-they-said","Unit testing JavaScript is easy they said. It only takes a few seconds they said.",{"depth":76,"slug":254,"text":255},"without-further-ado-lets-get-started","Without further ado, let’s get started:",[],[],{"title":238,"description":239,"date":259,"tags":260,"readingTime":205,"slug":235},["Date","2014-05-21T00:00:00.000Z"],[50,125,242],[],"2014-05-21-unit-test-sails.md","reactjs-unit-test-and-code-coverage-with-jest",{"id":263,"data":265,"body":273,"filePath":274,"digest":275,"rendered":276,"legacyId":298},{"title":266,"description":267,"date":268,"tags":269,"draft":22,"author":23,"readingTime":205},"React unit test and code coverage with Jest and Istanbul","Complete guide to setting up React unit testing with Jest and generating code coverage reports. Learn how to configure Jest for React components and write effective tests.",["Date","2015-08-02T00:00:00.000Z"],[270,271,125,272,161],"react","jest","code-coverage","The recommended testing framework for [React](https://reactjs.org/) is\n[Jest](https://jestjs.io/). When I wrote this post getting a testing environment\nsetup was not easy at all. So I decided to write this article describing some\nbasic steps.\n\n## With Create React App\n\nIf you used [Create React App](https://create-react-app.dev/) to generate your\nproject, then your project is pre-configured to generate\n[Code Coverage Reports](https://create-react-app.dev/docs/running-tests/#coverage-reporting).\nTo generate a report, run this command:\n\n```shell\nnpm test -- --coverage\n```\n\nNotice a new directory called `/coverage` will be created at the root of your\nproject.\n\n## Configuring Jest to run React Tests\n\n**Step 1:** Get your new project setup (`npm init`)\n\n**Step 2:** Bring in npm dependencies:\n\n- `npm install --save-dev jest`\n- `npm install --save-dev babel-jest @babel/core @babel/preset-env`\n\n**Step3:** Add the following lines to your `package.json` file:\n\n```javascript\n\"scripts\": {\n  \"test\": \"jest\",\n},\n\"jest\": {\n  \"collectCoverageFrom\": [\n    \"src/**/*.{js,jsx,ts,tsx}\",\n    \"!src/**/*.d.ts\"\n  ]\n}\n```\n\n**Step 4:** Write your component:\n\n```jsx\n// File location: app/components/App.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction App() {\n  return (\n    \u003Cdiv>\n      \u003Ch1>Hello World\u003C/h1>\n    \u003C/div>\n  );\n}\n\nReactDOM.render(\u003CApp />, document.getElementById('app'));\n```\n\n**Step 5:** Create a `__tests__` directory on your project's root and write your\nfirst test.\n\n_**Protip:** Jest's conventions suggest using a directory called `__tests__` on\nyour project's root. Good news is you can change that,\n[check out the docs](http://facebook.github.io/jest/docs/api.html#config-testdirectoryname-string)._\n\n```javascript\n// File location: __tests__/app/App-test.js\njest.dontMock('../../app/components/App');\n\nimport React from 'react';\nimport ReactTestUtils from 'react-dom/test-utils';\nimport App from '../../app/components/App';\n\ndescribe('App', function () {\n  it('renders with correct text', function () {\n    const app = ReactTestUtils.renderIntoDocument(\u003CApp />);\n\n    const appNode = React.findDOMNode(app);\n\n    // Asserts that the text in the \u003Ch1> tag\n    // is equal to \"Hello World\" (like our App component)\n    expect(appNode.querySelector('h1').textContent).toEqual('Hello World');\n  });\n});\n```\n\n**Step 6:** Run tests and you should be all done: `npm test`\n\nPS: Don't forget to checkout the `coverage` directory. It contains all your code\ncoverage reports.\n\n### A word on conventions\n\nFor my projects, I decided to have an `app` directory where all my code lives. I\nthen replicate the `app` directory within `__tests__` directory. That way all my\nfiles and test files have the same name, except the test file names end with a\n`-test` after its name. For example: the component file `app/App.js` would have\nits test in the following location: `__tests__/app/App-test.js`.\n\n### Code sample\n\nIf you're anything like me, you like seeing code samples. Feel free to check out\nthe app I have been writing. It uses some of the conventions I've described in\nthis post: https://github.com/sergiocruz/react-connect4","src/content/blog/2015-08-02-react-jest-unit-test.md","9113cf364513e179",{"html":277,"metadata":278},"\u003Cp>The recommended testing framework for \u003Ca href=\"https://reactjs.org/\">React\u003C/a> is\n\u003Ca href=\"https://jestjs.io/\">Jest\u003C/a>. When I wrote this post getting a testing environment\nsetup was not easy at all. So I decided to write this article describing some\nbasic steps.\u003C/p>\n\u003Ch2 id=\"with-create-react-app\">With Create React App\u003C/h2>\n\u003Cp>If you used \u003Ca href=\"https://create-react-app.dev/\">Create React App\u003C/a> to generate your\nproject, then your project is pre-configured to generate\n\u003Ca href=\"https://create-react-app.dev/docs/running-tests/#coverage-reporting\">Code Coverage Reports\u003C/a>.\nTo generate a report, run this command:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> test\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --coverage\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Notice a new directory called \u003Ccode>/coverage\u003C/code> will be created at the root of your\nproject.\u003C/p>\n\u003Ch2 id=\"configuring-jest-to-run-react-tests\">Configuring Jest to run React Tests\u003C/h2>\n\u003Cp>\u003Cstrong>Step 1:\u003C/strong> Get your new project setup (\u003Ccode>npm init\u003C/code>)\u003C/p>\n\u003Cp>\u003Cstrong>Step 2:\u003C/strong> Bring in npm dependencies:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>npm install --save-dev jest\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>npm install --save-dev babel-jest @babel/core @babel/preset-env\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Step3:\u003C/strong> Add the following lines to your \u003Ccode>package.json\u003C/code> file:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">\"scripts\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  \"test\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"jest\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">},\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">\"jest\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  \"collectCoverageFrom\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"src/**/*.{js,jsx,ts,tsx}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"!src/**/*.d.ts\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  ]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Step 4:\u003C/strong> Write your component:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// File location: app/components/App.js\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> React \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'react'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ReactDOM \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'react-dom'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> App\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">h1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>Hello World&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">h1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">ReactDOM.\u003C/span>\u003Cspan style=\"color:#B392F0\">render\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">App\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />, document.\u003C/span>\u003Cspan style=\"color:#B392F0\">getElementById\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'app'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">));\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Step 5:\u003C/strong> Create a \u003Ccode>__tests__\u003C/code> directory on your project’s root and write your\nfirst test.\u003C/p>\n\u003Cp>\u003Cem>\u003Cstrong>Protip:\u003C/strong> Jest’s conventions suggest using a directory called \u003Ccode>__tests__\u003C/code> on\nyour project’s root. Good news is you can change that,\n\u003Ca href=\"http://facebook.github.io/jest/docs/api.html#config-testdirectoryname-string\">check out the docs\u003C/a>.\u003C/em>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// File location: __tests__/app/App-test.js\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">jest.\u003C/span>\u003Cspan style=\"color:#B392F0\">dontMock\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'../../app/components/App'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> React \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'react'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ReactTestUtils \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'react-dom/test-utils'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> App \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '../../app/components/App'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">describe\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'App'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  it\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'renders with correct text'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> app\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ReactTestUtils.\u003C/span>\u003Cspan style=\"color:#B392F0\">renderIntoDocument\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">App\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> appNode\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> React.\u003C/span>\u003Cspan style=\"color:#B392F0\">findDOMNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(app);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Asserts that the text in the &#x3C;h1> tag\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // is equal to \"Hello World\" (like our App component)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(appNode.\u003C/span>\u003Cspan style=\"color:#B392F0\">querySelector\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'h1'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">).textContent).\u003C/span>\u003Cspan style=\"color:#B392F0\">toEqual\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Hello World'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Step 6:\u003C/strong> Run tests and you should be all done: \u003Ccode>npm test\u003C/code>\u003C/p>\n\u003Cp>PS: Don’t forget to checkout the \u003Ccode>coverage\u003C/code> directory. It contains all your code\ncoverage reports.\u003C/p>\n\u003Ch3 id=\"a-word-on-conventions\">A word on conventions\u003C/h3>\n\u003Cp>For my projects, I decided to have an \u003Ccode>app\u003C/code> directory where all my code lives. I\nthen replicate the \u003Ccode>app\u003C/code> directory within \u003Ccode>__tests__\u003C/code> directory. That way all my\nfiles and test files have the same name, except the test file names end with a\n\u003Ccode>-test\u003C/code> after its name. For example: the component file \u003Ccode>app/App.js\u003C/code> would have\nits test in the following location: \u003Ccode>__tests__/app/App-test.js\u003C/code>.\u003C/p>\n\u003Ch3 id=\"code-sample\">Code sample\u003C/h3>\n\u003Cp>If you’re anything like me, you like seeing code samples. Feel free to check out\nthe app I have been writing. It uses some of the conventions I’ve described in\nthis post: \u003Ca href=\"https://github.com/sergiocruz/react-connect4\">https://github.com/sergiocruz/react-connect4\u003C/a>\u003C/p>",{"headings":279,"localImagePaths":292,"remoteImagePaths":293,"frontmatter":294,"imagePaths":297},[280,283,286,289],{"depth":63,"slug":281,"text":282},"with-create-react-app","With Create React App",{"depth":63,"slug":284,"text":285},"configuring-jest-to-run-react-tests","Configuring Jest to run React Tests",{"depth":76,"slug":287,"text":288},"a-word-on-conventions","A word on conventions",{"depth":76,"slug":290,"text":291},"code-sample","Code sample",[],[],{"title":266,"description":267,"date":295,"tags":296,"readingTime":205,"slug":263},["Date","2015-08-02T00:00:00.000Z"],[270,271,125,272,161],[],"2015-08-02-react-jest-unit-test.md","videos",["Map",301,302,326,327,351,352,375,376,400,401,424,425,448,449,472,473],"2016-06-team-ready-react",{"id":301,"data":303,"body":310,"filePath":311,"digest":312,"rendered":313,"legacyId":325},{"title":304,"description":305,"date":306,"type":307,"venue":308,"link":309,"featured":22},"Is your team ready to learn React?","A webinar exploring how to assess team readiness for React adoption and strategies for successful React implementation in development teams.",["Date","2016-06-15T00:00:00.000Z"],"Webinar","Pluralsight Webinars","https://youtu.be/vFbf-_FFuZ4","An educational webinar focused on helping teams evaluate their readiness for\nReact adoption and providing guidance for successful implementation.\n\n## Team Readiness Assessment\n\n- JavaScript proficiency requirements\n- Component-based thinking\n- Build tool familiarity\n- Testing strategy considerations\n- Training and onboarding approaches\n- Project planning for React adoption\n\nValuable for engineering managers and tech leads considering React for their\nteams.","src/content/videos/2016-06-team-ready-react.md","a9528199d26a5a3c",{"html":314,"metadata":315},"\u003Cp>An educational webinar focused on helping teams evaluate their readiness for\nReact adoption and providing guidance for successful implementation.\u003C/p>\n\u003Ch2 id=\"team-readiness-assessment\">Team Readiness Assessment\u003C/h2>\n\u003Cul>\n\u003Cli>JavaScript proficiency requirements\u003C/li>\n\u003Cli>Component-based thinking\u003C/li>\n\u003Cli>Build tool familiarity\u003C/li>\n\u003Cli>Testing strategy considerations\u003C/li>\n\u003Cli>Training and onboarding approaches\u003C/li>\n\u003Cli>Project planning for React adoption\u003C/li>\n\u003C/ul>\n\u003Cp>Valuable for engineering managers and tech leads considering React for their\nteams.\u003C/p>",{"headings":316,"localImagePaths":320,"remoteImagePaths":321,"frontmatter":322,"imagePaths":324},[317],{"depth":63,"slug":318,"text":319},"team-readiness-assessment","Team Readiness Assessment",[],[],{"title":304,"description":305,"date":323,"type":307,"venue":308,"link":309,"featured":22},["Date","2016-06-15T00:00:00.000Z"],[],"2016-06-team-ready-react.md","2016-06-upgrading-angularjs-angular-lrtf",{"id":326,"data":328,"body":335,"filePath":336,"digest":337,"rendered":338,"legacyId":350},{"title":329,"description":330,"date":331,"type":332,"venue":333,"link":334,"featured":22},"Upgrading from AngularJS to Angular","A detailed presentation covering strategies and best practices for upgrading applications from AngularJS to Angular, presented at Little Rock Tech Fest.",["Date","2016-06-01T00:00:00.000Z"],"Conference","Little Rock Tech Fest 2016","https://youtu.be/FvTw_PDRWDQ","A comprehensive guide to upgrading AngularJS applications to Angular, covering\nboth technical strategies and project management approaches.\n\n## Upgrade Strategies Covered\n\n- Assessment and planning phases\n- Incremental upgrade approaches\n- Component migration strategies\n- Dependency injection changes\n- Testing during migration\n- Team training and preparation\n\nEssential guidance for development teams planning AngularJS to Angular\nmigrations.","src/content/videos/2016-06-upgrading-angularjs-angular-lrtf.md","68c5537eebc23be1",{"html":339,"metadata":340},"\u003Cp>A comprehensive guide to upgrading AngularJS applications to Angular, covering\nboth technical strategies and project management approaches.\u003C/p>\n\u003Ch2 id=\"upgrade-strategies-covered\">Upgrade Strategies Covered\u003C/h2>\n\u003Cul>\n\u003Cli>Assessment and planning phases\u003C/li>\n\u003Cli>Incremental upgrade approaches\u003C/li>\n\u003Cli>Component migration strategies\u003C/li>\n\u003Cli>Dependency injection changes\u003C/li>\n\u003Cli>Testing during migration\u003C/li>\n\u003Cli>Team training and preparation\u003C/li>\n\u003C/ul>\n\u003Cp>Essential guidance for development teams planning AngularJS to Angular\nmigrations.\u003C/p>",{"headings":341,"localImagePaths":345,"remoteImagePaths":346,"frontmatter":347,"imagePaths":349},[342],{"depth":63,"slug":343,"text":344},"upgrade-strategies-covered","Upgrade Strategies Covered",[],[],{"title":329,"description":330,"date":348,"type":332,"venue":333,"link":334,"featured":22},["Date","2016-06-01T00:00:00.000Z"],[],"2016-06-upgrading-angularjs-angular-lrtf.md","2017-04-angular-upgrade-tale",{"id":351,"data":353,"body":359,"filePath":360,"digest":361,"rendered":362,"legacyId":374},{"title":354,"description":355,"date":356,"type":332,"venue":357,"link":358,"featured":22},"Back from the past: A tale of helping others upgrade from Angular 1.x","A conference talk sharing experiences and lessons learned from helping multiple teams successfully upgrade from AngularJS to Angular.",["Date","2017-04-01T00:00:00.000Z"],"ngconf 2017","https://youtu.be/FFhJSkI35U8","A comprehensive conference presentation detailing real-world experiences helping\ndevelopment teams navigate the complex process of upgrading from AngularJS to\nAngular.\n\n## Key Lessons Shared\n\n- Common pitfalls and how to avoid them\n- Strategies for large-scale application migrations\n- Team coordination and change management\n- Technical approaches to incremental upgrades\n- Testing strategies during migration periods\n- Post-migration optimization and cleanup\n\nThis talk provides valuable insights for any team facing major framework\nmigrations and emphasizes the human side of technical transitions.","src/content/videos/2017-04-angular-upgrade-tale.md","1938eaedfd7a7b8a",{"html":363,"metadata":364},"\u003Cp>A comprehensive conference presentation detailing real-world experiences helping\ndevelopment teams navigate the complex process of upgrading from AngularJS to\nAngular.\u003C/p>\n\u003Ch2 id=\"key-lessons-shared\">Key Lessons Shared\u003C/h2>\n\u003Cul>\n\u003Cli>Common pitfalls and how to avoid them\u003C/li>\n\u003Cli>Strategies for large-scale application migrations\u003C/li>\n\u003Cli>Team coordination and change management\u003C/li>\n\u003Cli>Technical approaches to incremental upgrades\u003C/li>\n\u003Cli>Testing strategies during migration periods\u003C/li>\n\u003Cli>Post-migration optimization and cleanup\u003C/li>\n\u003C/ul>\n\u003Cp>This talk provides valuable insights for any team facing major framework\nmigrations and emphasizes the human side of technical transitions.\u003C/p>",{"headings":365,"localImagePaths":369,"remoteImagePaths":370,"frontmatter":371,"imagePaths":373},[366],{"depth":63,"slug":367,"text":368},"key-lessons-shared","Key Lessons Shared",[],[],{"title":354,"description":355,"date":372,"type":332,"venue":357,"link":358,"featured":22},["Date","2017-04-01T00:00:00.000Z"],[],"2017-04-angular-upgrade-tale.md","2022-06-interview-tips-junior-developers",{"id":375,"data":377,"body":384,"filePath":385,"digest":386,"rendered":387,"legacyId":399},{"title":378,"description":379,"date":380,"type":381,"venue":382,"link":383,"featured":22},"Interview Tips for Junior Developers!","Practical advice and strategies to help junior developers succeed in technical interviews and land their first engineering roles.",["Date","2022-06-01T00:00:00.000Z"],"Interview","Exponent YouTube","https://youtu.be/ZWsaMjUfdyU","Comprehensive guidance for junior developers navigating the technical interview\nprocess, from preparation strategies to handling different types of interviews.\n\n## Interview Strategies Covered\n\n- Preparing for coding challenges and technical assessments\n- Communicating your thought process effectively\n- Handling behavioral interview questions\n- Showcasing projects and experience\n- Questions to ask your interviewers\n- Managing interview nerves and building confidence\n\nEssential viewing for new graduates and career changers entering the software\nengineering field.","src/content/videos/2022-06-interview-tips-junior-developers.md","27e2fb9aec0f8258",{"html":388,"metadata":389},"\u003Cp>Comprehensive guidance for junior developers navigating the technical interview\nprocess, from preparation strategies to handling different types of interviews.\u003C/p>\n\u003Ch2 id=\"interview-strategies-covered\">Interview Strategies Covered\u003C/h2>\n\u003Cul>\n\u003Cli>Preparing for coding challenges and technical assessments\u003C/li>\n\u003Cli>Communicating your thought process effectively\u003C/li>\n\u003Cli>Handling behavioral interview questions\u003C/li>\n\u003Cli>Showcasing projects and experience\u003C/li>\n\u003Cli>Questions to ask your interviewers\u003C/li>\n\u003Cli>Managing interview nerves and building confidence\u003C/li>\n\u003C/ul>\n\u003Cp>Essential viewing for new graduates and career changers entering the software\nengineering field.\u003C/p>",{"headings":390,"localImagePaths":394,"remoteImagePaths":395,"frontmatter":396,"imagePaths":398},[391],{"depth":63,"slug":392,"text":393},"interview-strategies-covered","Interview Strategies Covered",[],[],{"title":378,"description":379,"date":397,"type":381,"venue":382,"link":383,"featured":22},["Date","2022-06-01T00:00:00.000Z"],[],"2022-06-interview-tips-junior-developers.md","2017-05-challenges-upgrading-angular",{"id":400,"data":402,"body":408,"filePath":409,"digest":410,"rendered":411,"legacyId":423},{"title":403,"description":404,"date":405,"type":381,"venue":406,"link":407,"featured":22},"Challenges of Upgrading to Angular","An interview discussing the common challenges and strategies for upgrading from AngularJS to Angular, sharing real-world experiences and solutions.",["Date","2017-05-01T00:00:00.000Z"],"This Dot Media","https://youtu.be/xT4P2holvi0","A candid discussion about the practical challenges teams face when migrating\nfrom AngularJS (1.x) to Angular (2+), with real-world solutions and strategies.\n\n## Migration Challenges Discussed\n\n- Planning and scoping large-scale migrations\n- Handling breaking changes and deprecated features\n- Team training and skill development\n- Managing technical debt during transitions\n- Incremental migration strategies\n- Testing approaches for hybrid applications\n\nValuable insights for engineering teams considering or currently undergoing\nAngular upgrades.","src/content/videos/2017-05-challenges-upgrading-angular.md","6a05e1191881e623",{"html":412,"metadata":413},"\u003Cp>A candid discussion about the practical challenges teams face when migrating\nfrom AngularJS (1.x) to Angular (2+), with real-world solutions and strategies.\u003C/p>\n\u003Ch2 id=\"migration-challenges-discussed\">Migration Challenges Discussed\u003C/h2>\n\u003Cul>\n\u003Cli>Planning and scoping large-scale migrations\u003C/li>\n\u003Cli>Handling breaking changes and deprecated features\u003C/li>\n\u003Cli>Team training and skill development\u003C/li>\n\u003Cli>Managing technical debt during transitions\u003C/li>\n\u003Cli>Incremental migration strategies\u003C/li>\n\u003Cli>Testing approaches for hybrid applications\u003C/li>\n\u003C/ul>\n\u003Cp>Valuable insights for engineering teams considering or currently undergoing\nAngular upgrades.\u003C/p>",{"headings":414,"localImagePaths":418,"remoteImagePaths":419,"frontmatter":420,"imagePaths":422},[415],{"depth":63,"slug":416,"text":417},"migration-challenges-discussed","Migration Challenges Discussed",[],[],{"title":403,"description":404,"date":421,"type":381,"venue":406,"link":407,"featured":22},["Date","2017-05-01T00:00:00.000Z"],[],"2017-05-challenges-upgrading-angular.md","2018-04-karaoke-machine-angular-html5",{"id":424,"data":426,"body":432,"filePath":433,"digest":434,"rendered":435,"legacyId":447},{"title":427,"description":428,"date":429,"type":332,"venue":430,"link":431,"featured":22},"Building a Karaoke Machine with Angular and HTML5 Speech Recognition","A creative technical talk demonstrating how to build an interactive karaoke application using Angular and modern web APIs like HTML5 Speech Recognition.",["Date","2018-04-01T00:00:00.000Z"],"ngconf 2018","https://youtu.be/WHMyaTy7PME","An innovative conference presentation showcasing the power of modern web\ntechnologies by building a fully functional karaoke machine application.\n\n## Technical Implementation\n\n- Angular framework architecture for real-time applications\n- HTML5 Speech Recognition API integration\n- Audio processing and synchronization\n- User interface design for interactive experiences\n- Web API capabilities and browser compatibility\n\nThis talk demonstrates the creative possibilities when combining traditional\nframeworks with cutting-edge web APIs, showing how developers can build engaging\nuser experiences.","src/content/videos/2018-04-karaoke-machine-angular-html5.md","d2c324719ddb4158",{"html":436,"metadata":437},"\u003Cp>An innovative conference presentation showcasing the power of modern web\ntechnologies by building a fully functional karaoke machine application.\u003C/p>\n\u003Ch2 id=\"technical-implementation\">Technical Implementation\u003C/h2>\n\u003Cul>\n\u003Cli>Angular framework architecture for real-time applications\u003C/li>\n\u003Cli>HTML5 Speech Recognition API integration\u003C/li>\n\u003Cli>Audio processing and synchronization\u003C/li>\n\u003Cli>User interface design for interactive experiences\u003C/li>\n\u003Cli>Web API capabilities and browser compatibility\u003C/li>\n\u003C/ul>\n\u003Cp>This talk demonstrates the creative possibilities when combining traditional\nframeworks with cutting-edge web APIs, showing how developers can build engaging\nuser experiences.\u003C/p>",{"headings":438,"localImagePaths":442,"remoteImagePaths":443,"frontmatter":444,"imagePaths":446},[439],{"depth":63,"slug":440,"text":441},"technical-implementation","Technical Implementation",[],[],{"title":427,"description":428,"date":445,"type":332,"venue":430,"link":431,"featured":22},["Date","2018-04-01T00:00:00.000Z"],[],"2018-04-karaoke-machine-angular-html5.md","2022-08-most-important-engineering-manager-skills",{"id":448,"data":450,"body":456,"filePath":457,"digest":458,"rendered":459,"legacyId":471},{"title":451,"description":452,"date":453,"type":381,"venue":382,"link":454,"featured":455},"The MOST Important Engineering Manager Skills?","Exploring the critical skills every engineering manager needs to be successful, from technical competency to people leadership and strategic thinking.",["Date","2022-08-01T00:00:00.000Z"],"https://youtu.be/5Qf5sOqRuLk",true,"A focused discussion on the essential skills that separate effective engineering\nmanagers from the rest, covering both technical and interpersonal competencies.\n\n## Skills Discussed\n\n- Technical credibility and staying current\n- People management and team development\n- Strategic thinking and planning\n- Communication across different stakeholders\n- Decision-making under uncertainty\n- Building and scaling engineering processes\n\nThis video is particularly valuable for individual contributors considering\nmanagement roles and new engineering managers looking to prioritize their skill\ndevelopment.","src/content/videos/2022-08-most-important-engineering-manager-skills.md","762243be2684e768",{"html":460,"metadata":461},"\u003Cp>A focused discussion on the essential skills that separate effective engineering\nmanagers from the rest, covering both technical and interpersonal competencies.\u003C/p>\n\u003Ch2 id=\"skills-discussed\">Skills Discussed\u003C/h2>\n\u003Cul>\n\u003Cli>Technical credibility and staying current\u003C/li>\n\u003Cli>People management and team development\u003C/li>\n\u003Cli>Strategic thinking and planning\u003C/li>\n\u003Cli>Communication across different stakeholders\u003C/li>\n\u003Cli>Decision-making under uncertainty\u003C/li>\n\u003Cli>Building and scaling engineering processes\u003C/li>\n\u003C/ul>\n\u003Cp>This video is particularly valuable for individual contributors considering\nmanagement roles and new engineering managers looking to prioritize their skill\ndevelopment.\u003C/p>",{"headings":462,"localImagePaths":466,"remoteImagePaths":467,"frontmatter":468,"imagePaths":470},[463],{"depth":63,"slug":464,"text":465},"skills-discussed","Skills Discussed",[],[],{"title":451,"description":452,"date":469,"type":381,"venue":382,"link":454,"featured":455},["Date","2022-08-01T00:00:00.000Z"],[],"2022-08-most-important-engineering-manager-skills.md","2022-09-what-takes-great-technical-leader",{"id":472,"data":474,"body":479,"filePath":480,"digest":481,"rendered":482,"legacyId":494},{"title":475,"description":476,"date":477,"type":381,"venue":382,"link":478,"featured":22},"What it Takes to Be a Great Technical Leader (with Engineering Director)","A comprehensive discussion on technical leadership skills and what separates great technical leaders from good ones, featuring insights from an engineering director.",["Date","2022-09-01T00:00:00.000Z"],"https://youtu.be/_QUuOJK--nM","An in-depth conversation exploring the essential qualities and skills that\ndefine exceptional technical leadership in modern engineering organizations.\n\n## Key Topics Covered\n\n- The evolution from individual contributor to technical leader\n- Building and maintaining technical vision\n- Balancing hands-on work with leadership responsibilities\n- Making architectural decisions at scale\n- Developing and mentoring technical talent\n- Communication strategies for technical leaders\n\nThis interview provides practical insights for engineers aspiring to technical\nleadership roles and current technical leaders looking to refine their approach.","src/content/videos/2022-09-what-takes-great-technical-leader.md","80b7585bbf25a085",{"html":483,"metadata":484},"\u003Cp>An in-depth conversation exploring the essential qualities and skills that\ndefine exceptional technical leadership in modern engineering organizations.\u003C/p>\n\u003Ch2 id=\"key-topics-covered\">Key Topics Covered\u003C/h2>\n\u003Cul>\n\u003Cli>The evolution from individual contributor to technical leader\u003C/li>\n\u003Cli>Building and maintaining technical vision\u003C/li>\n\u003Cli>Balancing hands-on work with leadership responsibilities\u003C/li>\n\u003Cli>Making architectural decisions at scale\u003C/li>\n\u003Cli>Developing and mentoring technical talent\u003C/li>\n\u003Cli>Communication strategies for technical leaders\u003C/li>\n\u003C/ul>\n\u003Cp>This interview provides practical insights for engineers aspiring to technical\nleadership roles and current technical leaders looking to refine their approach.\u003C/p>",{"headings":485,"localImagePaths":489,"remoteImagePaths":490,"frontmatter":491,"imagePaths":493},[486],{"depth":63,"slug":487,"text":488},"key-topics-covered","Key Topics Covered",[],[],{"title":475,"description":476,"date":492,"type":381,"venue":382,"link":478,"featured":22},["Date","2022-09-01T00:00:00.000Z"],[],"2022-09-what-takes-great-technical-leader.md","publications",["Map",497,498,522,523,547,548,572,573,596,597],"2016-04-code-school-powering-up-react",{"id":497,"data":499,"body":506,"filePath":507,"digest":508,"rendered":509,"legacyId":521},{"title":500,"description":501,"date":502,"type":503,"publisher":504,"link":505,"featured":22},"Course - Code School: Powering up with React","Discover how React can help you take control of your UI code with composable user interfaces.",["Date","2016-04-01T00:00:00.000Z"],"Online Course","Pluralsight Courses","https://www.pluralsight.com/courses/code-school-powering-up-with-react","A comprehensive online course introducing developers to React's component-based\narchitecture and modern frontend development patterns.\n\n## Course Learning Objectives\n\n- Understanding React's component model\n- Building reusable UI components\n- Managing component state and props\n- Handling user interactions and events\n- Integrating with external APIs\n- Best practices for React applications\n\nThis course was designed to help developers transition from traditional DOM\nmanipulation to React's declarative approach, providing hands-on experience with\nreal-world examples and projects.","src/content/publications/2016-04-code-school-powering-up-react.md","556616e5185fc227",{"html":510,"metadata":511},"\u003Cp>A comprehensive online course introducing developers to React’s component-based\narchitecture and modern frontend development patterns.\u003C/p>\n\u003Ch2 id=\"course-learning-objectives\">Course Learning Objectives\u003C/h2>\n\u003Cul>\n\u003Cli>Understanding React’s component model\u003C/li>\n\u003Cli>Building reusable UI components\u003C/li>\n\u003Cli>Managing component state and props\u003C/li>\n\u003Cli>Handling user interactions and events\u003C/li>\n\u003Cli>Integrating with external APIs\u003C/li>\n\u003Cli>Best practices for React applications\u003C/li>\n\u003C/ul>\n\u003Cp>This course was designed to help developers transition from traditional DOM\nmanipulation to React’s declarative approach, providing hands-on experience with\nreal-world examples and projects.\u003C/p>",{"headings":512,"localImagePaths":516,"remoteImagePaths":517,"frontmatter":518,"imagePaths":520},[513],{"depth":63,"slug":514,"text":515},"course-learning-objectives","Course Learning Objectives",[],[],{"title":500,"description":501,"date":519,"type":503,"publisher":504,"link":505,"featured":22},["Date","2016-04-01T00:00:00.000Z"],[],"2016-04-code-school-powering-up-react.md","2016-09-hot-javascript-ways",{"id":522,"data":524,"body":531,"filePath":532,"digest":533,"rendered":534,"legacyId":546},{"title":525,"description":526,"date":527,"type":528,"publisher":529,"link":530,"featured":22},"5 hot new ways to use JavaScript","From robots to drones, discover 5 weird and wonderful ways people are using JavaScript.",["Date","2016-09-15T00:00:00.000Z"],"Technical Article","Creative Bloq","https://www.creativebloq.com/features/5-hot-new-ways-to-use-javascript","An exploration of innovative and unexpected applications of JavaScript beyond\ntraditional web development, showcasing the language's versatility in emerging\ntechnologies.\n\n## Innovative JavaScript Applications\n\n- Hardware and IoT device programming\n- Robotics and automation\n- Drone control systems\n- Desktop application development\n- Server-side and systems programming\n\nThis article demonstrates JavaScript's evolution from a simple browser scripting\nlanguage to a versatile tool for diverse computing applications, inspiring\ndevelopers to think beyond traditional use cases.","src/content/publications/2016-09-hot-javascript-ways.md","31ecabb527b7f03d",{"html":535,"metadata":536},"\u003Cp>An exploration of innovative and unexpected applications of JavaScript beyond\ntraditional web development, showcasing the language’s versatility in emerging\ntechnologies.\u003C/p>\n\u003Ch2 id=\"innovative-javascript-applications\">Innovative JavaScript Applications\u003C/h2>\n\u003Cul>\n\u003Cli>Hardware and IoT device programming\u003C/li>\n\u003Cli>Robotics and automation\u003C/li>\n\u003Cli>Drone control systems\u003C/li>\n\u003Cli>Desktop application development\u003C/li>\n\u003Cli>Server-side and systems programming\u003C/li>\n\u003C/ul>\n\u003Cp>This article demonstrates JavaScript’s evolution from a simple browser scripting\nlanguage to a versatile tool for diverse computing applications, inspiring\ndevelopers to think beyond traditional use cases.\u003C/p>",{"headings":537,"localImagePaths":541,"remoteImagePaths":542,"frontmatter":543,"imagePaths":545},[538],{"depth":63,"slug":539,"text":540},"innovative-javascript-applications","Innovative JavaScript Applications",[],[],{"title":525,"description":526,"date":544,"type":528,"publisher":529,"link":530,"featured":22},["Date","2016-09-15T00:00:00.000Z"],[],"2016-09-hot-javascript-ways.md","2016-09-podcast-sergio-cruz-portuguese",{"id":547,"data":549,"body":556,"filePath":557,"digest":558,"rendered":559,"legacyId":571},{"title":550,"description":551,"date":552,"type":553,"publisher":554,"link":555,"featured":22},"Podcast - DNE 73: Entrevista Sergio Cruz (Portuguese 🇧🇷)","@femontanha bate um papo com o @hashtagserg. Ele nos conta sobre sua vontade de conhecer e morar nos Estados Unidos.",["Date","2016-09-01T00:00:00.000Z"],"Podcast","Devnaestrada","https://youtu.be/vLq1FLYnCkU?si=ETTph4tVstBvzHxB","Uma conversa em português sobre a jornada de um desenvolvedor brasileiro nos\nEstados Unidos, explorando temas como imigração, carreira em tecnologia e\nadaptação cultural.\n\n## Tópicos Abordados\n\n- Experiência de imigração para os Estados Unidos\n- Mercado de trabalho tech americano\n- Diferenças culturais no desenvolvimento de software\n- Desafios e oportunidades para desenvolvedores internacionais\n- Conselhos para desenvolvedores brasileiros\n- Networking e comunidade tech\n\nUma perspectiva única sobre a experiência de desenvolvedor internacional na\nindústria de tecnologia americana.","src/content/publications/2016-09-podcast-sergio-cruz-portuguese.md","f3a23ab00a699af7",{"html":560,"metadata":561},"\u003Cp>Uma conversa em português sobre a jornada de um desenvolvedor brasileiro nos\nEstados Unidos, explorando temas como imigração, carreira em tecnologia e\nadaptação cultural.\u003C/p>\n\u003Ch2 id=\"tópicos-abordados\">Tópicos Abordados\u003C/h2>\n\u003Cul>\n\u003Cli>Experiência de imigração para os Estados Unidos\u003C/li>\n\u003Cli>Mercado de trabalho tech americano\u003C/li>\n\u003Cli>Diferenças culturais no desenvolvimento de software\u003C/li>\n\u003Cli>Desafios e oportunidades para desenvolvedores internacionais\u003C/li>\n\u003Cli>Conselhos para desenvolvedores brasileiros\u003C/li>\n\u003Cli>Networking e comunidade tech\u003C/li>\n\u003C/ul>\n\u003Cp>Uma perspectiva única sobre a experiência de desenvolvedor internacional na\nindústria de tecnologia americana.\u003C/p>",{"headings":562,"localImagePaths":566,"remoteImagePaths":567,"frontmatter":568,"imagePaths":570},[563],{"depth":63,"slug":564,"text":565},"tópicos-abordados","Tópicos Abordados",[],[],{"title":550,"description":551,"date":569,"type":553,"publisher":554,"link":555,"featured":22},["Date","2016-09-01T00:00:00.000Z"],[],"2016-09-podcast-sergio-cruz-portuguese.md","2017-06-javascript-tools-blow-mind",{"id":572,"data":574,"body":580,"filePath":581,"digest":582,"rendered":583,"legacyId":595},{"title":575,"description":576,"date":577,"type":528,"publisher":578,"link":579,"featured":22},"20 JavaScript tools to blow your mind","JavaScript has grown beyond the browser. Discover the new features, tools and libraries transforming the way we use it.",["Date","2017-06-01T00:00:00.000Z"],"Net Magazine","https://www.creativebloq.com/features/20-javascript-tools-to-blow-your-mind","An exploration of innovative JavaScript tools and libraries that showcase the\nlanguage's evolution beyond traditional web development into new domains and use\ncases.\n\n## Featured Tools and Technologies\n\n- Server-side JavaScript innovations\n- Desktop application frameworks\n- Mobile development tools\n- IoT and hardware programming\n- Machine learning libraries\n- Data visualization frameworks\n\nThis article highlights the versatility of JavaScript and introduces developers\nto tools that expand the possibilities of what can be built with the language.","src/content/publications/2017-06-javascript-tools-blow-mind.md","38d841f96c7aaa6e",{"html":584,"metadata":585},"\u003Cp>An exploration of innovative JavaScript tools and libraries that showcase the\nlanguage’s evolution beyond traditional web development into new domains and use\ncases.\u003C/p>\n\u003Ch2 id=\"featured-tools-and-technologies\">Featured Tools and Technologies\u003C/h2>\n\u003Cul>\n\u003Cli>Server-side JavaScript innovations\u003C/li>\n\u003Cli>Desktop application frameworks\u003C/li>\n\u003Cli>Mobile development tools\u003C/li>\n\u003Cli>IoT and hardware programming\u003C/li>\n\u003Cli>Machine learning libraries\u003C/li>\n\u003Cli>Data visualization frameworks\u003C/li>\n\u003C/ul>\n\u003Cp>This article highlights the versatility of JavaScript and introduces developers\nto tools that expand the possibilities of what can be built with the language.\u003C/p>",{"headings":586,"localImagePaths":590,"remoteImagePaths":591,"frontmatter":592,"imagePaths":594},[587],{"depth":63,"slug":588,"text":589},"featured-tools-and-technologies","Featured Tools and Technologies",[],[],{"title":575,"description":576,"date":593,"type":528,"publisher":578,"link":579,"featured":22},["Date","2017-06-01T00:00:00.000Z"],[],"2017-06-javascript-tools-blow-mind.md","2017-02-angular-component-communication",{"id":596,"data":598,"body":604,"filePath":605,"digest":606,"rendered":607,"legacyId":619},{"title":599,"description":600,"date":601,"type":528,"publisher":602,"link":603,"featured":22},"Getting Components to Communicate in Angular","Components are the building blocks of Angular and every visual element in an Angular application is made with components.",["Date","2017-02-01T00:00:00.000Z"],"InfoQ","https://www.infoq.com/articles/angular-component-communication","A comprehensive guide to component communication patterns in Angular, covering\nthe various ways components can share data and coordinate behavior in modern\nAngular applications.\n\n## Communication Patterns Covered\n\n- Parent-child component communication\n- Sibling component coordination\n- Service-based communication\n- Event emitters and observables\n- State management strategies\n- Best practices for maintainable architectures\n\nThis article serves as a practical reference for Angular developers building\ncomplex component hierarchies and seeking to implement clean communication\npatterns.","src/content/publications/2017-02-angular-component-communication.md","30fdb38a660f2e95",{"html":608,"metadata":609},"\u003Cp>A comprehensive guide to component communication patterns in Angular, covering\nthe various ways components can share data and coordinate behavior in modern\nAngular applications.\u003C/p>\n\u003Ch2 id=\"communication-patterns-covered\">Communication Patterns Covered\u003C/h2>\n\u003Cul>\n\u003Cli>Parent-child component communication\u003C/li>\n\u003Cli>Sibling component coordination\u003C/li>\n\u003Cli>Service-based communication\u003C/li>\n\u003Cli>Event emitters and observables\u003C/li>\n\u003Cli>State management strategies\u003C/li>\n\u003Cli>Best practices for maintainable architectures\u003C/li>\n\u003C/ul>\n\u003Cp>This article serves as a practical reference for Angular developers building\ncomplex component hierarchies and seeking to implement clean communication\npatterns.\u003C/p>",{"headings":610,"localImagePaths":614,"remoteImagePaths":615,"frontmatter":616,"imagePaths":618},[611],{"depth":63,"slug":612,"text":613},"communication-patterns-covered","Communication Patterns Covered",[],[],{"title":599,"description":600,"date":617,"type":528,"publisher":602,"link":603,"featured":22},["Date","2017-02-01T00:00:00.000Z"],[],"2017-02-angular-component-communication.md","courses",["Map",622,623,648,649],"2025-06-emptf",{"id":622,"data":624,"body":632,"filePath":633,"digest":634,"rendered":635,"legacyId":647},{"title":625,"description":626,"date":627,"platform":628,"link":629,"featured":455,"icon":630,"heroImage":631},"Engineering Management Processes & Tools Fundamentals","Master the foundations of CI/CD, monitoring, and alerting to build resilient delivery systems that drive continuous improvement and operational excellence.",["Date","2025-06-01T00:00:00.000Z"],"Pluralsight","https://www.pluralsight.com/courses/engineering-management-processes-tools-fundamentals","⚙️","/images/courses/2025-06-emptf.jpg","A foundational course for engineering managers covering the essential processes\nand tools needed to build and manage high-performing engineering teams\neffectively.\n\n## What You'll Learn\n\n- Fundamental engineering management processes\n- Tool selection and evaluation frameworks\n- Workflow optimization strategies\n- Team process implementation\n- Scaling processes as teams grow\n- Measuring process effectiveness\n\nThis course provides practical guidance for new and experienced engineering\nmanagers looking to establish robust processes and select the right tools for\ntheir teams.","src/content/courses/2025-06-emptf.md","62b8cd383a765a8e",{"html":636,"metadata":637},"\u003Cp>A foundational course for engineering managers covering the essential processes\nand tools needed to build and manage high-performing engineering teams\neffectively.\u003C/p>\n\u003Ch2 id=\"what-youll-learn\">What You’ll Learn\u003C/h2>\n\u003Cul>\n\u003Cli>Fundamental engineering management processes\u003C/li>\n\u003Cli>Tool selection and evaluation frameworks\u003C/li>\n\u003Cli>Workflow optimization strategies\u003C/li>\n\u003Cli>Team process implementation\u003C/li>\n\u003Cli>Scaling processes as teams grow\u003C/li>\n\u003Cli>Measuring process effectiveness\u003C/li>\n\u003C/ul>\n\u003Cp>This course provides practical guidance for new and experienced engineering\nmanagers looking to establish robust processes and select the right tools for\ntheir teams.\u003C/p>",{"headings":638,"localImagePaths":642,"remoteImagePaths":643,"frontmatter":644,"imagePaths":646},[639],{"depth":63,"slug":640,"text":641},"what-youll-learn","What You’ll Learn",[],[],{"title":625,"description":626,"date":645,"platform":628,"link":629,"featured":455,"icon":630,"heroImage":631},["Date","2025-06-01T00:00:00.000Z"],[],"2025-06-emptf.md","2024-09-pm4ems",{"id":648,"data":650,"body":657,"filePath":658,"digest":659,"rendered":660,"legacyId":670},{"title":651,"description":652,"date":653,"platform":628,"link":654,"featured":455,"icon":655,"heroImage":656},"Product Management for Engineering Managers","Learn how engineering managers can collaborate with product teams, define vision, and drive outcomes in this 30-minute course on Pluralsight.",["Date","2024-09-15T00:00:00.000Z"],"https://www.pluralsight.com/courses/product-management-engineering-managers","🎯","/images/courses/2024-09-pm4ems.jpg","Essential product management skills for engineering managers who need to work\nclosely with product teams and drive product outcomes while managing technical\nteams.\n\n## What You'll Learn\n\n- Product strategy fundamentals for engineers\n- Collaboration techniques with product managers\n- User-centered thinking and customer empathy\n- Roadmap planning and prioritization\n- Data-driven decision making\n- Balancing technical debt and feature development\n- Product discovery and validation techniques\n- Stakeholder communication and alignment\n\nThis course helps engineering managers develop the product mindset needed to\nbridge technical and business requirements effectively, ensuring engineering\nteams deliver maximum value to users and the business.","src/content/courses/2024-09-pm4ems.md","9ee0c8fdbed60a22",{"html":661,"metadata":662},"\u003Cp>Essential product management skills for engineering managers who need to work\nclosely with product teams and drive product outcomes while managing technical\nteams.\u003C/p>\n\u003Ch2 id=\"what-youll-learn\">What You’ll Learn\u003C/h2>\n\u003Cul>\n\u003Cli>Product strategy fundamentals for engineers\u003C/li>\n\u003Cli>Collaboration techniques with product managers\u003C/li>\n\u003Cli>User-centered thinking and customer empathy\u003C/li>\n\u003Cli>Roadmap planning and prioritization\u003C/li>\n\u003Cli>Data-driven decision making\u003C/li>\n\u003Cli>Balancing technical debt and feature development\u003C/li>\n\u003Cli>Product discovery and validation techniques\u003C/li>\n\u003Cli>Stakeholder communication and alignment\u003C/li>\n\u003C/ul>\n\u003Cp>This course helps engineering managers develop the product mindset needed to\nbridge technical and business requirements effectively, ensuring engineering\nteams deliver maximum value to users and the business.\u003C/p>",{"headings":663,"localImagePaths":665,"remoteImagePaths":666,"frontmatter":667,"imagePaths":669},[664],{"depth":63,"slug":640,"text":641},[],[],{"title":651,"description":652,"date":668,"platform":628,"link":654,"featured":455,"icon":655,"heroImage":656},["Date","2024-09-15T00:00:00.000Z"],[],"2024-09-pm4ems.md"]