name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  # Allow manual triggering
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout your repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build Astro project
        run: npm run build

      - name: Run Playwright tests
        run: npm run test
        env:
          PLAYWRIGHT_TEST_BASE_URL: 'http://localhost:4321'

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: tests/output/playwright-report
          retention-days: 30

      - name: Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  purge_cache:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Purge Cloudflare Cache
        run: |
          set -e
          echo "Attempting to purge Cloudflare cache for zone ${{ secrets.CLOUDFLARE_ZONE_ID }}..."
          
          # Make API call and capture both HTTP status and response body
          # Using a temporary file to capture the response body while getting the status code
          temp_response_file=$(mktemp)
          
          http_status=$(curl -s -w "%{http_code}" -o "$temp_response_file" \
                       -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
                       -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
                       -H "Content-Type: application/json" \
                       --data '{"purge_everything":true}')
          
          # Read the response body from the temporary file
          response=$(cat "$temp_response_file")
          
          # Clean up temporary file
          rm -f "$temp_response_file"
          
          echo "Cloudflare API Response: $response"
          echo "HTTP Status Code: $http_status"
          
          # First, check HTTP status code (should be 200 for successful requests)
          if [ "$http_status" -ne 200 ]; then
            echo "HTTP request failed with status code: $http_status"
            echo "Response body: $response"
            exit 1
          fi
          
          # Second, check if jq is available (it should be in GitHub Actions runners)
          if ! command -v jq &> /dev/null; then
            echo "jq is not available, falling back to grep method"
            if echo "$response" | grep -q '"success":true'; then
              echo "Cloudflare cache purged successfully! (verified via grep)"
            else
              echo "Failed to purge Cloudflare cache."
              echo "Error details: $response"
              exit 1
            fi
          else
            # Third, use jq to robustly parse the JSON response
            success_status=$(echo "$response" | jq -r '.success // false')
            
            if [ "$success_status" = "true" ]; then
              echo "Cloudflare cache purged successfully! (verified via jq)"
              
              # Optionally, extract and display the purge ID for reference
              purge_id=$(echo "$response" | jq -r '.result.id // "unknown"')
              echo "Purge ID: $purge_id"
            else
              echo "Cloudflare API returned success=false"
              
              # Extract error details if available
              errors=$(echo "$response" | jq -r '.errors // []')
              if [ "$errors" != "[]" ] && [ "$errors" != "null" ]; then
                echo "API Errors: $errors"
              fi
              
              echo "Full response: $response"
              exit 1
            fi
          fi
