---
import { SITE } from '../config/site.ts';
import '../styles/globals.css';

export interface Props {
  title: string;
  description?: string;
  image?: string;
  canonical?: string;
}

const {
  title = SITE.title,
  description = SITE.description,
  image = SITE.defaultImage,
  canonical,
} = Astro.props;
const canonicalURL = canonical || new URL(Astro.url.pathname, Astro.site);
---

<!doctype html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />

    <!-- Favicons -->
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <link rel="icon" type="image/png" sizes="96x96" href="/favicon-96x96.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="192x192" href="/web-app-manifest-192x192.png" />
    <link rel="icon" type="image/png" sizes="512x512" href="/web-app-manifest-512x512.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <meta name="msapplication-TileColor" content="#2A2A2A" />
    <meta name="theme-color" content="#2A2A2A" />

    <!-- SEO Meta Tags -->
    <title>{title}</title>
    <meta name="description" content={description} />
    <link rel="canonical" href={canonicalURL} />

    <!-- Open Graph -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(image, Astro.url)} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(image, Astro.url)} />

    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Playfair+Display:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />

    <!-- Theme Script -->
    <script is:inline>
      // Theme detection: respects user override, falls back to system preference
      const getInitialTheme = () => {
        // First: Check if user has manually set a preference
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
          return localStorage.getItem('theme');
        }

        // Second: Check system preference
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
          return 'dark';
        }

        // Third: Default to light mode
        return 'light';
      };

      const theme = getInitialTheme();

      // Apply theme immediately to prevent flash
      if (theme === 'light') {
        document.documentElement.classList.remove('dark');
      } else {
        document.documentElement.classList.add('dark');
      }

      // Save the determined theme (this will be the system preference if no user override exists)
      if (typeof localStorage !== 'undefined') {
        localStorage.setItem('theme', theme);
      }
    </script>

    <!-- prettier-ignore-start -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-XMY4ZPQD30"></script>
    <script is:inline>
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag('js', new Date());

      gtag('config', 'G-XMY4ZPQD30');
    </script>

    <script is:inline>
      window['_fs_host'] = 'fullstory.com';
      window['_fs_script'] = 'edge.fullstory.com/s/fs.js';
      window['_fs_org'] = 'GXS0E';
      window['_fs_namespace'] = 'FS';
      !(function (m, n, e, t, l, o, g, y) {
        var s,
          f,
          a = (function (h) {
            return (
              !(h in m) ||
              (m.console &&
                m.console.log &&
                m.console.log('FullStory namespace conflict. Please set window["_fs_namespace"].'),
              !1)
            );
          })(e);
        function p(b) {
          var h,
            d = [];
          function j() {
            h &&
              (d.forEach(function (b) {
                var d;
                try {
                  d = b[h[0]] && b[h[0]](h[1]);
                } catch (h) {
                  return void (b[3] && b[3](h));
                }
                d && d.then ? d.then(b[2], b[3]) : b[2] && b[2](d);
              }),
              (d.length = 0));
          }
          function r(b) {
            return function (d) {
              h || ((h = [b, d]), j());
            };
          }
          return (
            b(r(0), r(1)),
            {
              then: function (b, h) {
                return p(function (r, i) {
                  (d.push([b, h, r, i]), j());
                });
              },
            }
          );
        }
        a &&
          ((g = m[e] =
            (function () {
              var b = function (b, d, j, r) {
                function i(i, c) {
                  h(b, d, j, i, c, r);
                }
                r = r || 2;
                var c,
                  u = /Async$/;
                return u.test(b)
                  ? ((b = b.replace(u, '')), 'function' == typeof Promise ? new Promise(i) : p(i))
                  : h(b, d, j, c, c, r);
              };
              function h(h, d, j, r, i, c) {
                return b._api
                  ? b._api(h, d, j, r, i, c)
                  : (b.q && b.q.push([h, d, j, r, i, c]), null);
              }
              return ((b.q = []), b);
            })()),
          (y = function (b) {
            function h(h) {
              'function' == typeof h[4] && h[4](new Error(b));
            }
            var d = g.q;
            if (d) {
              for (var j = 0; j < d.length; j++) h(d[j]);
              ((d.length = 0), (d.push = h));
            }
          }),
          (function () {
            (((o = n.createElement(t)).async = !0),
              (o.crossOrigin = 'anonymous'),
              (o.src = 'https://' + l),
              (o.onerror = function () {
                y('Error loading ' + l);
              }));
            var b = n.getElementsByTagName(t)[0];
            b && b.parentNode ? b.parentNode.insertBefore(o, b) : n.head.appendChild(o);
          })(),
          (function () {
            function b() {}
            function h(b, h, d) {
              g(b, h, d, 1);
            }
            function d(b, d, j) {
              h('setProperties', { type: b, properties: d }, j);
            }
            function j(b, h) {
              d('user', b, h);
            }
            function r(b, h, d) {
              (j(
                {
                  uid: b,
                },
                d
              ),
                h && j(h, d));
            }
            ((g.identify = r),
              (g.setUserVars = j),
              (g.identifyAccount = b),
              (g.clearUserCookie = b),
              (g.setVars = d),
              (g.event = function (b, d, j) {
                h(
                  'trackEvent',
                  {
                    name: b,
                    properties: d,
                  },
                  j
                );
              }),
              (g.anonymize = function () {
                r(!1);
              }),
              (g.shutdown = function () {
                h('shutdown');
              }),
              (g.restart = function () {
                h('restart');
              }),
              (g.log = function (b, d) {
                h('log', { level: b, msg: d });
              }),
              (g.consent = function (b) {
                h('setIdentity', { consent: !arguments.length || b });
              }));
          })(),
          (s = 'fetch'),
          (f = 'XMLHttpRequest'),
          (g._w = {}),
          (g._w[f] = m[f]),
          (g._w[s] = m[s]),
          m[s] &&
            (m[s] = function () {
              return g._w[s].apply(this, arguments);
            }),
          (g._v = '2.0.0'));
      })(window, document, window._fs_namespace, 'script', window._fs_script);
    </script>
    <!-- prettier-ignore-end -->
  </head>
  <body
    class="bg-brand-light text-brand-primary transition-colors duration-300 dark:bg-brand-dark dark:text-brand-light"
  >
    <slot />
  </body>
</html>
