---
import { SITE } from '../config/site.ts';
import BaseLayout from '../layouts/BaseLayout.astro';
import Navigation from '../components/Navigation.astro';
import Footer from '../components/Footer.astro';
import resumeData from '../data/resume.json';

// Helper function to format dates
const formatDate = (dateString: string) => {
  if (!dateString) return '';
  if (dateString === 'Present') return 'Present';

  // Parse "Month Year" format
  const [month, year] = dateString.split(' ');
  const monthNames = {
    'Jan': 'Jan', 'Feb': 'Feb', 'Mar': 'Mar', 'Apr': 'Apr',
    'May': 'May', 'Jun': 'Jun', 'Jul': 'Jul', 'Aug': 'Aug',
    'Sep': 'Sep', 'Oct': 'Oct', 'Nov': 'Nov', 'Dec': 'Dec'
  };
  return `${monthNames[month]} ${year}`;
};

// Helper function to format dates - years only for older companies
const formatDateYearsOnly = (dateString: string) => {
  if (!dateString) return '';
  if (dateString === 'Present') return 'Present';

  // Extract year from "Month Year" format
  const parts = dateString.split(' ');
  return parts[parts.length - 1]; // Get the year part
};

// Helper to get overall date range for a company
const getCompanyDateRange = (company: typeof resumeData.experience[0], yearOnlyMode: boolean = false) => {
  let firstStartDate: Date | null = null;
  let lastEndDate: Date | null = null;

  if (company.roles) {
    company.roles.forEach(role => {
      const currentStartDate = new Date(role.start_date);
      if (!firstStartDate || currentStartDate < firstStartDate) {
        firstStartDate = currentStartDate;
      }

      const currentEndDate = role.end_date === 'Present' ? new Date() : new Date(role.end_date);
      if (!lastEndDate || currentEndDate > lastEndDate) {
        lastEndDate = currentEndDate;
      }
    });
  } else {
    // Single role company
    firstStartDate = new Date(company.start_date);
    lastEndDate = company.end_date === 'Present' ? new Date() : new Date(company.end_date);
  }

  if (!firstStartDate || !lastEndDate) return '';

  if (yearOnlyMode) {
    const firstYear = firstStartDate.getFullYear().toString();
    const lastYear = lastEndDate.getFullYear() === new Date().getFullYear() && lastEndDate.getMonth() === new Date().getMonth() ? 'Present' : lastEndDate.getFullYear().toString();
    return `${firstYear} - ${lastYear}`;
  } else {
    const formattedFirstStartDate = formatDate(firstStartDate.toLocaleDateString('en-US', { month: 'short', year: 'numeric' }).replace(',', ''));
    const formattedLastEndDate = lastEndDate.getFullYear() === new Date().getFullYear() && lastEndDate.getMonth() === new Date().getMonth() ? 'Present' : formatDate(lastEndDate.toLocaleDateString('en-US', { month: 'short', year: 'numeric' }).replace(',', ''));
    return `${formattedFirstStartDate} - ${formattedLastEndDate}`;
  }

};

// Community accomplishments (additional data not in LinkedIn JSON)
const accomplishments = [
  {
    "name": "Orlando Devs, Inc.",
    "position": "President",
    "when": "2016 - 2018",
    "description": "Nonprofit focused on improving the quality of life of Software Professionals in Central Florida. The organization accompanies a community of over 3,000 members who actively engage both in person and online.",
    "url": "https://orlandodevs.com/"
  },
  {
    "name": "OrlandoJS",
    "position": "Co-organizer",
    "when": "2015 - 2018",
    "description": "Tech meetup in Orlando that covers all things JavaScript and meets on a monthly basis.",
    "url": "https://meetup.com/OrlandoJS/"
  }
];

---

<BaseLayout title={`Resume - ${SITE.author}`} description={`Professional resume and experience of ${SITE.author}, Senior Engineering Leader with over 12 years of experience.`}>
  <Navigation />
  
  <main class="pt-16">
    <!-- Hero Section -->
    <section class="bg-brand-light dark:bg-brand-dark py-24">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
        <h1 class="text-4xl sm:text-5xl font-serif font-semibold text-brand-primary dark:text-brand-light mb-6">
          Resume
        </h1>
        <p class="text-xl text-brand-subtle dark:text-gray-300 max-w-2xl mx-auto mb-8">
          Senior engineering leader with experience scaling teams, shaping product strategy, and delivering reliable systems.
        </p>
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          <a href="/downloads/cruzresume.pdf" target="_blank" class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-brand-accent hover:bg-accent-bronze focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-brand-accent transition-colors">
            <svg class="mr-2 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            Download PDF
          </a>
          <a href="mailto:hi@sergio.io" class="inline-flex items-center px-6 py-3 border border-gray-300 dark:border-gray-600 text-base font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-brand-accent transition-colors">
            Contact Me
          </a>
        </div>
      </div>
    </section>

    <!-- Experience -->
    <section class="bg-white dark:bg-brand-primary py-16">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <h2 class="text-2xl font-serif font-semibold text-brand-primary dark:text-brand-light mb-8">Professional Experience</h2>
        
        <div class="space-y-10">
          {resumeData.experience.map((company, index) => (
            <div class:list={[
              'border-l-4 pl-6 relative',
              index === 0 ? 'border-primary-600' : 'border-gray-300 dark:border-gray-600',
              index === 2 ? 'preview-experience' : '',
              index >= 3 ? 'older-experience' : ''
            ]}>
              <div class="mb-4">
                <h3 class="text-xl font-serif font-semibold text-brand-primary dark:text-brand-light">{company.company}</h3>
                <p class="text-brand-accent dark:text-brand-accent font-semibold mb-1">{company.location}</p>
                <span class="text-sm text-gray-500 dark:text-gray-400">{getCompanyDateRange(company, index >= 2)}</span>
              </div>

              {company.roles ? (
                // Multiple roles for this company
                <div class="space-y-6">
                  {company.roles.map(role => (
                    <div class="ml-4 border-l-2 border-gray-200 dark:border-gray-700 pl-4">
                      <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-2">
                        <h4 class="text-lg font-serif font-semibold text-brand-primary dark:text-brand-light">{role.title}</h4>
                        <span class="text-sm text-gray-500 dark:text-gray-400">{index >= 2 ? `${formatDateYearsOnly(role.start_date)} - ${formatDateYearsOnly(role.end_date)}` : `${formatDate(role.start_date)} - ${formatDate(role.end_date)}`}</span>
                      </div>
                      <ul class="text-brand-subtle dark:text-gray-300 space-y-2 mb-4">
                        {role.responsibilities.map(responsibility => (
                          <li>• {responsibility}</li>
                        ))}
                      </ul>
                    </div>
                  ))}
                </div>
              ) : (
                // Single role for this company
                <div>
                  <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-2">
                    <h4 class="text-lg font-serif font-semibold text-brand-primary dark:text-brand-light">{company.title}</h4>
                    <span class="text-sm text-gray-500 dark:text-gray-400">{index >= 2 ? `${formatDateYearsOnly(company.start_date)} - ${formatDateYearsOnly(company.end_date)}` : `${formatDate(company.start_date)} - ${formatDate(company.end_date)}`}</span>
                  </div>
                  <ul class="text-brand-subtle dark:text-gray-300 space-y-2 mb-4">
                    {company.responsibilities.map(responsibility => (
                      <li>• {responsibility}</li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
            
            {/* Render gradient overlay directly on the preview experience */}
            {index === 2 && (
              <div class="absolute inset-0 z-10 pointer-events-none rounded-lg" id="previewGradientOverlay">
                <div class="gradient-fade"></div>
              </div>
            )}
          ))}
          
          <!-- Show More/Less Button -->
          <div class="text-center pt-6">
            <button 
              id="toggleOlderExperience"
              class="inline-flex items-center px-6 py-3 border border-brand-subtle text-base font-medium rounded-md text-brand-primary dark:text-brand-light bg-transparent hover:bg-brand-subtle/10 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-brand-accent transition-colors"
            >
              <span id="toggleText">Show Earlier Experience</span>
              <svg id="toggleIcon" class="ml-2 w-4 h-4 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
              </svg>
            </button>
          </div>
        </div>
      </div>
    </section>

    <!-- Community Involvement & Leadership -->
    <section class="bg-brand-light dark:bg-brand-dark py-16">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <h2 class="text-2xl font-serif font-semibold text-brand-primary dark:text-brand-light mb-8">Community Involvement & Leadership</h2>
        
        <div class="space-y-6">
          {accomplishments.map((accomplishment) => (
            <div class="border-l-4 border-primary-600 pl-6">
              <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-2">
                <div class="flex items-center gap-2">
                  <h3 class="text-lg font-serif font-semibold text-brand-primary dark:text-brand-light">{accomplishment.name}</h3>
                  <span class="text-brand-accent dark:text-brand-accent font-medium">• {accomplishment.position}</span>
                </div>
                <span class="text-sm text-gray-500 dark:text-gray-400">{accomplishment.when}</span>
              </div>
              <p class="text-brand-subtle dark:text-gray-300 mb-2">{accomplishment.description}</p>
              {accomplishment.url && (
                <a href={accomplishment.url} target="_blank" rel="noopener noreferrer" class="text-brand-link dark:text-brand-link hover:text-accent-blue dark:hover:text-accent-blue text-sm font-medium">
                  Visit Website →
                </a>
              )}
            </div>
          ))}
        </div>
      </div>
    </section>
  </main>
  
  <Footer />
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const toggleButton = document.getElementById('toggleOlderExperience');
      const toggleText = document.getElementById('toggleText');
      const toggleIcon = document.getElementById('toggleIcon');
      const olderExperience = document.querySelectorAll('.older-experience');
      const previewGradient = document.getElementById('previewGradientOverlay');
      
      let isExpanded = false;
      
      toggleButton?.addEventListener('click', function() {
        isExpanded = !isExpanded;
        
        olderExperience.forEach(element => {
          if (isExpanded) {
            element.style.display = 'block';
          } else {
            element.style.display = 'none';
          }
        });
        
        // Toggle gradient visibility
        if (previewGradient) {
          if (isExpanded) {
            previewGradient.classList.add('hidden');
          } else {
            previewGradient.classList.remove('hidden');
          }
        }
        
        if (toggleText) {
          toggleText.textContent = isExpanded ? 'Show Less Experience' : 'Show Earlier Experience';
        }
        
        if (toggleIcon) {
          if (isExpanded) {
            toggleIcon.style.transform = 'rotate(180deg)';
          } else {
            toggleIcon.style.transform = 'rotate(0deg)';
          }
        }
      });
    });
  </script>
  
  <style>
    /* Hide older experience by default - no JS required */
    .older-experience {
      display: none;
    }
    
    .gradient-fade {
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      height: 60%;
      background: linear-gradient(
        to bottom,
        transparent 0%,
        rgba(246, 245, 244, 0.7) 40%,
        rgba(246, 245, 244, 0.95) 80%,
        rgb(246, 245, 244) 100%
      );
      border-radius: 0 0 0.5rem 0.5rem;
    }
    
    /* Dark mode gradient */
    .dark .gradient-fade {
      background: linear-gradient(
        to bottom,
        transparent 0%,
        rgba(18, 18, 18, 0.7) 40%,
        rgba(18, 18, 18, 0.95) 80%,
        rgb(18, 18, 18) 100%
      );
    }
  </style>
</BaseLayout>